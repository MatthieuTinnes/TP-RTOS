
TP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007064  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800738c  0800738c  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007394  08007394  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007398  08007398  00017398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800739c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a14  200000f8  08007494  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b0c  08007494  00024b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9e3  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003857  00000000  00000000  0003ab0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003e368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  0003f830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017eb4  00000000  00000000  00040b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012231  00000000  00000000  000589f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000895f5  00000000  00000000  0006ac25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f421a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dec  00000000  00000000  000f4298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800721c 	.word	0x0800721c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000fc 	.word	0x200000fc
 800020c:	0800721c 	.word	0x0800721c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Send_Message_queue_Thread>:
		osDelay(500);
	}
	osThreadTerminate(NULL);
}

void Send_Message_queue_Thread(void *P_Info) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b090      	sub	sp, #64	; 0x40
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	char Message[MSG_SIZE];
	while (1) {
		osMessageQueueGet(queue,Message,0,osWaitForever);
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <Send_Message_queue_Thread+0x28>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	f107 010c 	add.w	r1, r7, #12
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	2200      	movs	r2, #0
 80005c6:	f002 fe09 	bl	80031dc <osMessageQueueGet>
		printf("%s\r\n", Message);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4619      	mov	r1, r3
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <Send_Message_queue_Thread+0x2c>)
 80005d2:	f005 fd21 	bl	8006018 <iprintf>
		osMessageQueueGet(queue,Message,0,osWaitForever);
 80005d6:	e7ef      	b.n	80005b8 <Send_Message_queue_Thread+0x8>
 80005d8:	20004a30 	.word	0x20004a30
 80005dc:	0800728c 	.word	0x0800728c

080005e0 <Generate_Message_random_Thread>:
	}
	osThreadTerminate(NULL);
}

void Generate_Message_random_Thread(void *P_Info) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_RNG_GenerateRandomNumber_IT(&hrng);
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <Generate_Message_random_Thread+0x58>)
 80005ea:	f001 fb7f 	bl	8001cec <HAL_RNG_GenerateRandomNumber_IT>
	char Message[MSG_SIZE];
	uint32_t Valeur_Random;
	while(1){
		if (Nombre_Aleatoire_Present) {
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <Generate_Message_random_Thread+0x5c>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d019      	beq.n	800062c <Generate_Message_random_Thread+0x4c>
			Valeur_Random = HAL_RNG_ReadLastRandomNumber(&hrng);
 80005f8:	480f      	ldr	r0, [pc, #60]	; (8000638 <Generate_Message_random_Thread+0x58>)
 80005fa:	f001 fbfc 	bl	8001df6 <HAL_RNG_ReadLastRandomNumber>
 80005fe:	63f8      	str	r0, [r7, #60]	; 0x3c
			sprintf(Message,"Random : %ld",Valeur_Random);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000606:	490e      	ldr	r1, [pc, #56]	; (8000640 <Generate_Message_random_Thread+0x60>)
 8000608:	4618      	mov	r0, r3
 800060a:	f005 fd81 	bl	8006110 <siprintf>
			osMessageQueuePut(queue,Message,0,osWaitForever);
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <Generate_Message_random_Thread+0x64>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	f107 0108 	add.w	r1, r7, #8
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2200      	movs	r2, #0
 800061c:	f002 fd6a 	bl	80030f4 <osMessageQueuePut>
			Nombre_Aleatoire_Present=0;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <Generate_Message_random_Thread+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
			HAL_RNG_GenerateRandomNumber_IT(&hrng);
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <Generate_Message_random_Thread+0x58>)
 8000628:	f001 fb60 	bl	8001cec <HAL_RNG_GenerateRandomNumber_IT>
		}
		HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000630:	f000 fc0a 	bl	8000e48 <HAL_Delay>
		if (Nombre_Aleatoire_Present) {
 8000634:	e7db      	b.n	80005ee <Generate_Message_random_Thread+0xe>
 8000636:	bf00      	nop
 8000638:	20004a34 	.word	0x20004a34
 800063c:	20000114 	.word	0x20000114
 8000640:	08007294 	.word	0x08007294
 8000644:	20004a30 	.word	0x20004a30

08000648 <Generate_Message_button_Thread>:
	}
	osThreadTerminate(NULL);
}

void Generate_Message_button_Thread(void *P_Info) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b090      	sub	sp, #64	; 0x40
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	char Message[MSG_SIZE];
	while(1){
		osThreadFlagsWait( FLAG_BOUTON_BLEU, osFlagsWaitAny, HAL_MAX_DELAY);
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	2100      	movs	r1, #0
 8000656:	2001      	movs	r0, #1
 8000658:	f002 fc32 	bl	8002ec0 <osThreadFlagsWait>
		uint32_t time = osKernelSysTick();
 800065c:	f002 fafa 	bl	8002c54 <osKernelGetSysTimerCount>
 8000660:	63f8      	str	r0, [r7, #60]	; 0x3c
		sprintf(Message,"Bouton : %ld",time);
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000668:	4906      	ldr	r1, [pc, #24]	; (8000684 <Generate_Message_button_Thread+0x3c>)
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fd50 	bl	8006110 <siprintf>
		osMessageQueuePut(queue,Message,0,osWaitForever);
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <Generate_Message_button_Thread+0x40>)
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	f107 0108 	add.w	r1, r7, #8
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	2200      	movs	r2, #0
 800067e:	f002 fd39 	bl	80030f4 <osMessageQueuePut>
	while(1){
 8000682:	e7e5      	b.n	8000650 <Generate_Message_button_Thread+0x8>
 8000684:	080072a4 	.word	0x080072a4
 8000688:	20004a30 	.word	0x20004a30

0800068c <HAL_GPIO_EXTI_Callback>:
	}
	osThreadTerminate(NULL);
}

void HAL_GPIO_EXTI_Callback(uint16_t P_Numero_GPIO)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
    if (P_Numero_GPIO == BOUTON_BLEU_Pin) {
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069c:	d109      	bne.n	80006b2 <HAL_GPIO_EXTI_Callback+0x26>
    	HAL_GPIO_TogglePin(LED_VERTE_GPIO_Port, LED_VERTE_Pin);
 800069e:	2120      	movs	r1, #32
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <HAL_GPIO_EXTI_Callback+0x30>)
 80006a2:	f000 fe60 	bl	8001366 <HAL_GPIO_TogglePin>
    	osThreadFlagsSet(ID_Thread_1,FLAG_BOUTON_BLEU);
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x34>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2101      	movs	r1, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fba5 	bl	8002dfc <osThreadFlagsSet>
    }
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40020000 	.word	0x40020000
 80006c0:	20004a2c 	.word	0x20004a2c

080006c4 <HAL_RNG_ReadyDataCallback>:
void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *P_Handle, uint32_t P_Valeur)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
	UNUSED(P_Valeur);
	if (P_Handle== &hrng) {
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <HAL_RNG_ReadyDataCallback+0x24>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d102      	bne.n	80006dc <HAL_RNG_ReadyDataCallback+0x18>
	Nombre_Aleatoire_Present=1;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <HAL_RNG_ReadyDataCallback+0x28>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
	}
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	20004a34 	.word	0x20004a34
 80006ec:	20000114 	.word	0x20000114

080006f0 <main>:

int main() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_Init();
 80006f4:	f000 fb66 	bl	8000dc4 <HAL_Init>
	SystemClock_Config();
 80006f8:	f000 f8b6 	bl	8000868 <SystemClock_Config>
	MX_GPIO_Init();
 80006fc:	f000 f858 	bl	80007b0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000700:	f000 fac4 	bl	8000c8c <MX_USART2_UART_Init>
	MX_RNG_Init();
 8000704:	f000 f930 	bl	8000968 <MX_RNG_Init>
	osKernelInitialize();
 8000708:	f002 fa3a 	bl	8002b80 <osKernelInitialize>
	queue = osMessageQueueNew(50,MSG_SIZE,&queue_attr);
 800070c:	4a0f      	ldr	r2, [pc, #60]	; (800074c <main+0x5c>)
 800070e:	2132      	movs	r1, #50	; 0x32
 8000710:	2032      	movs	r0, #50	; 0x32
 8000712:	f002 fc69 	bl	8002fe8 <osMessageQueueNew>
 8000716:	4602      	mov	r2, r0
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <main+0x60>)
 800071a:	601a      	str	r2, [r3, #0]

	osThreadNew(Generate_Message_random_Thread, NULL, &Config_T1_Thread);
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <main+0x64>)
 800071e:	2100      	movs	r1, #0
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <main+0x68>)
 8000722:	f002 fac5 	bl	8002cb0 <osThreadNew>
	osThreadNew(Send_Message_queue_Thread, NULL, &Config_T2_Thread);
 8000726:	4a0d      	ldr	r2, [pc, #52]	; (800075c <main+0x6c>)
 8000728:	2100      	movs	r1, #0
 800072a:	480d      	ldr	r0, [pc, #52]	; (8000760 <main+0x70>)
 800072c:	f002 fac0 	bl	8002cb0 <osThreadNew>
	ID_Thread_1 = osThreadNew(Generate_Message_button_Thread, NULL, &Config_T3_Thread);
 8000730:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <main+0x74>)
 8000732:	2100      	movs	r1, #0
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x78>)
 8000736:	f002 fabb 	bl	8002cb0 <osThreadNew>
 800073a:	4602      	mov	r2, r0
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <main+0x7c>)
 800073e:	601a      	str	r2, [r3, #0]
	printf("Start OS...\r\n");
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <main+0x80>)
 8000742:	f005 fcdd 	bl	8006100 <puts>
	osKernelStart();
 8000746:	f002 fa4f 	bl	8002be8 <osKernelStart>
	while (1)
 800074a:	e7fe      	b.n	800074a <main+0x5a>
 800074c:	20000000 	.word	0x20000000
 8000750:	20004a30 	.word	0x20004a30
 8000754:	20000018 	.word	0x20000018
 8000758:	080005e1 	.word	0x080005e1
 800075c:	2000003c 	.word	0x2000003c
 8000760:	080005b1 	.word	0x080005b1
 8000764:	20000060 	.word	0x20000060
 8000768:	08000649 	.word	0x08000649
 800076c:	20004a2c 	.word	0x20004a2c
 8000770:	080072b4 	.word	0x080072b4

08000774 <_write>:
		;
}

int _write(int P_Flux, char *P_Message, int P_Taille) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef Etat;
	Etat = HAL_UART_Transmit(&huart2, (uint8_t*) P_Message, P_Taille,
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	b29a      	uxth	r2, r3
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <_write+0x38>)
 800078c:	f001 fd91 	bl	80022b2 <HAL_UART_Transmit>
 8000790:	4603      	mov	r3, r0
 8000792:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if (Etat == HAL_OK)
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <_write+0x2a>
		return P_Taille;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	e001      	b.n	80007a2 <_write+0x2e>
	else
		return -1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20004a84 	.word	0x20004a84

080007b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <MX_GPIO_Init+0xa8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a22      	ldr	r2, [pc, #136]	; (8000858 <MX_GPIO_Init+0xa8>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_GPIO_Init+0xa8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_GPIO_Init+0xa8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_GPIO_Init+0xa8>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_GPIO_Init+0xa8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_VERTE_GPIO_Port, LED_VERTE_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2120      	movs	r1, #32
 8000802:	4816      	ldr	r0, [pc, #88]	; (800085c <MX_GPIO_Init+0xac>)
 8000804:	f000 fd96 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOUTON_BLEU_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_GPIO_Init+0xb0>)
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOUTON_BLEU_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_GPIO_Init+0xb4>)
 800081e:	f000 fc17 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_VERTE_Pin;
 8000822:	2320      	movs	r3, #32
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_VERTE_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <MX_GPIO_Init+0xac>)
 800083a:	f000 fc09 	bl	8001050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	2028      	movs	r0, #40	; 0x28
 8000844:	f000 fbda 	bl	8000ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000848:	2028      	movs	r0, #40	; 0x28
 800084a:	f000 fbf3 	bl	8001034 <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40020000 	.word	0x40020000
 8000860:	10110000 	.word	0x10110000
 8000864:	40020800 	.word	0x40020800

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2234      	movs	r2, #52	; 0x34
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f005 fbc5 	bl	8006006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <SystemClock_Config+0xcc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a27      	ldr	r2, [pc, #156]	; (8000934 <SystemClock_Config+0xcc>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <SystemClock_Config+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SystemClock_Config+0xd0>)
 80008b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d8:	2308      	movs	r3, #8
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80008e4:	230a      	movs	r3, #10
 80008e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 ff8f 	bl	8001814 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008fc:	f000 f830 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2302      	movs	r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	2103      	movs	r1, #3
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fd55 	bl	80013cc <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000928:	f000 f81a 	bl	8000960 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3750      	adds	r7, #80	; 0x50
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094e:	f000 fa5b 	bl	8000e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40001000 	.word	0x40001000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000966:	e7fe      	b.n	8000966 <Error_Handler+0x6>

08000968 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_RNG_Init+0x20>)
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <MX_RNG_Init+0x24>)
 8000970:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_RNG_Init+0x20>)
 8000974:	f001 f990 	bl	8001c98 <HAL_RNG_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800097e:	f7ff ffef 	bl	8000960 <Error_Handler>
  }

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20004a34 	.word	0x20004a34
 800098c:	40080000 	.word	0x40080000

08000990 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_RNG_MspInit+0x48>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d115      	bne.n	80009ce <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_RNG_MspInit+0x4c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <HAL_RNG_MspInit+0x4c>)
 80009ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_RNG_MspInit+0x4c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2105      	movs	r1, #5
 80009c2:	2050      	movs	r0, #80	; 0x50
 80009c4:	f000 fb1a 	bl	8000ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 80009c8:	2050      	movs	r0, #80	; 0x50
 80009ca:	f000 fb33 	bl	8001034 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40080000 	.word	0x40080000
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <HAL_MspInit+0x54>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_MspInit+0x54>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_MspInit+0x54>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_MspInit+0x54>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f000 fae9 	bl	8000ffc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	2036      	movs	r0, #54	; 0x36
 8000a4e:	f000 fad5 	bl	8000ffc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a52:	2036      	movs	r0, #54	; 0x36
 8000a54:	f000 faee 	bl	8001034 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_InitTick+0xa4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <HAL_InitTick+0xa4>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0xa4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a74:	f107 0210 	add.w	r2, r7, #16
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fe96 	bl	80017b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a84:	f000 fe6c 	bl	8001760 <HAL_RCC_GetPCLK1Freq>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	0c9b      	lsrs	r3, r3, #18
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_InitTick+0xac>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <HAL_InitTick+0xb0>)
 8000aa0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_InitTick+0xac>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_InitTick+0xac>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_InitTick+0xac>)
 8000abe:	f001 f9b0 	bl	8001e22 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d104      	bne.n	8000ad2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aca:	f001 f9df 	bl	8001e8c <HAL_TIM_Base_Start_IT>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20004a44 	.word	0x20004a44
 8000ae8:	40001000 	.word	0x40001000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b20:	f000 fc3c 	bl	800139c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM6_DAC_IRQHandler+0x10>)
 8000b2e:	f001 f9d1 	bl	8001ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20004a44 	.word	0x20004a44

08000b3c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <RNG_IRQHandler+0x10>)
 8000b42:	f001 f902 	bl	8001d4a <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20004a34 	.word	0x20004a34

08000b50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e00a      	b.n	8000b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b62:	f3af 8000 	nop.w
 8000b66:	4601      	mov	r1, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	b2ca      	uxtb	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf0      	blt.n	8000b62 <_read+0x12>
	}

return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_isatty>:

int _isatty(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
	return 0;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f005 f9ba 	bl	8005f9c <__errno>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20008000 	.word	0x20008000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	20000118 	.word	0x20000118
 8000c5c:	20004b10 	.word	0x20004b10

08000c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <SystemInit+0x28>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <SystemInit+0x28>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SystemInit+0x28>)
 8000c76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <MX_USART2_UART_Init+0x50>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	f001 faa8 	bl	8002218 <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cce:	f7ff fe47 	bl	8000960 <Error_Handler>
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20004a84 	.word	0x20004a84
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12b      	bne.n	8000d5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_UART_MspInit+0x8c>)
 8000d56:	f000 f97b 	bl	8001050 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40004400 	.word	0x40004400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d76:	e003      	b.n	8000d80 <LoopCopyDataInit>

08000d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d7e:	3104      	adds	r1, #4

08000d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d88:	d3f6      	bcc.n	8000d78 <CopyDataInit>
  ldr  r2, =_sbss
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d8c:	e002      	b.n	8000d94 <LoopFillZerobss>

08000d8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d90:	f842 3b04 	str.w	r3, [r2], #4

08000d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d98:	d3f9      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d9a:	f7ff ff61 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f005 f903 	bl	8005fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fca5 	bl	80006f0 <main>
  bx  lr    
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000da8:	20008000 	.word	0x20008000
  ldr  r3, =_sidata
 8000dac:	0800739c 	.word	0x0800739c
  ldr  r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db4:	200000f8 	.word	0x200000f8
  ldr  r2, =_sbss
 8000db8:	200000f8 	.word	0x200000f8
  ldr  r3, = _ebss
 8000dbc:	20004b0c 	.word	0x20004b0c

08000dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f8fa 	bl	8000fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fe20 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fdf2 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	2000008c 	.word	0x2000008c
 8000e2c:	20004ac4 	.word	0x20004ac4

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20004ac4 	.word	0x20004ac4

08000e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff ffee 	bl	8000e30 <HAL_GetTick>
 8000e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e60:	d005      	beq.n	8000e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_Delay+0x40>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e6e:	bf00      	nop
 8000e70:	f7ff ffde 	bl	8000e30 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d8f7      	bhi.n	8000e70 <HAL_Delay+0x28>
  {
  }
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000008c 	.word	0x2000008c

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff4c 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100e:	f7ff ff61 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	6978      	ldr	r0, [r7, #20]
 800101a:	f7ff ffb1 	bl	8000f80 <NVIC_EncodePriority>
 800101e:	4602      	mov	r2, r0
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff80 	bl	8000f2c <__NVIC_SetPriority>
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff54 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e14d      	b.n	8001308 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 813c 	bne.w	8001302 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d00b      	beq.n	80010aa <HAL_GPIO_Init+0x5a>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109e:	2b11      	cmp	r3, #17
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d130      	bne.n	800110c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0xfc>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b12      	cmp	r3, #18
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 8096 	beq.w	8001302 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b50      	ldr	r3, [pc, #320]	; (800131c <HAL_GPIO_Init+0x2cc>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_GPIO_Init+0x2cc>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <HAL_GPIO_Init+0x2cc>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f2:	4a4b      	ldr	r2, [pc, #300]	; (8001320 <HAL_GPIO_Init+0x2d0>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a42      	ldr	r2, [pc, #264]	; (8001324 <HAL_GPIO_Init+0x2d4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x1ea>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a41      	ldr	r2, [pc, #260]	; (8001328 <HAL_GPIO_Init+0x2d8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x1e6>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a40      	ldr	r2, [pc, #256]	; (800132c <HAL_GPIO_Init+0x2dc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x1e2>
 800122e:	2302      	movs	r3, #2
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x1ec>
 8001232:	2307      	movs	r3, #7
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x1ec>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x1ec>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4934      	ldr	r1, [pc, #208]	; (8001320 <HAL_GPIO_Init+0x2d0>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <HAL_GPIO_Init+0x2e0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800127e:	4a2c      	ldr	r2, [pc, #176]	; (8001330 <HAL_GPIO_Init+0x2e0>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HAL_GPIO_Init+0x2e0>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <HAL_GPIO_Init+0x2e0>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_GPIO_Init+0x2e0>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_GPIO_Init+0x2e0>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_GPIO_Init+0x2e0>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_GPIO_Init+0x2e0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f aeae 	bls.w	800106c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	3724      	adds	r7, #36	; 0x24
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800
 8001320:	40013800 	.word	0x40013800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	401a      	ands	r2, r3
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	429a      	cmp	r2, r3
 800137e:	d104      	bne.n	800138a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	041a      	lsls	r2, r3, #16
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001388:	e002      	b.n	8001390 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f966 	bl	800068c <HAL_GPIO_EXTI_Callback>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0cc      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e0:	4b68      	ldr	r3, [pc, #416]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d90c      	bls.n	8001408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b65      	ldr	r3, [pc, #404]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d001      	beq.n	8001408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0b8      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001420:	4b59      	ldr	r3, [pc, #356]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a58      	ldr	r2, [pc, #352]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800142a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a52      	ldr	r2, [pc, #328]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001444:	4b50      	ldr	r3, [pc, #320]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	494d      	ldr	r1, [pc, #308]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	4313      	orrs	r3, r2
 8001454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d044      	beq.n	80014ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b47      	ldr	r3, [pc, #284]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d119      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e07f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d003      	beq.n	800148a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001486:	2b03      	cmp	r3, #3
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e06f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e067      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f023 0203 	bic.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4934      	ldr	r1, [pc, #208]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff fcb8 	bl	8000e30 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	e00a      	b.n	80014da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff fcb4 	bl	8000e30 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e04f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 020c 	and.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1eb      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d20c      	bcs.n	8001514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d001      	beq.n	8001514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e032      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4916      	ldr	r1, [pc, #88]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	4313      	orrs	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	490e      	ldr	r1, [pc, #56]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001552:	f000 f821 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8001556:	4601      	mov	r1, r0
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	fa21 f303 	lsr.w	r3, r1, r3
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1c8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fa60 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00
 8001588:	40023800 	.word	0x40023800
 800158c:	080072dc 	.word	0x080072dc
 8001590:	20000084 	.word	0x20000084
 8001594:	20000088 	.word	0x20000088

08001598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d007      	beq.n	80015ca <HAL_RCC_GetSysClockFreq+0x32>
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d008      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x38>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 80b4 	bne.w	800172c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c4:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80015c6:	60bb      	str	r3, [r7, #8]
       break;
 80015c8:	e0b3      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ca:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80015cc:	60bb      	str	r3, [r7, #8]
      break;
 80015ce:	e0b0      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d0:	4b5a      	ldr	r3, [pc, #360]	; (800173c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015da:	4b58      	ldr	r3, [pc, #352]	; (800173c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04a      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e6:	4b55      	ldr	r3, [pc, #340]	; (800173c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	099b      	lsrs	r3, r3, #6
 80015ec:	f04f 0400 	mov.w	r4, #0
 80015f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	ea03 0501 	and.w	r5, r3, r1
 80015fc:	ea04 0602 	and.w	r6, r4, r2
 8001600:	4629      	mov	r1, r5
 8001602:	4632      	mov	r2, r6
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	f04f 0400 	mov.w	r4, #0
 800160c:	0154      	lsls	r4, r2, #5
 800160e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001612:	014b      	lsls	r3, r1, #5
 8001614:	4619      	mov	r1, r3
 8001616:	4622      	mov	r2, r4
 8001618:	1b49      	subs	r1, r1, r5
 800161a:	eb62 0206 	sbc.w	r2, r2, r6
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	f04f 0400 	mov.w	r4, #0
 8001626:	0194      	lsls	r4, r2, #6
 8001628:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800162c:	018b      	lsls	r3, r1, #6
 800162e:	1a5b      	subs	r3, r3, r1
 8001630:	eb64 0402 	sbc.w	r4, r4, r2
 8001634:	f04f 0100 	mov.w	r1, #0
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	00e2      	lsls	r2, r4, #3
 800163e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001642:	00d9      	lsls	r1, r3, #3
 8001644:	460b      	mov	r3, r1
 8001646:	4614      	mov	r4, r2
 8001648:	195b      	adds	r3, r3, r5
 800164a:	eb44 0406 	adc.w	r4, r4, r6
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	0262      	lsls	r2, r4, #9
 8001658:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800165c:	0259      	lsls	r1, r3, #9
 800165e:	460b      	mov	r3, r1
 8001660:	4614      	mov	r4, r2
 8001662:	4618      	mov	r0, r3
 8001664:	4621      	mov	r1, r4
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f04f 0400 	mov.w	r4, #0
 800166c:	461a      	mov	r2, r3
 800166e:	4623      	mov	r3, r4
 8001670:	f7fe fe1e 	bl	80002b0 <__aeabi_uldivmod>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e049      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	f04f 0400 	mov.w	r4, #0
 8001686:	f240 11ff 	movw	r1, #511	; 0x1ff
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	ea03 0501 	and.w	r5, r3, r1
 8001692:	ea04 0602 	and.w	r6, r4, r2
 8001696:	4629      	mov	r1, r5
 8001698:	4632      	mov	r2, r6
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	f04f 0400 	mov.w	r4, #0
 80016a2:	0154      	lsls	r4, r2, #5
 80016a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016a8:	014b      	lsls	r3, r1, #5
 80016aa:	4619      	mov	r1, r3
 80016ac:	4622      	mov	r2, r4
 80016ae:	1b49      	subs	r1, r1, r5
 80016b0:	eb62 0206 	sbc.w	r2, r2, r6
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	f04f 0400 	mov.w	r4, #0
 80016bc:	0194      	lsls	r4, r2, #6
 80016be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016c2:	018b      	lsls	r3, r1, #6
 80016c4:	1a5b      	subs	r3, r3, r1
 80016c6:	eb64 0402 	sbc.w	r4, r4, r2
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	00e2      	lsls	r2, r4, #3
 80016d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016d8:	00d9      	lsls	r1, r3, #3
 80016da:	460b      	mov	r3, r1
 80016dc:	4614      	mov	r4, r2
 80016de:	195b      	adds	r3, r3, r5
 80016e0:	eb44 0406 	adc.w	r4, r4, r6
 80016e4:	f04f 0100 	mov.w	r1, #0
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	02a2      	lsls	r2, r4, #10
 80016ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016f2:	0299      	lsls	r1, r3, #10
 80016f4:	460b      	mov	r3, r1
 80016f6:	4614      	mov	r4, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	4621      	mov	r1, r4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f04f 0400 	mov.w	r4, #0
 8001702:	461a      	mov	r2, r3
 8001704:	4623      	mov	r3, r4
 8001706:	f7fe fdd3 	bl	80002b0 <__aeabi_uldivmod>
 800170a:	4603      	mov	r3, r0
 800170c:	460c      	mov	r4, r1
 800170e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	3301      	adds	r3, #1
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	60bb      	str	r3, [r7, #8]
      break;
 800172a:	e002      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800172e:	60bb      	str	r3, [r7, #8]
      break;
 8001730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001732:	68bb      	ldr	r3, [r7, #8]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	00f42400 	.word	0x00f42400
 8001744:	007a1200 	.word	0x007a1200

08001748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_RCC_GetHCLKFreq+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000084 	.word	0x20000084

08001760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001764:	f7ff fff0 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 8001768:	4601      	mov	r1, r0
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	0a9b      	lsrs	r3, r3, #10
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800
 8001784:	080072ec 	.word	0x080072ec

08001788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800178c:	f7ff ffdc 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 8001790:	4601      	mov	r1, r0
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	0b5b      	lsrs	r3, r3, #13
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	080072ec 	.word	0x080072ec

080017b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	220f      	movs	r2, #15
 80017be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_GetClockConfig+0x5c>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_RCC_GetClockConfig+0x5c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_RCC_GetClockConfig+0x5c>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_GetClockConfig+0x5c>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_RCC_GetClockConfig+0x60>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 020f 	and.w	r2, r3, #15
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	601a      	str	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40023c00 	.word	0x40023c00

08001814 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d075      	beq.n	8001918 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800182c:	4ba2      	ldr	r3, [pc, #648]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b04      	cmp	r3, #4
 8001836:	d00c      	beq.n	8001852 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001838:	4b9f      	ldr	r3, [pc, #636]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001840:	2b08      	cmp	r3, #8
 8001842:	d112      	bne.n	800186a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001844:	4b9c      	ldr	r3, [pc, #624]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001850:	d10b      	bne.n	800186a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	4b99      	ldr	r3, [pc, #612]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d05b      	beq.n	8001916 <HAL_RCC_OscConfig+0x102>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d157      	bne.n	8001916 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e20b      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x6e>
 8001874:	4b90      	ldr	r3, [pc, #576]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a8f      	ldr	r2, [pc, #572]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e01d      	b.n	80018be <HAL_RCC_OscConfig+0xaa>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x92>
 800188c:	4b8a      	ldr	r3, [pc, #552]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a89      	ldr	r2, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b87      	ldr	r3, [pc, #540]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a86      	ldr	r2, [pc, #536]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800189e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0xaa>
 80018a6:	4b84      	ldr	r3, [pc, #528]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a83      	ldr	r2, [pc, #524]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b81      	ldr	r3, [pc, #516]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a80      	ldr	r2, [pc, #512]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d013      	beq.n	80018ee <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff fab3 	bl	8000e30 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ce:	f7ff faaf 	bl	8000e30 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	; 0x64
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1d0      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e0:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0xba>
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7ff fa9f 	bl	8000e30 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f6:	f7ff fa9b 	bl	8000e30 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1bc      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001908:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0xe2>
 8001914:	e000      	b.n	8001918 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d063      	beq.n	80019ec <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001924:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00b      	beq.n	8001948 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001930:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001938:	2b08      	cmp	r3, #8
 800193a:	d11c      	bne.n	8001976 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193c:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d116      	bne.n	8001976 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_OscConfig+0x14c>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e190      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4952      	ldr	r1, [pc, #328]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001974:	e03a      	b.n	80019ec <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d020      	beq.n	80019c0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197e:	4b4f      	ldr	r3, [pc, #316]	; (8001abc <HAL_RCC_OscConfig+0x2a8>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fa54 	bl	8000e30 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff fa50 	bl	8000e30 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e171      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b46      	ldr	r3, [pc, #280]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	493f      	ldr	r1, [pc, #252]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
 80019be:	e015      	b.n	80019ec <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c0:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <HAL_RCC_OscConfig+0x2a8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff fa33 	bl	8000e30 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff fa2f 	bl	8000e30 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e150      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d030      	beq.n	8001a5a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d016      	beq.n	8001a2e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff fa13 	bl	8000e30 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fa0f 	bl	8000e30 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e130      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1fa>
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff f9fc 	bl	8000e30 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f9f8 	bl	8000e30 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e119      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 809f 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10f      	bne.n	8001a98 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_RCC_OscConfig+0x2b0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d120      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_RCC_OscConfig+0x2b0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <HAL_RCC_OscConfig+0x2b0>)
 8001aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f9be 	bl	8000e30 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	e010      	b.n	8001ada <HAL_RCC_OscConfig+0x2c6>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	42470000 	.word	0x42470000
 8001ac0:	42470e80 	.word	0x42470e80
 8001ac4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac8:	f7ff f9b2 	bl	8000e30 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e0d3      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <HAL_RCC_OscConfig+0x478>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d106      	bne.n	8001afc <HAL_RCC_OscConfig+0x2e8>
 8001aee:	4b68      	ldr	r3, [pc, #416]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a67      	ldr	r2, [pc, #412]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
 8001afa:	e01c      	b.n	8001b36 <HAL_RCC_OscConfig+0x322>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x30a>
 8001b04:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a61      	ldr	r2, [pc, #388]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a5e      	ldr	r2, [pc, #376]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	e00b      	b.n	8001b36 <HAL_RCC_OscConfig+0x322>
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a5b      	ldr	r2, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d015      	beq.n	8001b6a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff f977 	bl	8000e30 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7ff f973 	bl	8000e30 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e092      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ee      	beq.n	8001b46 <HAL_RCC_OscConfig+0x332>
 8001b68:	e014      	b.n	8001b94 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f961 	bl	8000e30 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff f95d 	bl	8000e30 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e07c      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b88:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ee      	bne.n	8001b72 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d105      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d068      	beq.n	8001c80 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d060      	beq.n	8001c7c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d145      	bne.n	8001c4e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <HAL_RCC_OscConfig+0x480>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f932 	bl	8000e30 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7ff f92e 	bl	8000e30 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e04f      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	071b      	lsls	r3, r3, #28
 8001c1a:	491d      	ldr	r1, [pc, #116]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_RCC_OscConfig+0x480>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f903 	bl	8000e30 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f8ff 	bl	8000e30 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e020      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x41a>
 8001c4c:	e018      	b.n	8001c80 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_RCC_OscConfig+0x480>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f8ec 	bl	8000e30 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f8e8 	bl	8000e30 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e009      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_RCC_OscConfig+0x47c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x448>
 8001c7a:	e001      	b.n	8001c80 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	40023800 	.word	0x40023800
 8001c94:	42470060 	.word	0x42470060

08001c98 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	795b      	ldrb	r3, [r3, #5]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fe68 	bl	8000990 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0204 	orr.w	r2, r2, #4
 8001cd4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_RNG_GenerateRandomNumber_IT>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber_IT(RNG_HandleTypeDef *hrng)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	791b      	ldrb	r3, [r3, #4]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_RNG_GenerateRandomNumber_IT+0x18>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e01c      	b.n	8001d3e <HAL_RNG_GenerateRandomNumber_IT+0x52>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	795b      	ldrb	r3, [r3, #5]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10b      	bne.n	8001d2c <HAL_RNG_GenerateRandomNumber_IT+0x40>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	715a      	strb	r2, [r3, #5]

    /* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */
    __HAL_RNG_ENABLE_IT(hrng);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0208 	orr.w	r2, r2, #8
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e007      	b.n	8001d3c <HAL_RNG_GenerateRandomNumber_IT+0x50>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hrng);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	711a      	strb	r2, [r3, #4]

    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2204      	movs	r2, #4
 8001d36:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d105      	bne.n	8001d70 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2210      	movs	r2, #16
 8001d68:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7a:	2b40      	cmp	r3, #64	; 0x40
 8001d7c:	d104      	bne.n	8001d88 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2208      	movs	r2, #8
 8001d82:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8001d84:	2301      	movs	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d10a      	bne.n	8001da4 <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2204      	movs	r2, #4
 8001d92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f83a 	bl	8001e0e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8001da2:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d11d      	bne.n	8001dee <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0208 	bic.w	r2, r2, #8
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	795b      	ldrb	r3, [r3, #5]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d00b      	beq.n	8001dee <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7fe fc6b 	bl	80006c4 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_RNG_ReadLastRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval random value
  */
uint32_t HAL_RNG_ReadLastRandomNumber(RNG_HandleTypeDef *hrng)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  return (hrng->RandomNumber);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e01d      	b.n	8001e70 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d106      	bne.n	8001e4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f815 	bl	8001e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f000 f967 	bl	8002134 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d007      	beq.n	8001ec6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d122      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d11b      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0202 	mvn.w	r2, #2
 8001f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8ee 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8e0 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8f1 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0204 	mvn.w	r2, #4
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c4 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8b6 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8c7 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0208 	mvn.w	r2, #8
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2204      	movs	r2, #4
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f89a 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f88c 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f89d 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0210 	mvn.w	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2208      	movs	r2, #8
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f870 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f862 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f873 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fc72 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b80      	cmp	r3, #128	; 0x80
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8c0 	bl	8002204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f838 	bl	8002120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f88a 	bl	80021f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <TIM_Base_SetConfig+0xac>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <TIM_Base_SetConfig+0x20>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <TIM_Base_SetConfig+0xb0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d108      	bne.n	8002166 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <TIM_Base_SetConfig+0xac>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00b      	beq.n	8002186 <TIM_Base_SetConfig+0x52>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <TIM_Base_SetConfig+0xb0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <TIM_Base_SetConfig+0x52>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <TIM_Base_SetConfig+0xb4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d003      	beq.n	8002186 <TIM_Base_SetConfig+0x52>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1a      	ldr	r2, [pc, #104]	; (80021ec <TIM_Base_SetConfig+0xb8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d108      	bne.n	8002198 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <TIM_Base_SetConfig+0xac>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d103      	bne.n	80021cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	615a      	str	r2, [r3, #20]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40014800 	.word	0x40014800

080021f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e03f      	b.n	80022aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fd4e 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2224      	movs	r2, #36	; 0x24
 8002248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800225a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f90b 	bl	8002478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b088      	sub	sp, #32
 80022b6:	af02      	add	r7, sp, #8
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	f040 8083 	bne.w	80023da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_UART_Transmit+0x2e>
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e07b      	b.n	80023dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Transmit+0x40>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e074      	b.n	80023dc <HAL_UART_Transmit+0x12a>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2221      	movs	r2, #33	; 0x21
 8002304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002308:	f7fe fd92 	bl	8000e30 <HAL_GetTick>
 800230c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002322:	e042      	b.n	80023aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233a:	d122      	bne.n	8002382 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2200      	movs	r2, #0
 8002344:	2180      	movs	r1, #128	; 0x80
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f84c 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e042      	b.n	80023dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002368:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3302      	adds	r3, #2
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	e017      	b.n	80023aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3301      	adds	r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	e013      	b.n	80023aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f829 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e01f      	b.n	80023dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	60ba      	str	r2, [r7, #8]
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1b7      	bne.n	8002324 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2200      	movs	r2, #0
 80023bc:	2140      	movs	r1, #64	; 0x40
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f810 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e006      	b.n	80023dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80023da:	2302      	movs	r3, #2
  }
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f4:	e02c      	b.n	8002450 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d028      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <UART_WaitOnFlagUntilTimeout+0x30>
 8002404:	f7fe fd14 	bl	8000e30 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	429a      	cmp	r2, r3
 8002412:	d21d      	bcs.n	8002450 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002422:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e00f      	b.n	8002470 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	429a      	cmp	r2, r3
 800246c:	d0c3      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80024ba:	f023 030c 	bic.w	r3, r3, #12
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	68f9      	ldr	r1, [r7, #12]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e6:	f040 818b 	bne.w	8002800 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4ac1      	ldr	r2, [pc, #772]	; (80027f4 <UART_SetConfig+0x37c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d005      	beq.n	8002500 <UART_SetConfig+0x88>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4abf      	ldr	r2, [pc, #764]	; (80027f8 <UART_SetConfig+0x380>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	f040 80bd 	bne.w	800267a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002500:	f7ff f942 	bl	8001788 <HAL_RCC_GetPCLK2Freq>
 8002504:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	461d      	mov	r5, r3
 800250a:	f04f 0600 	mov.w	r6, #0
 800250e:	46a8      	mov	r8, r5
 8002510:	46b1      	mov	r9, r6
 8002512:	eb18 0308 	adds.w	r3, r8, r8
 8002516:	eb49 0409 	adc.w	r4, r9, r9
 800251a:	4698      	mov	r8, r3
 800251c:	46a1      	mov	r9, r4
 800251e:	eb18 0805 	adds.w	r8, r8, r5
 8002522:	eb49 0906 	adc.w	r9, r9, r6
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002532:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002536:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800253a:	4688      	mov	r8, r1
 800253c:	4691      	mov	r9, r2
 800253e:	eb18 0005 	adds.w	r0, r8, r5
 8002542:	eb49 0106 	adc.w	r1, r9, r6
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	461d      	mov	r5, r3
 800254c:	f04f 0600 	mov.w	r6, #0
 8002550:	196b      	adds	r3, r5, r5
 8002552:	eb46 0406 	adc.w	r4, r6, r6
 8002556:	461a      	mov	r2, r3
 8002558:	4623      	mov	r3, r4
 800255a:	f7fd fea9 	bl	80002b0 <__aeabi_uldivmod>
 800255e:	4603      	mov	r3, r0
 8002560:	460c      	mov	r4, r1
 8002562:	461a      	mov	r2, r3
 8002564:	4ba5      	ldr	r3, [pc, #660]	; (80027fc <UART_SetConfig+0x384>)
 8002566:	fba3 2302 	umull	r2, r3, r3, r2
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	461d      	mov	r5, r3
 8002574:	f04f 0600 	mov.w	r6, #0
 8002578:	46a9      	mov	r9, r5
 800257a:	46b2      	mov	sl, r6
 800257c:	eb19 0309 	adds.w	r3, r9, r9
 8002580:	eb4a 040a 	adc.w	r4, sl, sl
 8002584:	4699      	mov	r9, r3
 8002586:	46a2      	mov	sl, r4
 8002588:	eb19 0905 	adds.w	r9, r9, r5
 800258c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800259c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025a4:	4689      	mov	r9, r1
 80025a6:	4692      	mov	sl, r2
 80025a8:	eb19 0005 	adds.w	r0, r9, r5
 80025ac:	eb4a 0106 	adc.w	r1, sl, r6
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	461d      	mov	r5, r3
 80025b6:	f04f 0600 	mov.w	r6, #0
 80025ba:	196b      	adds	r3, r5, r5
 80025bc:	eb46 0406 	adc.w	r4, r6, r6
 80025c0:	461a      	mov	r2, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	f7fd fe74 	bl	80002b0 <__aeabi_uldivmod>
 80025c8:	4603      	mov	r3, r0
 80025ca:	460c      	mov	r4, r1
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b8b      	ldr	r3, [pc, #556]	; (80027fc <UART_SetConfig+0x384>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	2164      	movs	r1, #100	; 0x64
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	3332      	adds	r3, #50	; 0x32
 80025e2:	4a86      	ldr	r2, [pc, #536]	; (80027fc <UART_SetConfig+0x384>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025f0:	4498      	add	r8, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	461d      	mov	r5, r3
 80025f6:	f04f 0600 	mov.w	r6, #0
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46b2      	mov	sl, r6
 80025fe:	eb19 0309 	adds.w	r3, r9, r9
 8002602:	eb4a 040a 	adc.w	r4, sl, sl
 8002606:	4699      	mov	r9, r3
 8002608:	46a2      	mov	sl, r4
 800260a:	eb19 0905 	adds.w	r9, r9, r5
 800260e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800261e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002622:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002626:	4689      	mov	r9, r1
 8002628:	4692      	mov	sl, r2
 800262a:	eb19 0005 	adds.w	r0, r9, r5
 800262e:	eb4a 0106 	adc.w	r1, sl, r6
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	461d      	mov	r5, r3
 8002638:	f04f 0600 	mov.w	r6, #0
 800263c:	196b      	adds	r3, r5, r5
 800263e:	eb46 0406 	adc.w	r4, r6, r6
 8002642:	461a      	mov	r2, r3
 8002644:	4623      	mov	r3, r4
 8002646:	f7fd fe33 	bl	80002b0 <__aeabi_uldivmod>
 800264a:	4603      	mov	r3, r0
 800264c:	460c      	mov	r4, r1
 800264e:	461a      	mov	r2, r3
 8002650:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <UART_SetConfig+0x384>)
 8002652:	fba3 1302 	umull	r1, r3, r3, r2
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2164      	movs	r1, #100	; 0x64
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	3332      	adds	r3, #50	; 0x32
 8002664:	4a65      	ldr	r2, [pc, #404]	; (80027fc <UART_SetConfig+0x384>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	f003 0207 	and.w	r2, r3, #7
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4442      	add	r2, r8
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e26f      	b.n	8002b5a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800267a:	f7ff f871 	bl	8001760 <HAL_RCC_GetPCLK1Freq>
 800267e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	461d      	mov	r5, r3
 8002684:	f04f 0600 	mov.w	r6, #0
 8002688:	46a8      	mov	r8, r5
 800268a:	46b1      	mov	r9, r6
 800268c:	eb18 0308 	adds.w	r3, r8, r8
 8002690:	eb49 0409 	adc.w	r4, r9, r9
 8002694:	4698      	mov	r8, r3
 8002696:	46a1      	mov	r9, r4
 8002698:	eb18 0805 	adds.w	r8, r8, r5
 800269c:	eb49 0906 	adc.w	r9, r9, r6
 80026a0:	f04f 0100 	mov.w	r1, #0
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026b4:	4688      	mov	r8, r1
 80026b6:	4691      	mov	r9, r2
 80026b8:	eb18 0005 	adds.w	r0, r8, r5
 80026bc:	eb49 0106 	adc.w	r1, r9, r6
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	461d      	mov	r5, r3
 80026c6:	f04f 0600 	mov.w	r6, #0
 80026ca:	196b      	adds	r3, r5, r5
 80026cc:	eb46 0406 	adc.w	r4, r6, r6
 80026d0:	461a      	mov	r2, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	f7fd fdec 	bl	80002b0 <__aeabi_uldivmod>
 80026d8:	4603      	mov	r3, r0
 80026da:	460c      	mov	r4, r1
 80026dc:	461a      	mov	r2, r3
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <UART_SetConfig+0x384>)
 80026e0:	fba3 2302 	umull	r2, r3, r3, r2
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	461d      	mov	r5, r3
 80026ee:	f04f 0600 	mov.w	r6, #0
 80026f2:	46a9      	mov	r9, r5
 80026f4:	46b2      	mov	sl, r6
 80026f6:	eb19 0309 	adds.w	r3, r9, r9
 80026fa:	eb4a 040a 	adc.w	r4, sl, sl
 80026fe:	4699      	mov	r9, r3
 8002700:	46a2      	mov	sl, r4
 8002702:	eb19 0905 	adds.w	r9, r9, r5
 8002706:	eb4a 0a06 	adc.w	sl, sl, r6
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002716:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800271a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800271e:	4689      	mov	r9, r1
 8002720:	4692      	mov	sl, r2
 8002722:	eb19 0005 	adds.w	r0, r9, r5
 8002726:	eb4a 0106 	adc.w	r1, sl, r6
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	461d      	mov	r5, r3
 8002730:	f04f 0600 	mov.w	r6, #0
 8002734:	196b      	adds	r3, r5, r5
 8002736:	eb46 0406 	adc.w	r4, r6, r6
 800273a:	461a      	mov	r2, r3
 800273c:	4623      	mov	r3, r4
 800273e:	f7fd fdb7 	bl	80002b0 <__aeabi_uldivmod>
 8002742:	4603      	mov	r3, r0
 8002744:	460c      	mov	r4, r1
 8002746:	461a      	mov	r2, r3
 8002748:	4b2c      	ldr	r3, [pc, #176]	; (80027fc <UART_SetConfig+0x384>)
 800274a:	fba3 1302 	umull	r1, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2164      	movs	r1, #100	; 0x64
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	3332      	adds	r3, #50	; 0x32
 800275c:	4a27      	ldr	r2, [pc, #156]	; (80027fc <UART_SetConfig+0x384>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800276a:	4498      	add	r8, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	461d      	mov	r5, r3
 8002770:	f04f 0600 	mov.w	r6, #0
 8002774:	46a9      	mov	r9, r5
 8002776:	46b2      	mov	sl, r6
 8002778:	eb19 0309 	adds.w	r3, r9, r9
 800277c:	eb4a 040a 	adc.w	r4, sl, sl
 8002780:	4699      	mov	r9, r3
 8002782:	46a2      	mov	sl, r4
 8002784:	eb19 0905 	adds.w	r9, r9, r5
 8002788:	eb4a 0a06 	adc.w	sl, sl, r6
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002798:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800279c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027a0:	4689      	mov	r9, r1
 80027a2:	4692      	mov	sl, r2
 80027a4:	eb19 0005 	adds.w	r0, r9, r5
 80027a8:	eb4a 0106 	adc.w	r1, sl, r6
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	461d      	mov	r5, r3
 80027b2:	f04f 0600 	mov.w	r6, #0
 80027b6:	196b      	adds	r3, r5, r5
 80027b8:	eb46 0406 	adc.w	r4, r6, r6
 80027bc:	461a      	mov	r2, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	f7fd fd76 	bl	80002b0 <__aeabi_uldivmod>
 80027c4:	4603      	mov	r3, r0
 80027c6:	460c      	mov	r4, r1
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <UART_SetConfig+0x384>)
 80027cc:	fba3 1302 	umull	r1, r3, r3, r2
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	2164      	movs	r1, #100	; 0x64
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	3332      	adds	r3, #50	; 0x32
 80027de:	4a07      	ldr	r2, [pc, #28]	; (80027fc <UART_SetConfig+0x384>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	f003 0207 	and.w	r2, r3, #7
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4442      	add	r2, r8
 80027f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80027f2:	e1b2      	b.n	8002b5a <UART_SetConfig+0x6e2>
 80027f4:	40011000 	.word	0x40011000
 80027f8:	40011400 	.word	0x40011400
 80027fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4ad7      	ldr	r2, [pc, #860]	; (8002b64 <UART_SetConfig+0x6ec>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d005      	beq.n	8002816 <UART_SetConfig+0x39e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4ad6      	ldr	r2, [pc, #856]	; (8002b68 <UART_SetConfig+0x6f0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	f040 80d1 	bne.w	80029b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002816:	f7fe ffb7 	bl	8001788 <HAL_RCC_GetPCLK2Freq>
 800281a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	469a      	mov	sl, r3
 8002820:	f04f 0b00 	mov.w	fp, #0
 8002824:	46d0      	mov	r8, sl
 8002826:	46d9      	mov	r9, fp
 8002828:	eb18 0308 	adds.w	r3, r8, r8
 800282c:	eb49 0409 	adc.w	r4, r9, r9
 8002830:	4698      	mov	r8, r3
 8002832:	46a1      	mov	r9, r4
 8002834:	eb18 080a 	adds.w	r8, r8, sl
 8002838:	eb49 090b 	adc.w	r9, r9, fp
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002848:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800284c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002850:	4688      	mov	r8, r1
 8002852:	4691      	mov	r9, r2
 8002854:	eb1a 0508 	adds.w	r5, sl, r8
 8002858:	eb4b 0609 	adc.w	r6, fp, r9
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	f04f 0400 	mov.w	r4, #0
 800286e:	0094      	lsls	r4, r2, #2
 8002870:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002874:	008b      	lsls	r3, r1, #2
 8002876:	461a      	mov	r2, r3
 8002878:	4623      	mov	r3, r4
 800287a:	4628      	mov	r0, r5
 800287c:	4631      	mov	r1, r6
 800287e:	f7fd fd17 	bl	80002b0 <__aeabi_uldivmod>
 8002882:	4603      	mov	r3, r0
 8002884:	460c      	mov	r4, r1
 8002886:	461a      	mov	r2, r3
 8002888:	4bb8      	ldr	r3, [pc, #736]	; (8002b6c <UART_SetConfig+0x6f4>)
 800288a:	fba3 2302 	umull	r2, r3, r3, r2
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	469b      	mov	fp, r3
 8002898:	f04f 0c00 	mov.w	ip, #0
 800289c:	46d9      	mov	r9, fp
 800289e:	46e2      	mov	sl, ip
 80028a0:	eb19 0309 	adds.w	r3, r9, r9
 80028a4:	eb4a 040a 	adc.w	r4, sl, sl
 80028a8:	4699      	mov	r9, r3
 80028aa:	46a2      	mov	sl, r4
 80028ac:	eb19 090b 	adds.w	r9, r9, fp
 80028b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028c8:	4689      	mov	r9, r1
 80028ca:	4692      	mov	sl, r2
 80028cc:	eb1b 0509 	adds.w	r5, fp, r9
 80028d0:	eb4c 060a 	adc.w	r6, ip, sl
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4619      	mov	r1, r3
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	f04f 0400 	mov.w	r4, #0
 80028e6:	0094      	lsls	r4, r2, #2
 80028e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028ec:	008b      	lsls	r3, r1, #2
 80028ee:	461a      	mov	r2, r3
 80028f0:	4623      	mov	r3, r4
 80028f2:	4628      	mov	r0, r5
 80028f4:	4631      	mov	r1, r6
 80028f6:	f7fd fcdb 	bl	80002b0 <__aeabi_uldivmod>
 80028fa:	4603      	mov	r3, r0
 80028fc:	460c      	mov	r4, r1
 80028fe:	461a      	mov	r2, r3
 8002900:	4b9a      	ldr	r3, [pc, #616]	; (8002b6c <UART_SetConfig+0x6f4>)
 8002902:	fba3 1302 	umull	r1, r3, r3, r2
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2164      	movs	r1, #100	; 0x64
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	3332      	adds	r3, #50	; 0x32
 8002914:	4a95      	ldr	r2, [pc, #596]	; (8002b6c <UART_SetConfig+0x6f4>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002920:	4498      	add	r8, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	469b      	mov	fp, r3
 8002926:	f04f 0c00 	mov.w	ip, #0
 800292a:	46d9      	mov	r9, fp
 800292c:	46e2      	mov	sl, ip
 800292e:	eb19 0309 	adds.w	r3, r9, r9
 8002932:	eb4a 040a 	adc.w	r4, sl, sl
 8002936:	4699      	mov	r9, r3
 8002938:	46a2      	mov	sl, r4
 800293a:	eb19 090b 	adds.w	r9, r9, fp
 800293e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800294e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002952:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002956:	4689      	mov	r9, r1
 8002958:	4692      	mov	sl, r2
 800295a:	eb1b 0509 	adds.w	r5, fp, r9
 800295e:	eb4c 060a 	adc.w	r6, ip, sl
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4619      	mov	r1, r3
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	f04f 0400 	mov.w	r4, #0
 8002974:	0094      	lsls	r4, r2, #2
 8002976:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800297a:	008b      	lsls	r3, r1, #2
 800297c:	461a      	mov	r2, r3
 800297e:	4623      	mov	r3, r4
 8002980:	4628      	mov	r0, r5
 8002982:	4631      	mov	r1, r6
 8002984:	f7fd fc94 	bl	80002b0 <__aeabi_uldivmod>
 8002988:	4603      	mov	r3, r0
 800298a:	460c      	mov	r4, r1
 800298c:	461a      	mov	r2, r3
 800298e:	4b77      	ldr	r3, [pc, #476]	; (8002b6c <UART_SetConfig+0x6f4>)
 8002990:	fba3 1302 	umull	r1, r3, r3, r2
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	2164      	movs	r1, #100	; 0x64
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	3332      	adds	r3, #50	; 0x32
 80029a2:	4a72      	ldr	r2, [pc, #456]	; (8002b6c <UART_SetConfig+0x6f4>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	f003 020f 	and.w	r2, r3, #15
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4442      	add	r2, r8
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	e0d0      	b.n	8002b5a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80029b8:	f7fe fed2 	bl	8001760 <HAL_RCC_GetPCLK1Freq>
 80029bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	469a      	mov	sl, r3
 80029c2:	f04f 0b00 	mov.w	fp, #0
 80029c6:	46d0      	mov	r8, sl
 80029c8:	46d9      	mov	r9, fp
 80029ca:	eb18 0308 	adds.w	r3, r8, r8
 80029ce:	eb49 0409 	adc.w	r4, r9, r9
 80029d2:	4698      	mov	r8, r3
 80029d4:	46a1      	mov	r9, r4
 80029d6:	eb18 080a 	adds.w	r8, r8, sl
 80029da:	eb49 090b 	adc.w	r9, r9, fp
 80029de:	f04f 0100 	mov.w	r1, #0
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029f2:	4688      	mov	r8, r1
 80029f4:	4691      	mov	r9, r2
 80029f6:	eb1a 0508 	adds.w	r5, sl, r8
 80029fa:	eb4b 0609 	adc.w	r6, fp, r9
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4619      	mov	r1, r3
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	f04f 0400 	mov.w	r4, #0
 8002a10:	0094      	lsls	r4, r2, #2
 8002a12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a16:	008b      	lsls	r3, r1, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4623      	mov	r3, r4
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	4631      	mov	r1, r6
 8002a20:	f7fd fc46 	bl	80002b0 <__aeabi_uldivmod>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <UART_SetConfig+0x6f4>)
 8002a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	469b      	mov	fp, r3
 8002a3a:	f04f 0c00 	mov.w	ip, #0
 8002a3e:	46d9      	mov	r9, fp
 8002a40:	46e2      	mov	sl, ip
 8002a42:	eb19 0309 	adds.w	r3, r9, r9
 8002a46:	eb4a 040a 	adc.w	r4, sl, sl
 8002a4a:	4699      	mov	r9, r3
 8002a4c:	46a2      	mov	sl, r4
 8002a4e:	eb19 090b 	adds.w	r9, r9, fp
 8002a52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a6a:	4689      	mov	r9, r1
 8002a6c:	4692      	mov	sl, r2
 8002a6e:	eb1b 0509 	adds.w	r5, fp, r9
 8002a72:	eb4c 060a 	adc.w	r6, ip, sl
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	f04f 0400 	mov.w	r4, #0
 8002a88:	0094      	lsls	r4, r2, #2
 8002a8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a8e:	008b      	lsls	r3, r1, #2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	4628      	mov	r0, r5
 8002a96:	4631      	mov	r1, r6
 8002a98:	f7fd fc0a 	bl	80002b0 <__aeabi_uldivmod>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <UART_SetConfig+0x6f4>)
 8002aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	2164      	movs	r1, #100	; 0x64
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	3332      	adds	r3, #50	; 0x32
 8002ab6:	4a2d      	ldr	r2, [pc, #180]	; (8002b6c <UART_SetConfig+0x6f4>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac2:	4498      	add	r8, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	469b      	mov	fp, r3
 8002ac8:	f04f 0c00 	mov.w	ip, #0
 8002acc:	46d9      	mov	r9, fp
 8002ace:	46e2      	mov	sl, ip
 8002ad0:	eb19 0309 	adds.w	r3, r9, r9
 8002ad4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ad8:	4699      	mov	r9, r3
 8002ada:	46a2      	mov	sl, r4
 8002adc:	eb19 090b 	adds.w	r9, r9, fp
 8002ae0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002af4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002af8:	4689      	mov	r9, r1
 8002afa:	4692      	mov	sl, r2
 8002afc:	eb1b 0509 	adds.w	r5, fp, r9
 8002b00:	eb4c 060a 	adc.w	r6, ip, sl
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	f04f 0400 	mov.w	r4, #0
 8002b16:	0094      	lsls	r4, r2, #2
 8002b18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b1c:	008b      	lsls	r3, r1, #2
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	4628      	mov	r0, r5
 8002b24:	4631      	mov	r1, r6
 8002b26:	f7fd fbc3 	bl	80002b0 <__aeabi_uldivmod>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <UART_SetConfig+0x6f4>)
 8002b32:	fba3 1302 	umull	r1, r3, r3, r2
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2164      	movs	r1, #100	; 0x64
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	3332      	adds	r3, #50	; 0x32
 8002b44:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <UART_SetConfig+0x6f4>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	f003 020f 	and.w	r2, r3, #15
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4442      	add	r2, r8
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	e7ff      	b.n	8002b5a <UART_SetConfig+0x6e2>
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b64:	40011000 	.word	0x40011000
 8002b68:	40011400 	.word	0x40011400
 8002b6c:	51eb851f 	.word	0x51eb851f

08002b70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b86:	f3ef 8305 	mrs	r3, IPSR
 8002b8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10f      	bne.n	8002bb2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b92:	f3ef 8310 	mrs	r3, PRIMASK
 8002b96:	607b      	str	r3, [r7, #4]
  return(result);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8002ba2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <osKernelInitialize+0x3a>
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <osKernelInitialize+0x64>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d103      	bne.n	8002bba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002bb2:	f06f 0305 	mvn.w	r3, #5
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e00c      	b.n	8002bd4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <osKernelInitialize+0x64>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <osKernelInitialize+0x64>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e002      	b.n	8002bd4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	2000011c 	.word	0x2000011c

08002be8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bee:	f3ef 8305 	mrs	r3, IPSR
 8002bf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10f      	bne.n	8002c1a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfe:	607b      	str	r3, [r7, #4]
  return(result);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c06:	f3ef 8311 	mrs	r3, BASEPRI
 8002c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <osKernelStart+0x3a>
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <osKernelStart+0x68>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d103      	bne.n	8002c22 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002c1a:	f06f 0305 	mvn.w	r3, #5
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e010      	b.n	8002c44 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <osKernelStart+0x68>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d109      	bne.n	8002c3e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c2a:	f7ff ffa1 	bl	8002b70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <osKernelStart+0x68>)
 8002c30:	2202      	movs	r2, #2
 8002c32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c34:	f001 fb5c 	bl	80042f0 <vTaskStartScheduler>
      stat = osOK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e002      	b.n	8002c44 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002c44:	68fb      	ldr	r3, [r7, #12]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000011c 	.word	0x2000011c

08002c54 <osKernelGetSysTimerCount>:

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

uint32_t osKernelGetSysTimerCount (void) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c60:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c66:	f3ef 8311 	mrs	r3, BASEPRI
 8002c6a:	607b      	str	r3, [r7, #4]
  return(result);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <osKernelGetSysTimerCount+0x22>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <osKernelGetSysTimerCount+0x24>
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c7a:	b672      	cpsid	i
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 8002c7c:	f001 fc46 	bl	800450c <xTaskGetTickCount>
 8002c80:	6138      	str	r0, [r7, #16]

  val = ticks * ( configCPU_CLOCK_HZ / configTICK_RATE_HZ );
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <osKernelGetSysTimerCount+0x54>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <osKernelGetSysTimerCount+0x58>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	099a      	lsrs	r2, r3, #6
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	60fb      	str	r3, [r7, #12]
  if (irqmask == 0U) {
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d100      	bne.n	8002c9e <osKernelGetSysTimerCount+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c9c:	b662      	cpsie	i
    __enable_irq();
  }

  return (val);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000084 	.word	0x20000084
 8002cac:	10624dd3 	.word	0x10624dd3

08002cb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b090      	sub	sp, #64	; 0x40
 8002cb4:	af04      	add	r7, sp, #16
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cc0:	f3ef 8305 	mrs	r3, IPSR
 8002cc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cc6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f040 808f 	bne.w	8002dec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cce:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d105      	bne.n	8002ce6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cda:	f3ef 8311 	mrs	r3, BASEPRI
 8002cde:	617b      	str	r3, [r7, #20]
  return(result);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <osThreadNew+0x3e>
 8002ce6:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <osThreadNew+0x148>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d07e      	beq.n	8002dec <osThreadNew+0x13c>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d07b      	beq.n	8002dec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002cf8:	2318      	movs	r3, #24
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d045      	beq.n	8002d98 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <osThreadNew+0x6a>
        name = attr->name;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <osThreadNew+0x90>
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	2b38      	cmp	r3, #56	; 0x38
 8002d32:	d805      	bhi.n	8002d40 <osThreadNew+0x90>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <osThreadNew+0x94>
        return (NULL);
 8002d40:	2300      	movs	r3, #0
 8002d42:	e054      	b.n	8002dee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00e      	beq.n	8002d7a <osThreadNew+0xca>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b5b      	cmp	r3, #91	; 0x5b
 8002d62:	d90a      	bls.n	8002d7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <osThreadNew+0xca>
        mem = 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	623b      	str	r3, [r7, #32]
 8002d78:	e010      	b.n	8002d9c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <osThreadNew+0xec>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <osThreadNew+0xec>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <osThreadNew+0xec>
          mem = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	e001      	b.n	8002d9c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d110      	bne.n	8002dc4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002daa:	9202      	str	r2, [sp, #8]
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f001 f8fb 	bl	8003fb4 <xTaskCreateStatic>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	e013      	b.n	8002dec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d110      	bne.n	8002dec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	f107 0310 	add.w	r3, r7, #16
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f001 f943 	bl	8004068 <xTaskCreate>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d001      	beq.n	8002dec <osThreadNew+0x13c>
          hTask = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002dec:	693b      	ldr	r3, [r7, #16]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3730      	adds	r7, #48	; 0x30
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2000011c 	.word	0x2000011c

08002dfc <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <osThreadFlagsSet+0x1a>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da03      	bge.n	8002e1e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8002e16:	f06f 0303 	mvn.w	r3, #3
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e046      	b.n	8002eac <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e24:	f3ef 8305 	mrs	r3, IPSR
 8002e28:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e2a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10f      	bne.n	8002e50 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e30:	f3ef 8310 	mrs	r3, PRIMASK
 8002e34:	617b      	str	r3, [r7, #20]
  return(result);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e3c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e40:	613b      	str	r3, [r7, #16]
  return(result);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d024      	beq.n	8002e92 <osThreadFlagsSet+0x96>
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <osThreadFlagsSet+0xbc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d120      	bne.n	8002e92 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8002e54:	f107 0308 	add.w	r3, r7, #8
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	6839      	ldr	r1, [r7, #0]
 8002e60:	69f8      	ldr	r0, [r7, #28]
 8002e62:	f002 f813 	bl	8004e8c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8002e66:	f107 020c 	add.w	r2, r7, #12
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	69f8      	ldr	r0, [r7, #28]
 8002e76:	f002 f809 	bl	8004e8c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d015      	beq.n	8002eac <osThreadFlagsSet+0xb0>
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <osThreadFlagsSet+0xc0>)
 8002e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	e00c      	b.n	8002eac <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8002e92:	2300      	movs	r3, #0
 8002e94:	2201      	movs	r2, #1
 8002e96:	6839      	ldr	r1, [r7, #0]
 8002e98:	69f8      	ldr	r0, [r7, #28]
 8002e9a:	f001 ff43 	bl	8004d24 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	69f8      	ldr	r0, [r7, #28]
 8002ea8:	f001 ff3c 	bl	8004d24 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8002eac:	68fb      	ldr	r3, [r7, #12]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000011c 	.word	0x2000011c
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08e      	sub	sp, #56	; 0x38
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ecc:	f3ef 8305 	mrs	r3, IPSR
 8002ed0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10f      	bne.n	8002ef8 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8002edc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ee8:	617b      	str	r3, [r7, #20]
  return(result);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <osThreadFlagsWait+0x40>
 8002ef0:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <osThreadFlagsWait+0x124>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d103      	bne.n	8002f00 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8002ef8:	f06f 0305 	mvn.w	r3, #5
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
 8002efe:	e06b      	b.n	8002fd8 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	da03      	bge.n	8002f0e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8002f06:	f06f 0303 	mvn.w	r3, #3
 8002f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f0c:	e064      	b.n	8002fd8 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <osThreadFlagsWait+0x5e>
      clear = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f1c:	e001      	b.n	8002f22 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8002f2a:	f001 faef 	bl	800450c <xTaskGetTickCount>
 8002f2e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8002f30:	f107 0210 	add.w	r2, r7, #16
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f001 fe99 	bl	8004c70 <xTaskNotifyWait>
 8002f3e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d137      	bne.n	8002fb6 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8002f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f52:	4313      	orrs	r3, r2
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00c      	beq.n	8002f7a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f64:	4013      	ands	r3, r2
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d032      	beq.n	8002fd2 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8002f72:	f06f 0302 	mvn.w	r3, #2
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8002f78:	e02e      	b.n	8002fd8 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d128      	bne.n	8002fd6 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8002f8a:	f06f 0302 	mvn.w	r3, #2
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8002f90:	e022      	b.n	8002fd8 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8002f92:	f001 fabb 	bl	800450c <xTaskGetTickCount>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8002f9e:	6a3a      	ldr	r2, [r7, #32]
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d902      	bls.n	8002fac <osThreadFlagsWait+0xec>
          tout  = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002faa:	e00e      	b.n	8002fca <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8002fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb4:	e009      	b.n	8002fca <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d103      	bne.n	8002fc4 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8002fbc:	f06f 0302 	mvn.w	r3, #2
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc2:	e002      	b.n	8002fca <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8002fc4:	f06f 0301 	mvn.w	r3, #1
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1af      	bne.n	8002f30 <osThreadFlagsWait+0x70>
 8002fd0:	e002      	b.n	8002fd8 <osThreadFlagsWait+0x118>
            break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <osThreadFlagsWait+0x118>
            break;
 8002fd6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3738      	adds	r7, #56	; 0x38
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000011c 	.word	0x2000011c

08002fe8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ff8:	f3ef 8305 	mrs	r3, IPSR
 8002ffc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ffe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003000:	2b00      	cmp	r3, #0
 8003002:	d170      	bne.n	80030e6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003004:	f3ef 8310 	mrs	r3, PRIMASK
 8003008:	617b      	str	r3, [r7, #20]
  return(result);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003010:	f3ef 8311 	mrs	r3, BASEPRI
 8003014:	613b      	str	r3, [r7, #16]
  return(result);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <osMessageQueueNew+0x3c>
 800301c:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <osMessageQueueNew+0x108>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d060      	beq.n	80030e6 <osMessageQueueNew+0xfe>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d05d      	beq.n	80030e6 <osMessageQueueNew+0xfe>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05a      	beq.n	80030e6 <osMessageQueueNew+0xfe>
    mem = -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d029      	beq.n	8003090 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d012      	beq.n	800306a <osMessageQueueNew+0x82>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b4f      	cmp	r3, #79	; 0x4f
 800304a:	d90e      	bls.n	800306a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	429a      	cmp	r2, r3
 8003062:	d302      	bcc.n	800306a <osMessageQueueNew+0x82>
        mem = 1;
 8003064:	2301      	movs	r3, #1
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	e014      	b.n	8003094 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d110      	bne.n	8003094 <osMessageQueueNew+0xac>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <osMessageQueueNew+0xac>
          mem = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	e001      	b.n	8003094 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10c      	bne.n	80030b4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	2300      	movs	r3, #0
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	460b      	mov	r3, r1
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fa58 	bl	8003560 <xQueueGenericCreateStatic>
 80030b0:	6278      	str	r0, [r7, #36]	; 0x24
 80030b2:	e008      	b.n	80030c6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d105      	bne.n	80030c6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80030ba:	2200      	movs	r2, #0
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fac1 	bl	8003646 <xQueueGenericCreate>
 80030c4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00c      	beq.n	80030e6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <osMessageQueueNew+0xf2>
        name = attr->name;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	e001      	b.n	80030de <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80030de:	69f9      	ldr	r1, [r7, #28]
 80030e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030e2:	f000 ff0b 	bl	8003efc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3728      	adds	r7, #40	; 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	2000011c 	.word	0x2000011c

080030f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800310c:	f3ef 8305 	mrs	r3, IPSR
 8003110:	61fb      	str	r3, [r7, #28]
  return(result);
 8003112:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10f      	bne.n	8003138 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003118:	f3ef 8310 	mrs	r3, PRIMASK
 800311c:	61bb      	str	r3, [r7, #24]
  return(result);
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003124:	f3ef 8311 	mrs	r3, BASEPRI
 8003128:	617b      	str	r3, [r7, #20]
  return(result);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02c      	beq.n	800318a <osMessageQueuePut+0x96>
 8003130:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <osMessageQueuePut+0xe0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d128      	bne.n	800318a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <osMessageQueuePut+0x56>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <osMessageQueuePut+0x56>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800314a:	f06f 0303 	mvn.w	r3, #3
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003150:	e039      	b.n	80031c6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003156:	f107 0210 	add.w	r2, r7, #16
 800315a:	2300      	movs	r3, #0
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6a38      	ldr	r0, [r7, #32]
 8003160:	f000 fbce 	bl	8003900 <xQueueGenericSendFromISR>
 8003164:	4603      	mov	r3, r0
 8003166:	2b01      	cmp	r3, #1
 8003168:	d003      	beq.n	8003172 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800316a:	f06f 0302 	mvn.w	r3, #2
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003170:	e029      	b.n	80031c6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d026      	beq.n	80031c6 <osMessageQueuePut+0xd2>
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <osMessageQueuePut+0xe4>)
 800317a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003188:	e01d      	b.n	80031c6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <osMessageQueuePut+0xa2>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003196:	f06f 0303 	mvn.w	r3, #3
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	e014      	b.n	80031c8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800319e:	2300      	movs	r3, #0
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	6a38      	ldr	r0, [r7, #32]
 80031a6:	f000 fab1 	bl	800370c <xQueueGenericSend>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d00b      	beq.n	80031c8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80031b6:	f06f 0301 	mvn.w	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	e004      	b.n	80031c8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80031be:	f06f 0302 	mvn.w	r3, #2
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	e000      	b.n	80031c8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80031c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	2000011c 	.word	0x2000011c
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031f2:	f3ef 8305 	mrs	r3, IPSR
 80031f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80031f8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10f      	bne.n	800321e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003202:	61bb      	str	r3, [r7, #24]
  return(result);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800320a:	f3ef 8311 	mrs	r3, BASEPRI
 800320e:	617b      	str	r3, [r7, #20]
  return(result);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d02c      	beq.n	8003270 <osMessageQueueGet+0x94>
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <osMessageQueueGet+0xdc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d128      	bne.n	8003270 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <osMessageQueueGet+0x54>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <osMessageQueueGet+0x54>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003230:	f06f 0303 	mvn.w	r3, #3
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003236:	e038      	b.n	80032aa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800323c:	f107 0310 	add.w	r3, r7, #16
 8003240:	461a      	mov	r2, r3
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	6a38      	ldr	r0, [r7, #32]
 8003246:	f000 fccb 	bl	8003be0 <xQueueReceiveFromISR>
 800324a:	4603      	mov	r3, r0
 800324c:	2b01      	cmp	r3, #1
 800324e:	d003      	beq.n	8003258 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003250:	f06f 0302 	mvn.w	r3, #2
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003256:	e028      	b.n	80032aa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d025      	beq.n	80032aa <osMessageQueueGet+0xce>
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <osMessageQueueGet+0xe0>)
 8003260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800326e:	e01c      	b.n	80032aa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <osMessageQueueGet+0xa0>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800327c:	f06f 0303 	mvn.w	r3, #3
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	e013      	b.n	80032ac <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	6a38      	ldr	r0, [r7, #32]
 800328a:	f000 fbcd 	bl	8003a28 <xQueueReceive>
 800328e:	4603      	mov	r3, r0
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00b      	beq.n	80032ac <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800329a:	f06f 0301 	mvn.w	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	e004      	b.n	80032ac <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80032a2:	f06f 0302 	mvn.w	r3, #2
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	e000      	b.n	80032ac <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80032aa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	2000011c 	.word	0x2000011c
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <vApplicationGetIdleTaskMemory+0x2c>)
 80032d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4a06      	ldr	r2, [pc, #24]	; (80032f0 <vApplicationGetIdleTaskMemory+0x30>)
 80032d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	601a      	str	r2, [r3, #0]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000120 	.word	0x20000120
 80032f0:	2000017c 	.word	0x2000017c

080032f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a07      	ldr	r2, [pc, #28]	; (8003320 <vApplicationGetTimerTaskMemory+0x2c>)
 8003304:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4a06      	ldr	r2, [pc, #24]	; (8003324 <vApplicationGetTimerTaskMemory+0x30>)
 800330a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003312:	601a      	str	r2, [r3, #0]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	2000037c 	.word	0x2000037c
 8003324:	200003d8 	.word	0x200003d8

08003328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f103 0208 	add.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f04f 32ff 	mov.w	r2, #4294967295
 8003340:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f103 0208 	add.w	r2, r3, #8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 0208 	add.w	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d103      	bne.n	80033ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e00c      	b.n	8003404 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3308      	adds	r3, #8
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e002      	b.n	80033f8 <vListInsert+0x2e>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d2f6      	bcs.n	80033f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6892      	ldr	r2, [r2, #8]
 8003452:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6852      	ldr	r2, [r2, #4]
 800345c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	d103      	bne.n	8003470 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	e7fe      	b.n	80034b6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80034b8:	f002 fa80 	bl	80059bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	68f9      	ldr	r1, [r7, #12]
 80034c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	441a      	add	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	3b01      	subs	r3, #1
 80034ea:	68f9      	ldr	r1, [r7, #12]
 80034ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	441a      	add	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	22ff      	movs	r2, #255	; 0xff
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	22ff      	movs	r2, #255	; 0xff
 8003504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01a      	beq.n	800354c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3310      	adds	r3, #16
 800351a:	4618      	mov	r0, r3
 800351c:	f001 f968 	bl	80047f0 <xTaskRemoveFromEventList>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d012      	beq.n	800354c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <xQueueGenericReset+0xcc>)
 8003528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	e009      	b.n	800354c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3310      	adds	r3, #16
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fef3 	bl	8003328 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3324      	adds	r3, #36	; 0x24
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff feee 	bl	8003328 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800354c:	f002 fa64 	bl	8005a18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003550:	2301      	movs	r3, #1
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08e      	sub	sp, #56	; 0x38
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <xQueueGenericCreateStatic+0x28>
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
 8003586:	e7fe      	b.n	8003586 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <xQueueGenericCreateStatic+0x42>
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
 80035a0:	e7fe      	b.n	80035a0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <xQueueGenericCreateStatic+0x4e>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <xQueueGenericCreateStatic+0x52>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <xQueueGenericCreateStatic+0x54>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <xQueueGenericCreateStatic+0x6c>
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	623b      	str	r3, [r7, #32]
 80035ca:	e7fe      	b.n	80035ca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <xQueueGenericCreateStatic+0x78>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <xQueueGenericCreateStatic+0x7c>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <xQueueGenericCreateStatic+0x7e>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <xQueueGenericCreateStatic+0x96>
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e7fe      	b.n	80035f4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035f6:	2350      	movs	r3, #80	; 0x50
 80035f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b50      	cmp	r3, #80	; 0x50
 80035fe:	d009      	beq.n	8003614 <xQueueGenericCreateStatic+0xb4>
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	e7fe      	b.n	8003612 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003614:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003628:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f844 	bl	80036c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800363e:	4618      	mov	r0, r3
 8003640:	3730      	adds	r7, #48	; 0x30
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003646:	b580      	push	{r7, lr}
 8003648:	b08a      	sub	sp, #40	; 0x28
 800364a:	af02      	add	r7, sp, #8
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	4613      	mov	r3, r2
 8003652:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <xQueueGenericCreate+0x28>
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e7fe      	b.n	800366c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e004      	b.n	8003684 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	3350      	adds	r3, #80	; 0x50
 8003688:	4618      	mov	r0, r3
 800368a:	f002 fab1 	bl	8005bf0 <pvPortMalloc>
 800368e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d011      	beq.n	80036ba <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	3350      	adds	r3, #80	; 0x50
 800369e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036a8:	79fa      	ldrb	r2, [r7, #7]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f805 	bl	80036c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036ba:	69bb      	ldr	r3, [r7, #24]
	}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d103      	bne.n	80036e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e002      	b.n	80036e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036f2:	2101      	movs	r1, #1
 80036f4:	69b8      	ldr	r0, [r7, #24]
 80036f6:	f7ff fecb 	bl	8003490 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08e      	sub	sp, #56	; 0x38
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800371a:	2300      	movs	r3, #0
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <xQueueGenericSend+0x30>
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
 800373a:	e7fe      	b.n	800373a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <xQueueGenericSend+0x3e>
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <xQueueGenericSend+0x42>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <xQueueGenericSend+0x44>
 800374e:	2300      	movs	r3, #0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <xQueueGenericSend+0x5c>
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
 8003766:	e7fe      	b.n	8003766 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d103      	bne.n	8003776 <xQueueGenericSend+0x6a>
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <xQueueGenericSend+0x6e>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <xQueueGenericSend+0x70>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <xQueueGenericSend+0x88>
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	e7fe      	b.n	8003792 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003794:	f001 f9e2 	bl	8004b5c <xTaskGetSchedulerState>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <xQueueGenericSend+0x98>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <xQueueGenericSend+0x9c>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <xQueueGenericSend+0x9e>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <xQueueGenericSend+0xb6>
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	e7fe      	b.n	80037c0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037c2:	f002 f8fb 	bl	80059bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <xQueueGenericSend+0xcc>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d129      	bne.n	800382c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037de:	f000 fa7c 	bl	8003cda <prvCopyDataToQueue>
 80037e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d010      	beq.n	800380e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	3324      	adds	r3, #36	; 0x24
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fffd 	bl	80047f0 <xTaskRemoveFromEventList>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037fc:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <xQueueGenericSend+0x1f0>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	e00a      	b.n	8003824 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003814:	4b39      	ldr	r3, [pc, #228]	; (80038fc <xQueueGenericSend+0x1f0>)
 8003816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003824:	f002 f8f8 	bl	8005a18 <vPortExitCritical>
				return pdPASS;
 8003828:	2301      	movs	r3, #1
 800382a:	e063      	b.n	80038f4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003832:	f002 f8f1 	bl	8005a18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003836:	2300      	movs	r3, #0
 8003838:	e05c      	b.n	80038f4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800383a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f835 	bl	80048b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800384a:	2301      	movs	r3, #1
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800384e:	f002 f8e3 	bl	8005a18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003852:	f000 fdb1 	bl	80043b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003856:	f002 f8b1 	bl	80059bc <vPortEnterCritical>
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003860:	b25b      	sxtb	r3, r3
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d103      	bne.n	8003870 <xQueueGenericSend+0x164>
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003876:	b25b      	sxtb	r3, r3
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d103      	bne.n	8003886 <xQueueGenericSend+0x17a>
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003886:	f002 f8c7 	bl	8005a18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800388a:	1d3a      	adds	r2, r7, #4
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f001 f824 	bl	80048e0 <xTaskCheckForTimeOut>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d124      	bne.n	80038e8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800389e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038a0:	f000 fb13 	bl	8003eca <prvIsQueueFull>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d018      	beq.n	80038dc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	3310      	adds	r3, #16
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 ff4e 	bl	8004754 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ba:	f000 fa9e 	bl	8003dfa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038be:	f000 fd89 	bl	80043d4 <xTaskResumeAll>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f af7c 	bne.w	80037c2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <xQueueGenericSend+0x1f0>)
 80038cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	e772      	b.n	80037c2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038de:	f000 fa8c 	bl	8003dfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038e2:	f000 fd77 	bl	80043d4 <xTaskResumeAll>
 80038e6:	e76c      	b.n	80037c2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ea:	f000 fa86 	bl	8003dfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ee:	f000 fd71 	bl	80043d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3738      	adds	r7, #56	; 0x38
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08e      	sub	sp, #56	; 0x38
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <xQueueGenericSendFromISR+0x2c>
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
 800392a:	e7fe      	b.n	800392a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <xQueueGenericSendFromISR+0x3a>
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <xQueueGenericSendFromISR+0x3e>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <xQueueGenericSendFromISR+0x40>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <xQueueGenericSendFromISR+0x58>
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	e7fe      	b.n	8003956 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d103      	bne.n	8003966 <xQueueGenericSendFromISR+0x66>
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <xQueueGenericSendFromISR+0x6a>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <xQueueGenericSendFromISR+0x6c>
 800396a:	2300      	movs	r3, #0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <xQueueGenericSendFromISR+0x84>
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e7fe      	b.n	8003982 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003984:	f002 f8f6 	bl	8005b74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003988:	f3ef 8211 	mrs	r2, BASEPRI
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	61ba      	str	r2, [r7, #24]
 800399e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d302      	bcc.n	80039b6 <xQueueGenericSendFromISR+0xb6>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d12c      	bne.n	8003a10 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039c6:	f000 f988 	bl	8003cda <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d112      	bne.n	80039fa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d016      	beq.n	8003a0a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 ff05 	bl	80047f0 <xTaskRemoveFromEventList>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00e      	beq.n	8003a0a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e007      	b.n	8003a0a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039fe:	3301      	adds	r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	b25a      	sxtb	r2, r3
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003a0e:	e001      	b.n	8003a14 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3738      	adds	r7, #56	; 0x38
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <xQueueReceive+0x2e>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	e7fe      	b.n	8003a54 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <xQueueReceive+0x3c>
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <xQueueReceive+0x40>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <xQueueReceive+0x42>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <xQueueReceive+0x5a>
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e7fe      	b.n	8003a80 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a82:	f001 f86b 	bl	8004b5c <xTaskGetSchedulerState>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <xQueueReceive+0x6a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <xQueueReceive+0x6e>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <xQueueReceive+0x70>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <xQueueReceive+0x88>
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e7fe      	b.n	8003aae <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab0:	f001 ff84 	bl	80059bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01f      	beq.n	8003b00 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac4:	f000 f973 	bl	8003dae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	1e5a      	subs	r2, r3, #1
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00f      	beq.n	8003af8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	3310      	adds	r3, #16
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fe87 	bl	80047f0 <xTaskRemoveFromEventList>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ae8:	4b3c      	ldr	r3, [pc, #240]	; (8003bdc <xQueueReceive+0x1b4>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003af8:	f001 ff8e 	bl	8005a18 <vPortExitCritical>
				return pdPASS;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e069      	b.n	8003bd4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b06:	f001 ff87 	bl	8005a18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e062      	b.n	8003bd4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b14:	f107 0310 	add.w	r3, r7, #16
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fecb 	bl	80048b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b22:	f001 ff79 	bl	8005a18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b26:	f000 fc47 	bl	80043b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b2a:	f001 ff47 	bl	80059bc <vPortEnterCritical>
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d103      	bne.n	8003b44 <xQueueReceive+0x11c>
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <xQueueReceive+0x132>
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b5a:	f001 ff5d 	bl	8005a18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b5e:	1d3a      	adds	r2, r7, #4
 8003b60:	f107 0310 	add.w	r3, r7, #16
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 feba 	bl	80048e0 <xTaskCheckForTimeOut>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d123      	bne.n	8003bba <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b74:	f000 f993 	bl	8003e9e <prvIsQueueEmpty>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d017      	beq.n	8003bae <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	3324      	adds	r3, #36	; 0x24
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fde4 	bl	8004754 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8e:	f000 f934 	bl	8003dfa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b92:	f000 fc1f 	bl	80043d4 <xTaskResumeAll>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d189      	bne.n	8003ab0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <xQueueReceive+0x1b4>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	e780      	b.n	8003ab0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb0:	f000 f923 	bl	8003dfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bb4:	f000 fc0e 	bl	80043d4 <xTaskResumeAll>
 8003bb8:	e77a      	b.n	8003ab0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bbc:	f000 f91d 	bl	8003dfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc0:	f000 fc08 	bl	80043d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc6:	f000 f96a 	bl	8003e9e <prvIsQueueEmpty>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f43f af6f 	beq.w	8003ab0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bd2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3730      	adds	r7, #48	; 0x30
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08e      	sub	sp, #56	; 0x38
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <xQueueReceiveFromISR+0x2a>
 8003bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	e7fe      	b.n	8003c08 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d103      	bne.n	8003c18 <xQueueReceiveFromISR+0x38>
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <xQueueReceiveFromISR+0x3c>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <xQueueReceiveFromISR+0x3e>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <xQueueReceiveFromISR+0x56>
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e7fe      	b.n	8003c34 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c36:	f001 ff9d 	bl	8005b74 <vPortValidateInterruptPriority>
	__asm volatile
 8003c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	61ba      	str	r2, [r7, #24]
 8003c50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02f      	beq.n	8003cc2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c70:	f000 f89d 	bl	8003dae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	1e5a      	subs	r2, r3, #1
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003c7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d112      	bne.n	8003cac <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	3310      	adds	r3, #16
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fdac 	bl	80047f0 <xTaskRemoveFromEventList>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00e      	beq.n	8003cbc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e007      	b.n	8003cbc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b25a      	sxtb	r2, r3
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc0:	e001      	b.n	8003cc6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3738      	adds	r7, #56	; 0x38
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d14d      	bne.n	8003d9c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 ff47 	bl	8004b98 <xTaskPriorityDisinherit>
 8003d0a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
 8003d12:	e043      	b.n	8003d9c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d119      	bne.n	8003d4e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6858      	ldr	r0, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	461a      	mov	r2, r3
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	f002 f963 	bl	8005ff0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	441a      	add	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d32b      	bcc.n	8003d9c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	e026      	b.n	8003d9c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	68d8      	ldr	r0, [r3, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	461a      	mov	r2, r3
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	f002 f949 	bl	8005ff0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	425b      	negs	r3, r3
 8003d68:	441a      	add	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d207      	bcs.n	8003d8a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	425b      	negs	r3, r3
 8003d84:	441a      	add	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d105      	bne.n	8003d9c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003da4:	697b      	ldr	r3, [r7, #20]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d018      	beq.n	8003df2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	441a      	add	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d303      	bcc.n	8003de2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68d9      	ldr	r1, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	461a      	mov	r2, r3
 8003dec:	6838      	ldr	r0, [r7, #0]
 8003dee:	f002 f8ff 	bl	8005ff0 <memcpy>
	}
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e02:	f001 fddb 	bl	80059bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e0c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e0e:	e011      	b.n	8003e34 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d012      	beq.n	8003e3e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3324      	adds	r3, #36	; 0x24
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fce7 	bl	80047f0 <xTaskRemoveFromEventList>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e28:	f000 fdba 	bl	80049a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	dce9      	bgt.n	8003e10 <prvUnlockQueue+0x16>
 8003e3c:	e000      	b.n	8003e40 <prvUnlockQueue+0x46>
					break;
 8003e3e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	22ff      	movs	r2, #255	; 0xff
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e48:	f001 fde6 	bl	8005a18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e4c:	f001 fdb6 	bl	80059bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e56:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e58:	e011      	b.n	8003e7e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d012      	beq.n	8003e88 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3310      	adds	r3, #16
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fcc2 	bl	80047f0 <xTaskRemoveFromEventList>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e72:	f000 fd95 	bl	80049a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e76:	7bbb      	ldrb	r3, [r7, #14]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	dce9      	bgt.n	8003e5a <prvUnlockQueue+0x60>
 8003e86:	e000      	b.n	8003e8a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	22ff      	movs	r2, #255	; 0xff
 8003e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e92:	f001 fdc1 	bl	8005a18 <vPortExitCritical>
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ea6:	f001 fd89 	bl	80059bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e001      	b.n	8003ebc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ebc:	f001 fdac 	bl	8005a18 <vPortExitCritical>

	return xReturn;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ed2:	f001 fd73 	bl	80059bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d102      	bne.n	8003ee8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e001      	b.n	8003eec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eec:	f001 fd94 	bl	8005a18 <vPortExitCritical>

	return xReturn;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	e014      	b.n	8003f36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f0c:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <vQueueAddToRegistry+0x4c>)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f18:	490b      	ldr	r1, [pc, #44]	; (8003f48 <vQueueAddToRegistry+0x4c>)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <vQueueAddToRegistry+0x4c>)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4413      	add	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f2e:	e005      	b.n	8003f3c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b07      	cmp	r3, #7
 8003f3a:	d9e7      	bls.n	8003f0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	20004ac8 	.word	0x20004ac8

08003f4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f5c:	f001 fd2e 	bl	80059bc <vPortEnterCritical>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f66:	b25b      	sxtb	r3, r3
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d103      	bne.n	8003f76 <vQueueWaitForMessageRestricted+0x2a>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f7c:	b25b      	sxtb	r3, r3
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d103      	bne.n	8003f8c <vQueueWaitForMessageRestricted+0x40>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f8c:	f001 fd44 	bl	8005a18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3324      	adds	r3, #36	; 0x24
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fbfb 	bl	800479c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003fa6:	6978      	ldr	r0, [r7, #20]
 8003fa8:	f7ff ff27 	bl	8003dfa <prvUnlockQueue>
	}
 8003fac:	bf00      	nop
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08e      	sub	sp, #56	; 0x38
 8003fb8:	af04      	add	r7, sp, #16
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <xTaskCreateStatic+0x28>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	623b      	str	r3, [r7, #32]
 8003fda:	e7fe      	b.n	8003fda <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <xTaskCreateStatic+0x42>
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	e7fe      	b.n	8003ff4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ff6:	235c      	movs	r3, #92	; 0x5c
 8003ff8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8003ffe:	d009      	beq.n	8004014 <xTaskCreateStatic+0x60>
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e7fe      	b.n	8004012 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004014:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01e      	beq.n	800405a <xTaskCreateStatic+0xa6>
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01b      	beq.n	800405a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800402a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004034:	2300      	movs	r3, #0
 8004036:	9303      	str	r3, [sp, #12]
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	9302      	str	r3, [sp, #8]
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f850 	bl	80040f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004054:	f000 f8dc 	bl	8004210 <prvAddNewTaskToReadyList>
 8004058:	e001      	b.n	800405e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800405e:	697b      	ldr	r3, [r7, #20]
	}
 8004060:	4618      	mov	r0, r3
 8004062:	3728      	adds	r7, #40	; 0x28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08c      	sub	sp, #48	; 0x30
 800406c:	af04      	add	r7, sp, #16
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fdb7 	bl	8005bf0 <pvPortMalloc>
 8004082:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00e      	beq.n	80040a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800408a:	205c      	movs	r0, #92	; 0x5c
 800408c:	f001 fdb0 	bl	8005bf0 <pvPortMalloc>
 8004090:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
 800409e:	e005      	b.n	80040ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040a0:	6978      	ldr	r0, [r7, #20]
 80040a2:	f001 fe67 	bl	8005d74 <vPortFree>
 80040a6:	e001      	b.n	80040ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d017      	beq.n	80040e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	2300      	movs	r3, #0
 80040be:	9303      	str	r3, [sp, #12]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f80e 	bl	80040f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040d6:	69f8      	ldr	r0, [r7, #28]
 80040d8:	f000 f89a 	bl	8004210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040dc:	2301      	movs	r3, #1
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	e002      	b.n	80040e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295
 80040e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040e8:	69bb      	ldr	r3, [r7, #24]
	}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b088      	sub	sp, #32
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	461a      	mov	r2, r3
 800410a:	21a5      	movs	r1, #165	; 0xa5
 800410c:	f001 ff7b 	bl	8006006 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800411a:	3b01      	subs	r3, #1
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	f023 0307 	bic.w	r3, r3, #7
 8004128:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <prvInitialiseNewTask+0x56>
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e7fe      	b.n	8004146 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01f      	beq.n	800418e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e012      	b.n	800417a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	7819      	ldrb	r1, [r3, #0]
 800415c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	3334      	adds	r3, #52	; 0x34
 8004164:	460a      	mov	r2, r1
 8004166:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d006      	beq.n	8004182 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	2b0f      	cmp	r3, #15
 800417e:	d9e9      	bls.n	8004154 <prvInitialiseNewTask+0x62>
 8004180:	e000      	b.n	8004184 <prvInitialiseNewTask+0x92>
			{
				break;
 8004182:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800418c:	e003      	b.n	8004196 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b37      	cmp	r3, #55	; 0x37
 800419a:	d901      	bls.n	80041a0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800419c:	2337      	movs	r3, #55	; 0x37
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	2200      	movs	r2, #0
 80041b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	3304      	adds	r3, #4
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff f8d6 	bl	8003368 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	3318      	adds	r3, #24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff f8d1 	bl	8003368 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	2200      	movs	r2, #0
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68f9      	ldr	r1, [r7, #12]
 80041ee:	69b8      	ldr	r0, [r7, #24]
 80041f0:	f001 fabe 	bl	8005770 <pxPortInitialiseStack>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004206:	bf00      	nop
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004218:	f001 fbd0 	bl	80059bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800421c:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <prvAddNewTaskToReadyList+0xc4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <prvAddNewTaskToReadyList+0xc4>)
 8004224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004226:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <prvAddNewTaskToReadyList+0xc8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800422e:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <prvAddNewTaskToReadyList+0xc8>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <prvAddNewTaskToReadyList+0xc4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d110      	bne.n	800425e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800423c:	f000 fbd4 	bl	80049e8 <prvInitialiseTaskLists>
 8004240:	e00d      	b.n	800425e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004242:	4b26      	ldr	r3, [pc, #152]	; (80042dc <prvAddNewTaskToReadyList+0xcc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800424a:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <prvAddNewTaskToReadyList+0xc8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	429a      	cmp	r2, r3
 8004256:	d802      	bhi.n	800425e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004258:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <prvAddNewTaskToReadyList+0xc8>)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <prvAddNewTaskToReadyList+0xd0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <prvAddNewTaskToReadyList+0xd0>)
 8004266:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <prvAddNewTaskToReadyList+0xd0>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <prvAddNewTaskToReadyList+0xd4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d903      	bls.n	8004284 <prvAddNewTaskToReadyList+0x74>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <prvAddNewTaskToReadyList+0xd4>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <prvAddNewTaskToReadyList+0xd8>)
 8004292:	441a      	add	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7ff f871 	bl	8003382 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042a0:	f001 fbba 	bl	8005a18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042a4:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <prvAddNewTaskToReadyList+0xcc>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00e      	beq.n	80042ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvAddNewTaskToReadyList+0xc8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d207      	bcs.n	80042ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <prvAddNewTaskToReadyList+0xdc>)
 80042bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000cac 	.word	0x20000cac
 80042d8:	200007d8 	.word	0x200007d8
 80042dc:	20000cb8 	.word	0x20000cb8
 80042e0:	20000cc8 	.word	0x20000cc8
 80042e4:	20000cb4 	.word	0x20000cb4
 80042e8:	200007dc 	.word	0x200007dc
 80042ec:	e000ed04 	.word	0xe000ed04

080042f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042fe:	463a      	mov	r2, r7
 8004300:	1d39      	adds	r1, r7, #4
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe ffda 	bl	80032c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	9202      	str	r2, [sp, #8]
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	2300      	movs	r3, #0
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	2300      	movs	r3, #0
 800431c:	460a      	mov	r2, r1
 800431e:	4920      	ldr	r1, [pc, #128]	; (80043a0 <vTaskStartScheduler+0xb0>)
 8004320:	4820      	ldr	r0, [pc, #128]	; (80043a4 <vTaskStartScheduler+0xb4>)
 8004322:	f7ff fe47 	bl	8003fb4 <xTaskCreateStatic>
 8004326:	4602      	mov	r2, r0
 8004328:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <vTaskStartScheduler+0xb8>)
 800432a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800432c:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <vTaskStartScheduler+0xb8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004334:	2301      	movs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e001      	b.n	800433e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d102      	bne.n	800434a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004344:	f000 fece 	bl	80050e4 <xTimerCreateTimerTask>
 8004348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d115      	bne.n	800437c <vTaskStartScheduler+0x8c>
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004362:	4b12      	ldr	r3, [pc, #72]	; (80043ac <vTaskStartScheduler+0xbc>)
 8004364:	f04f 32ff 	mov.w	r2, #4294967295
 8004368:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <vTaskStartScheduler+0xc0>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <vTaskStartScheduler+0xc4>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004376:	f001 fa83 	bl	8005880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800437a:	e00d      	b.n	8004398 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d109      	bne.n	8004398 <vTaskStartScheduler+0xa8>
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e7fe      	b.n	8004396 <vTaskStartScheduler+0xa6>
}
 8004398:	bf00      	nop
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	080072c4 	.word	0x080072c4
 80043a4:	080049b9 	.word	0x080049b9
 80043a8:	20000cd0 	.word	0x20000cd0
 80043ac:	20000ccc 	.word	0x20000ccc
 80043b0:	20000cb8 	.word	0x20000cb8
 80043b4:	20000cb0 	.word	0x20000cb0

080043b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <vTaskSuspendAll+0x18>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3301      	adds	r3, #1
 80043c2:	4a03      	ldr	r2, [pc, #12]	; (80043d0 <vTaskSuspendAll+0x18>)
 80043c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000cd4 	.word	0x20000cd4

080043d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <xTaskResumeAll+0x114>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <xTaskResumeAll+0x2a>
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	e7fe      	b.n	80043fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043fe:	f001 fadd 	bl	80059bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004402:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <xTaskResumeAll+0x114>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3b01      	subs	r3, #1
 8004408:	4a37      	ldr	r2, [pc, #220]	; (80044e8 <xTaskResumeAll+0x114>)
 800440a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <xTaskResumeAll+0x114>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d162      	bne.n	80044da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004414:	4b35      	ldr	r3, [pc, #212]	; (80044ec <xTaskResumeAll+0x118>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05e      	beq.n	80044da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800441c:	e02f      	b.n	800447e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800441e:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <xTaskResumeAll+0x11c>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3318      	adds	r3, #24
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff f806 	bl	800343c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff f801 	bl	800343c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <xTaskResumeAll+0x120>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d903      	bls.n	800444e <xTaskResumeAll+0x7a>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	4a2a      	ldr	r2, [pc, #168]	; (80044f4 <xTaskResumeAll+0x120>)
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <xTaskResumeAll+0x124>)
 800445c:	441a      	add	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f7fe ff8c 	bl	8003382 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	4b23      	ldr	r3, [pc, #140]	; (80044fc <xTaskResumeAll+0x128>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004478:	4b21      	ldr	r3, [pc, #132]	; (8004500 <xTaskResumeAll+0x12c>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800447e:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <xTaskResumeAll+0x11c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1cb      	bne.n	800441e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800448c:	f000 fb46 	bl	8004b1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <xTaskResumeAll+0x130>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d010      	beq.n	80044be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800449c:	f000 f846 	bl	800452c <xTaskIncrementTick>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044a6:	4b16      	ldr	r3, [pc, #88]	; (8004500 <xTaskResumeAll+0x12c>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f1      	bne.n	800449c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <xTaskResumeAll+0x130>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044be:	4b10      	ldr	r3, [pc, #64]	; (8004500 <xTaskResumeAll+0x12c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044c6:	2301      	movs	r3, #1
 80044c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044ca:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <xTaskResumeAll+0x134>)
 80044cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044da:	f001 fa9d 	bl	8005a18 <vPortExitCritical>

	return xAlreadyYielded;
 80044de:	68bb      	ldr	r3, [r7, #8]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000cd4 	.word	0x20000cd4
 80044ec:	20000cac 	.word	0x20000cac
 80044f0:	20000c6c 	.word	0x20000c6c
 80044f4:	20000cb4 	.word	0x20000cb4
 80044f8:	200007dc 	.word	0x200007dc
 80044fc:	200007d8 	.word	0x200007d8
 8004500:	20000cc0 	.word	0x20000cc0
 8004504:	20000cbc 	.word	0x20000cbc
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <xTaskGetTickCount+0x1c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004518:	687b      	ldr	r3, [r7, #4]
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000cb0 	.word	0x20000cb0

0800452c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004536:	4b4e      	ldr	r3, [pc, #312]	; (8004670 <xTaskIncrementTick+0x144>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f040 8088 	bne.w	8004650 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004540:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <xTaskIncrementTick+0x148>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3301      	adds	r3, #1
 8004546:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004548:	4a4a      	ldr	r2, [pc, #296]	; (8004674 <xTaskIncrementTick+0x148>)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11f      	bne.n	8004594 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004554:	4b48      	ldr	r3, [pc, #288]	; (8004678 <xTaskIncrementTick+0x14c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <xTaskIncrementTick+0x46>
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	e7fe      	b.n	8004570 <xTaskIncrementTick+0x44>
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <xTaskIncrementTick+0x14c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	4b40      	ldr	r3, [pc, #256]	; (800467c <xTaskIncrementTick+0x150>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a3e      	ldr	r2, [pc, #248]	; (8004678 <xTaskIncrementTick+0x14c>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4a3e      	ldr	r2, [pc, #248]	; (800467c <xTaskIncrementTick+0x150>)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	4b3e      	ldr	r3, [pc, #248]	; (8004680 <xTaskIncrementTick+0x154>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3301      	adds	r3, #1
 800458c:	4a3c      	ldr	r2, [pc, #240]	; (8004680 <xTaskIncrementTick+0x154>)
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	f000 fac4 	bl	8004b1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <xTaskIncrementTick+0x158>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d349      	bcc.n	8004632 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800459e:	4b36      	ldr	r3, [pc, #216]	; (8004678 <xTaskIncrementTick+0x14c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a8:	4b36      	ldr	r3, [pc, #216]	; (8004684 <xTaskIncrementTick+0x158>)
 80045aa:	f04f 32ff 	mov.w	r2, #4294967295
 80045ae:	601a      	str	r2, [r3, #0]
					break;
 80045b0:	e03f      	b.n	8004632 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <xTaskIncrementTick+0x14c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d203      	bcs.n	80045d2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045ca:	4a2e      	ldr	r2, [pc, #184]	; (8004684 <xTaskIncrementTick+0x158>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045d0:	e02f      	b.n	8004632 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe ff30 	bl	800343c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	3318      	adds	r3, #24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe ff27 	bl	800343c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f2:	4b25      	ldr	r3, [pc, #148]	; (8004688 <xTaskIncrementTick+0x15c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d903      	bls.n	8004602 <xTaskIncrementTick+0xd6>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	4a22      	ldr	r2, [pc, #136]	; (8004688 <xTaskIncrementTick+0x15c>)
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4a1f      	ldr	r2, [pc, #124]	; (800468c <xTaskIncrementTick+0x160>)
 8004610:	441a      	add	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7fe feb2 	bl	8003382 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004622:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <xTaskIncrementTick+0x164>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	429a      	cmp	r2, r3
 800462a:	d3b8      	bcc.n	800459e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004630:	e7b5      	b.n	800459e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004632:	4b17      	ldr	r3, [pc, #92]	; (8004690 <xTaskIncrementTick+0x164>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	4914      	ldr	r1, [pc, #80]	; (800468c <xTaskIncrementTick+0x160>)
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d907      	bls.n	800465a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800464a:	2301      	movs	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e004      	b.n	800465a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004650:	4b10      	ldr	r3, [pc, #64]	; (8004694 <xTaskIncrementTick+0x168>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	4a0f      	ldr	r2, [pc, #60]	; (8004694 <xTaskIncrementTick+0x168>)
 8004658:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800465a:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <xTaskIncrementTick+0x16c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004666:	697b      	ldr	r3, [r7, #20]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000cd4 	.word	0x20000cd4
 8004674:	20000cb0 	.word	0x20000cb0
 8004678:	20000c64 	.word	0x20000c64
 800467c:	20000c68 	.word	0x20000c68
 8004680:	20000cc4 	.word	0x20000cc4
 8004684:	20000ccc 	.word	0x20000ccc
 8004688:	20000cb4 	.word	0x20000cb4
 800468c:	200007dc 	.word	0x200007dc
 8004690:	200007d8 	.word	0x200007d8
 8004694:	20000cbc 	.word	0x20000cbc
 8004698:	20000cc0 	.word	0x20000cc0

0800469c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046a2:	4b27      	ldr	r3, [pc, #156]	; (8004740 <vTaskSwitchContext+0xa4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046aa:	4b26      	ldr	r3, [pc, #152]	; (8004744 <vTaskSwitchContext+0xa8>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046b0:	e040      	b.n	8004734 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <vTaskSwitchContext+0xa8>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b8:	4b23      	ldr	r3, [pc, #140]	; (8004748 <vTaskSwitchContext+0xac>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e00f      	b.n	80046e0 <vTaskSwitchContext+0x44>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <vTaskSwitchContext+0x3e>
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	e7fe      	b.n	80046d8 <vTaskSwitchContext+0x3c>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3b01      	subs	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	491a      	ldr	r1, [pc, #104]	; (800474c <vTaskSwitchContext+0xb0>)
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0e5      	beq.n	80046c0 <vTaskSwitchContext+0x24>
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4a13      	ldr	r2, [pc, #76]	; (800474c <vTaskSwitchContext+0xb0>)
 8004700:	4413      	add	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3308      	adds	r3, #8
 8004716:	429a      	cmp	r2, r3
 8004718:	d104      	bne.n	8004724 <vTaskSwitchContext+0x88>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <vTaskSwitchContext+0xb4>)
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4a06      	ldr	r2, [pc, #24]	; (8004748 <vTaskSwitchContext+0xac>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6013      	str	r3, [r2, #0]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000cd4 	.word	0x20000cd4
 8004744:	20000cc0 	.word	0x20000cc0
 8004748:	20000cb4 	.word	0x20000cb4
 800474c:	200007dc 	.word	0x200007dc
 8004750:	200007d8 	.word	0x200007d8

08004754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <vTaskPlaceOnEventList+0x24>
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e7fe      	b.n	8004776 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <vTaskPlaceOnEventList+0x44>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3318      	adds	r3, #24
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fe fe22 	bl	80033ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004786:	2101      	movs	r1, #1
 8004788:	6838      	ldr	r0, [r7, #0]
 800478a:	f000 fc57 	bl	800503c <prvAddCurrentTaskToDelayedList>
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	200007d8 	.word	0x200007d8

0800479c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <vTaskPlaceOnEventListRestricted+0x26>
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e7fe      	b.n	80047c0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <vTaskPlaceOnEventListRestricted+0x50>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3318      	adds	r3, #24
 80047c8:	4619      	mov	r1, r3
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7fe fdd9 	bl	8003382 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295
 80047da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	68b8      	ldr	r0, [r7, #8]
 80047e0:	f000 fc2c 	bl	800503c <prvAddCurrentTaskToDelayedList>
	}
 80047e4:	bf00      	nop
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	200007d8 	.word	0x200007d8

080047f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <xTaskRemoveFromEventList+0x2a>
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e7fe      	b.n	8004818 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	3318      	adds	r3, #24
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe fe0c 	bl	800343c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004824:	4b1d      	ldr	r3, [pc, #116]	; (800489c <xTaskRemoveFromEventList+0xac>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d11d      	bne.n	8004868 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3304      	adds	r3, #4
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe fe03 	bl	800343c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <xTaskRemoveFromEventList+0xb0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d903      	bls.n	800484a <xTaskRemoveFromEventList+0x5a>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <xTaskRemoveFromEventList+0xb0>)
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <xTaskRemoveFromEventList+0xb4>)
 8004858:	441a      	add	r2, r3
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fe fd8e 	bl	8003382 <vListInsertEnd>
 8004866:	e005      	b.n	8004874 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3318      	adds	r3, #24
 800486c:	4619      	mov	r1, r3
 800486e:	480e      	ldr	r0, [pc, #56]	; (80048a8 <xTaskRemoveFromEventList+0xb8>)
 8004870:	f7fe fd87 	bl	8003382 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <xTaskRemoveFromEventList+0xbc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	429a      	cmp	r2, r3
 8004880:	d905      	bls.n	800488e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004882:	2301      	movs	r3, #1
 8004884:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <xTaskRemoveFromEventList+0xc0>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e001      	b.n	8004892 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000cd4 	.word	0x20000cd4
 80048a0:	20000cb4 	.word	0x20000cb4
 80048a4:	200007dc 	.word	0x200007dc
 80048a8:	20000c6c 	.word	0x20000c6c
 80048ac:	200007d8 	.word	0x200007d8
 80048b0:	20000cc0 	.word	0x20000cc0

080048b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <vTaskInternalSetTimeOutState+0x24>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <vTaskInternalSetTimeOutState+0x28>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	20000cc4 	.word	0x20000cc4
 80048dc:	20000cb0 	.word	0x20000cb0

080048e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d109      	bne.n	8004904 <xTaskCheckForTimeOut+0x24>
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	e7fe      	b.n	8004902 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <xTaskCheckForTimeOut+0x3e>
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e7fe      	b.n	800491c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800491e:	f001 f84d 	bl	80059bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004922:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <xTaskCheckForTimeOut+0xb8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d102      	bne.n	8004942 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	e023      	b.n	800498a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <xTaskCheckForTimeOut+0xbc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d007      	beq.n	800495e <xTaskCheckForTimeOut+0x7e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e015      	b.n	800498a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	d20b      	bcs.n	8004980 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff9d 	bl	80048b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e004      	b.n	800498a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800498a:	f001 f845 	bl	8005a18 <vPortExitCritical>

	return xReturn;
 800498e:	69fb      	ldr	r3, [r7, #28]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000cb0 	.word	0x20000cb0
 800499c:	20000cc4 	.word	0x20000cc4

080049a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <vTaskMissedYield+0x14>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	20000cc0 	.word	0x20000cc0

080049b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049c0:	f000 f852 	bl	8004a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <prvIdleTask+0x28>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d9f9      	bls.n	80049c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <prvIdleTask+0x2c>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049dc:	e7f0      	b.n	80049c0 <prvIdleTask+0x8>
 80049de:	bf00      	nop
 80049e0:	200007dc 	.word	0x200007dc
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	e00c      	b.n	8004a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <prvInitialiseTaskLists+0x60>)
 8004a00:	4413      	add	r3, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fc90 	bl	8003328 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b37      	cmp	r3, #55	; 0x37
 8004a12:	d9ef      	bls.n	80049f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a14:	480d      	ldr	r0, [pc, #52]	; (8004a4c <prvInitialiseTaskLists+0x64>)
 8004a16:	f7fe fc87 	bl	8003328 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a1a:	480d      	ldr	r0, [pc, #52]	; (8004a50 <prvInitialiseTaskLists+0x68>)
 8004a1c:	f7fe fc84 	bl	8003328 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a20:	480c      	ldr	r0, [pc, #48]	; (8004a54 <prvInitialiseTaskLists+0x6c>)
 8004a22:	f7fe fc81 	bl	8003328 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a26:	480c      	ldr	r0, [pc, #48]	; (8004a58 <prvInitialiseTaskLists+0x70>)
 8004a28:	f7fe fc7e 	bl	8003328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a2c:	480b      	ldr	r0, [pc, #44]	; (8004a5c <prvInitialiseTaskLists+0x74>)
 8004a2e:	f7fe fc7b 	bl	8003328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <prvInitialiseTaskLists+0x78>)
 8004a34:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <prvInitialiseTaskLists+0x64>)
 8004a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <prvInitialiseTaskLists+0x7c>)
 8004a3a:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <prvInitialiseTaskLists+0x68>)
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	200007dc 	.word	0x200007dc
 8004a4c:	20000c3c 	.word	0x20000c3c
 8004a50:	20000c50 	.word	0x20000c50
 8004a54:	20000c6c 	.word	0x20000c6c
 8004a58:	20000c80 	.word	0x20000c80
 8004a5c:	20000c98 	.word	0x20000c98
 8004a60:	20000c64 	.word	0x20000c64
 8004a64:	20000c68 	.word	0x20000c68

08004a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a6e:	e019      	b.n	8004aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a70:	f000 ffa4 	bl	80059bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <prvCheckTasksWaitingTermination+0x4c>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fcdb 	bl	800343c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <prvCheckTasksWaitingTermination+0x50>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <prvCheckTasksWaitingTermination+0x50>)
 8004a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <prvCheckTasksWaitingTermination+0x54>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	4a09      	ldr	r2, [pc, #36]	; (8004abc <prvCheckTasksWaitingTermination+0x54>)
 8004a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a9a:	f000 ffbd 	bl	8005a18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f80e 	bl	8004ac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <prvCheckTasksWaitingTermination+0x54>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e1      	bne.n	8004a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000c80 	.word	0x20000c80
 8004ab8:	20000cac 	.word	0x20000cac
 8004abc:	20000c94 	.word	0x20000c94

08004ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d108      	bne.n	8004ae4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 f94c 	bl	8005d74 <vPortFree>
				vPortFree( pxTCB );
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f001 f949 	bl	8005d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ae2:	e017      	b.n	8004b14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d103      	bne.n	8004af6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 f940 	bl	8005d74 <vPortFree>
	}
 8004af4:	e00e      	b.n	8004b14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d009      	beq.n	8004b14 <prvDeleteTCB+0x54>
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e7fe      	b.n	8004b12 <prvDeleteTCB+0x52>
	}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <prvResetNextTaskUnblockTime+0x38>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <prvResetNextTaskUnblockTime+0x3c>)
 8004b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b34:	e008      	b.n	8004b48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <prvResetNextTaskUnblockTime+0x38>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <prvResetNextTaskUnblockTime+0x3c>)
 8004b46:	6013      	str	r3, [r2, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	20000c64 	.word	0x20000c64
 8004b58:	20000ccc 	.word	0x20000ccc

08004b5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <xTaskGetSchedulerState+0x34>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	e008      	b.n	8004b82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <xTaskGetSchedulerState+0x38>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	e001      	b.n	8004b82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b82:	687b      	ldr	r3, [r7, #4]
	}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	20000cb8 	.word	0x20000cb8
 8004b94:	20000cd4 	.word	0x20000cd4

08004b98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d054      	beq.n	8004c58 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bae:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <xTaskPriorityDisinherit+0xcc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d009      	beq.n	8004bcc <xTaskPriorityDisinherit+0x34>
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e7fe      	b.n	8004bca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <xTaskPriorityDisinherit+0x50>
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	e7fe      	b.n	8004be6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	1e5a      	subs	r2, r3, #1
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d02c      	beq.n	8004c58 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d128      	bne.n	8004c58 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fc16 	bl	800343c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <xTaskPriorityDisinherit+0xd0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d903      	bls.n	8004c38 <xTaskPriorityDisinherit+0xa0>
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4a0c      	ldr	r2, [pc, #48]	; (8004c68 <xTaskPriorityDisinherit+0xd0>)
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <xTaskPriorityDisinherit+0xd4>)
 8004c46:	441a      	add	r2, r3
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f7fe fb97 	bl	8003382 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c58:	697b      	ldr	r3, [r7, #20]
	}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200007d8 	.word	0x200007d8
 8004c68:	20000cb4 	.word	0x20000cb4
 8004c6c:	200007dc 	.word	0x200007dc

08004c70 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004c7e:	f000 fe9d 	bl	80059bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004c82:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <xTaskNotifyWait+0xac>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d01a      	beq.n	8004cc6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004c90:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <xTaskNotifyWait+0xac>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	43d2      	mvns	r2, r2
 8004c9a:	400a      	ands	r2, r1
 8004c9c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004c9e:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <xTaskNotifyWait+0xac>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cae:	2101      	movs	r1, #1
 8004cb0:	6838      	ldr	r0, [r7, #0]
 8004cb2:	f000 f9c3 	bl	800503c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <xTaskNotifyWait+0xb0>)
 8004cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004cc6:	f000 fea7 	bl	8005a18 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004cca:	f000 fe77 	bl	80059bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d004      	beq.n	8004cde <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <xTaskNotifyWait+0xac>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <xTaskNotifyWait+0xac>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d002      	beq.n	8004cf2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	e008      	b.n	8004d04 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <xTaskNotifyWait+0xac>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	43d2      	mvns	r2, r2
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <xTaskNotifyWait+0xac>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8004d0e:	f000 fe83 	bl	8005a18 <vPortExitCritical>

		return xReturn;
 8004d12:	697b      	ldr	r3, [r7, #20]
	}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	200007d8 	.word	0x200007d8
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <xTaskGenericNotify+0x2e>
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e7fe      	b.n	8004d50 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004d56:	f000 fe31 	bl	80059bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d6e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d827      	bhi.n	8004dce <xTaskGenericNotify+0xaa>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <xTaskGenericNotify+0x60>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004ded 	.word	0x08004ded
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004da7 	.word	0x08004da7
 8004d90:	08004db3 	.word	0x08004db3
 8004d94:	08004dbb 	.word	0x08004dbb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004da4:	e025      	b.n	8004df2 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004db0:	e01f      	b.n	8004df2 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004db8:	e01b      	b.n	8004df2 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004dba:	7ffb      	ldrb	r3, [r7, #31]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d003      	beq.n	8004dc8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004dc6:	e014      	b.n	8004df2 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004dcc:	e011      	b.n	8004df2 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d00b      	beq.n	8004df0 <xTaskGenericNotify+0xcc>
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e7fe      	b.n	8004dea <xTaskGenericNotify+0xc6>
					break;
 8004dec:	bf00      	nop
 8004dee:	e000      	b.n	8004df2 <xTaskGenericNotify+0xce>

					break;
 8004df0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d139      	bne.n	8004e6c <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe fb1d 	bl	800343c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <xTaskGenericNotify+0x158>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d903      	bls.n	8004e16 <xTaskGenericNotify+0xf2>
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	4a1a      	ldr	r2, [pc, #104]	; (8004e7c <xTaskGenericNotify+0x158>)
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <xTaskGenericNotify+0x15c>)
 8004e24:	441a      	add	r2, r3
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fe faa8 	bl	8003382 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <xTaskGenericNotify+0x12a>
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	e7fe      	b.n	8004e4c <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <xTaskGenericNotify+0x160>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d907      	bls.n	8004e6c <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <xTaskGenericNotify+0x164>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004e6c:	f000 fdd4 	bl	8005a18 <vPortExitCritical>

		return xReturn;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3728      	adds	r7, #40	; 0x28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000cb4 	.word	0x20000cb4
 8004e80:	200007dc 	.word	0x200007dc
 8004e84:	200007d8 	.word	0x200007d8
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08e      	sub	sp, #56	; 0x38
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <xTaskGenericNotifyFromISR+0x2e>
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb8:	e7fe      	b.n	8004eb8 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eba:	f000 fe5b 	bl	8005b74 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	623a      	str	r2, [r7, #32]
 8004ed8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004eda:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d829      	bhi.n	8004f58 <xTaskGenericNotifyFromISR+0xcc>
 8004f04:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <xTaskGenericNotifyFromISR+0x80>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f77 	.word	0x08004f77
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f2f 	.word	0x08004f2f
 8004f18:	08004f3b 	.word	0x08004f3b
 8004f1c:	08004f43 	.word	0x08004f43
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004f2c:	e026      	b.n	8004f7c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004f38:	e020      	b.n	8004f7c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004f40:	e01c      	b.n	8004f7c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004f42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d003      	beq.n	8004f52 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004f50:	e014      	b.n	8004f7c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004f56:	e011      	b.n	8004f7c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d00b      	beq.n	8004f7a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e7fe      	b.n	8004f74 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8004f76:	bf00      	nop
 8004f78:	e000      	b.n	8004f7c <xTaskGenericNotifyFromISR+0xf0>
					break;
 8004f7a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004f7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d145      	bne.n	8005010 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d009      	beq.n	8004fa0 <xTaskGenericNotifyFromISR+0x114>
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e7fe      	b.n	8004f9e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa0:	4b20      	ldr	r3, [pc, #128]	; (8005024 <xTaskGenericNotifyFromISR+0x198>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d11d      	bne.n	8004fe4 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	3304      	adds	r3, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe fa45 	bl	800343c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <xTaskGenericNotifyFromISR+0x19c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d903      	bls.n	8004fc6 <xTaskGenericNotifyFromISR+0x13a>
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	4a19      	ldr	r2, [pc, #100]	; (8005028 <xTaskGenericNotifyFromISR+0x19c>)
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4a16      	ldr	r2, [pc, #88]	; (800502c <xTaskGenericNotifyFromISR+0x1a0>)
 8004fd4:	441a      	add	r2, r3
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f7fe f9d0 	bl	8003382 <vListInsertEnd>
 8004fe2:	e005      	b.n	8004ff0 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4811      	ldr	r0, [pc, #68]	; (8005030 <xTaskGenericNotifyFromISR+0x1a4>)
 8004fec:	f7fe f9c9 	bl	8003382 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <xTaskGenericNotifyFromISR+0x1a8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d908      	bls.n	8005010 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <xTaskGenericNotifyFromISR+0x1ac>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800501a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800501c:	4618      	mov	r0, r3
 800501e:	3738      	adds	r7, #56	; 0x38
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000cd4 	.word	0x20000cd4
 8005028:	20000cb4 	.word	0x20000cb4
 800502c:	200007dc 	.word	0x200007dc
 8005030:	20000c6c 	.word	0x20000c6c
 8005034:	200007d8 	.word	0x200007d8
 8005038:	20000cc0 	.word	0x20000cc0

0800503c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005046:	4b21      	ldr	r3, [pc, #132]	; (80050cc <prvAddCurrentTaskToDelayedList+0x90>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800504c:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3304      	adds	r3, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe f9f2 	bl	800343c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d10a      	bne.n	8005076 <prvAddCurrentTaskToDelayedList+0x3a>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4819      	ldr	r0, [pc, #100]	; (80050d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005070:	f7fe f987 	bl	8003382 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005074:	e026      	b.n	80050c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4413      	add	r3, r2
 800507c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800507e:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	429a      	cmp	r2, r3
 800508c:	d209      	bcs.n	80050a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800508e:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f7fe f995 	bl	80033ca <vListInsert>
}
 80050a0:	e010      	b.n	80050c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f7fe f98b 	bl	80033ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d202      	bcs.n	80050c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050be:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6013      	str	r3, [r2, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000cb0 	.word	0x20000cb0
 80050d0:	200007d8 	.word	0x200007d8
 80050d4:	20000c98 	.word	0x20000c98
 80050d8:	20000c68 	.word	0x20000c68
 80050dc:	20000c64 	.word	0x20000c64
 80050e0:	20000ccc 	.word	0x20000ccc

080050e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050ee:	f000 faff 	bl	80056f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <xTimerCreateTimerTask+0x80>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d021      	beq.n	800513e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005102:	1d3a      	adds	r2, r7, #4
 8005104:	f107 0108 	add.w	r1, r7, #8
 8005108:	f107 030c 	add.w	r3, r7, #12
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe f8f1 	bl	80032f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	9202      	str	r2, [sp, #8]
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	2302      	movs	r3, #2
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2300      	movs	r3, #0
 8005122:	460a      	mov	r2, r1
 8005124:	4910      	ldr	r1, [pc, #64]	; (8005168 <xTimerCreateTimerTask+0x84>)
 8005126:	4811      	ldr	r0, [pc, #68]	; (800516c <xTimerCreateTimerTask+0x88>)
 8005128:	f7fe ff44 	bl	8003fb4 <xTaskCreateStatic>
 800512c:	4602      	mov	r2, r0
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <xTimerCreateTimerTask+0x8c>)
 8005130:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005132:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <xTimerCreateTimerTask+0x8c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800513a:	2301      	movs	r3, #1
 800513c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e7fe      	b.n	8005156 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005158:	697b      	ldr	r3, [r7, #20]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000d08 	.word	0x20000d08
 8005168:	080072cc 	.word	0x080072cc
 800516c:	080052a5 	.word	0x080052a5
 8005170:	20000d0c 	.word	0x20000d0c

08005174 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	; 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005182:	2300      	movs	r3, #0
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <xTimerGenericCommand+0x2c>
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	623b      	str	r3, [r7, #32]
 800519e:	e7fe      	b.n	800519e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <xTimerGenericCommand+0x94>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d02a      	beq.n	80051fe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	dc18      	bgt.n	80051ec <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051ba:	f7ff fccf 	bl	8004b5c <xTaskGetSchedulerState>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d109      	bne.n	80051d8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051c4:	4b10      	ldr	r3, [pc, #64]	; (8005208 <xTimerGenericCommand+0x94>)
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	f107 0110 	add.w	r1, r7, #16
 80051cc:	2300      	movs	r3, #0
 80051ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d0:	f7fe fa9c 	bl	800370c <xQueueGenericSend>
 80051d4:	6278      	str	r0, [r7, #36]	; 0x24
 80051d6:	e012      	b.n	80051fe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <xTimerGenericCommand+0x94>)
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	f107 0110 	add.w	r1, r7, #16
 80051e0:	2300      	movs	r3, #0
 80051e2:	2200      	movs	r2, #0
 80051e4:	f7fe fa92 	bl	800370c <xQueueGenericSend>
 80051e8:	6278      	str	r0, [r7, #36]	; 0x24
 80051ea:	e008      	b.n	80051fe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <xTimerGenericCommand+0x94>)
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	f107 0110 	add.w	r1, r7, #16
 80051f4:	2300      	movs	r3, #0
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	f7fe fb82 	bl	8003900 <xQueueGenericSendFromISR>
 80051fc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005200:	4618      	mov	r0, r3
 8005202:	3728      	adds	r7, #40	; 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000d08 	.word	0x20000d08

0800520c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005216:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <prvProcessExpiredTimer+0x94>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3304      	adds	r3, #4
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe f909 	bl	800343c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d021      	beq.n	800527c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	18d1      	adds	r1, r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	6978      	ldr	r0, [r7, #20]
 8005246:	f000 f8d1 	bl	80053ec <prvInsertTimerInActiveList>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01e      	beq.n	800528e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005250:	2300      	movs	r3, #0
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	2100      	movs	r1, #0
 800525a:	6978      	ldr	r0, [r7, #20]
 800525c:	f7ff ff8a 	bl	8005174 <xTimerGenericCommand>
 8005260:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d112      	bne.n	800528e <prvProcessExpiredTimer+0x82>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e7fe      	b.n	800527a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	b2da      	uxtb	r2, r3
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	6978      	ldr	r0, [r7, #20]
 8005294:	4798      	blx	r3
}
 8005296:	bf00      	nop
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000d00 	.word	0x20000d00

080052a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052ac:	f107 0308 	add.w	r3, r7, #8
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 f857 	bl	8005364 <prvGetNextExpireTime>
 80052b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4619      	mov	r1, r3
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f803 	bl	80052c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052c2:	f000 f8d5 	bl	8005470 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052c6:	e7f1      	b.n	80052ac <prvTimerTask+0x8>

080052c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052d2:	f7ff f871 	bl	80043b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f866 	bl	80053ac <prvSampleTimeNow>
 80052e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d130      	bne.n	800534a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <prvProcessTimerOrBlockTask+0x3c>
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d806      	bhi.n	8005304 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052f6:	f7ff f86d 	bl	80043d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ff85 	bl	800520c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005302:	e024      	b.n	800534e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d008      	beq.n	800531c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800530a:	4b13      	ldr	r3, [pc, #76]	; (8005358 <prvProcessTimerOrBlockTask+0x90>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <prvProcessTimerOrBlockTask+0x50>
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <prvProcessTimerOrBlockTask+0x52>
 8005318:	2300      	movs	r3, #0
 800531a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800531c:	4b0f      	ldr	r3, [pc, #60]	; (800535c <prvProcessTimerOrBlockTask+0x94>)
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4619      	mov	r1, r3
 800532a:	f7fe fe0f 	bl	8003f4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800532e:	f7ff f851 	bl	80043d4 <xTaskResumeAll>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005338:	4b09      	ldr	r3, [pc, #36]	; (8005360 <prvProcessTimerOrBlockTask+0x98>)
 800533a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	f3bf 8f6f 	isb	sy
}
 8005348:	e001      	b.n	800534e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800534a:	f7ff f843 	bl	80043d4 <xTaskResumeAll>
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000d04 	.word	0x20000d04
 800535c:	20000d08 	.word	0x20000d08
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800536c:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <prvGetNextExpireTime+0x44>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <prvGetNextExpireTime+0x16>
 8005376:	2201      	movs	r2, #1
 8005378:	e000      	b.n	800537c <prvGetNextExpireTime+0x18>
 800537a:	2200      	movs	r2, #0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d105      	bne.n	8005394 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <prvGetNextExpireTime+0x44>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	e001      	b.n	8005398 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005398:	68fb      	ldr	r3, [r7, #12]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000d00 	.word	0x20000d00

080053ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053b4:	f7ff f8aa 	bl	800450c <xTaskGetTickCount>
 80053b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053ba:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <prvSampleTimeNow+0x3c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d205      	bcs.n	80053d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053c4:	f000 f930 	bl	8005628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e002      	b.n	80053d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053d6:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <prvSampleTimeNow+0x3c>)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000d10 	.word	0x20000d10

080053ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	429a      	cmp	r2, r3
 8005410:	d812      	bhi.n	8005438 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005420:	2301      	movs	r3, #1
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e01b      	b.n	800545e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005426:	4b10      	ldr	r3, [pc, #64]	; (8005468 <prvInsertTimerInActiveList+0x7c>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3304      	adds	r3, #4
 800542e:	4619      	mov	r1, r3
 8005430:	4610      	mov	r0, r2
 8005432:	f7fd ffca 	bl	80033ca <vListInsert>
 8005436:	e012      	b.n	800545e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d206      	bcs.n	800544e <prvInsertTimerInActiveList+0x62>
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d302      	bcc.n	800544e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e007      	b.n	800545e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <prvInsertTimerInActiveList+0x80>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3304      	adds	r3, #4
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f7fd ffb6 	bl	80033ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800545e:	697b      	ldr	r3, [r7, #20]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000d04 	.word	0x20000d04
 800546c:	20000d00 	.word	0x20000d00

08005470 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08e      	sub	sp, #56	; 0x38
 8005474:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005476:	e0c6      	b.n	8005606 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	da17      	bge.n	80054ae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	3304      	adds	r3, #4
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <prvProcessReceivedCommands+0x2e>
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	e7fe      	b.n	800549c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a4:	6850      	ldr	r0, [r2, #4]
 80054a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a8:	6892      	ldr	r2, [r2, #8]
 80054aa:	4611      	mov	r1, r2
 80054ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f2c0 80a7 	blt.w	8005604 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d004      	beq.n	80054cc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	3304      	adds	r3, #4
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fd ffb8 	bl	800343c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054cc:	463b      	mov	r3, r7
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ff6c 	bl	80053ac <prvSampleTimeNow>
 80054d4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b09      	cmp	r3, #9
 80054da:	f200 8094 	bhi.w	8005606 <prvProcessReceivedCommands+0x196>
 80054de:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <prvProcessReceivedCommands+0x74>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	0800550d 	.word	0x0800550d
 80054f0:	0800557f 	.word	0x0800557f
 80054f4:	08005593 	.word	0x08005593
 80054f8:	080055db 	.word	0x080055db
 80054fc:	0800550d 	.word	0x0800550d
 8005500:	0800550d 	.word	0x0800550d
 8005504:	0800557f 	.word	0x0800557f
 8005508:	08005593 	.word	0x08005593
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	18d1      	adds	r1, r2, r3
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552c:	f7ff ff5e 	bl	80053ec <prvInsertTimerInActiveList>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d067      	beq.n	8005606 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d05c      	beq.n	8005606 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	441a      	add	r2, r3
 8005554:	2300      	movs	r3, #0
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2300      	movs	r3, #0
 800555a:	2100      	movs	r1, #0
 800555c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555e:	f7ff fe09 	bl	8005174 <xTimerGenericCommand>
 8005562:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d14d      	bne.n	8005606 <prvProcessReceivedCommands+0x196>
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e7fe      	b.n	800557c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	b2da      	uxtb	r2, r3
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005590:	e039      	b.n	8005606 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	b2da      	uxtb	r2, r3
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <prvProcessReceivedCommands+0x156>
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e7fe      	b.n	80055c4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	18d1      	adds	r1, r2, r3
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d4:	f7ff ff0a 	bl	80053ec <prvInsertTimerInActiveList>
					break;
 80055d8:	e015      	b.n	8005606 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d103      	bne.n	80055f0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80055e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ea:	f000 fbc3 	bl	8005d74 <vPortFree>
 80055ee:	e00a      	b.n	8005606 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005602:	e000      	b.n	8005606 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005604:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005606:	4b07      	ldr	r3, [pc, #28]	; (8005624 <prvProcessReceivedCommands+0x1b4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	1d39      	adds	r1, r7, #4
 800560c:	2200      	movs	r2, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe fa0a 	bl	8003a28 <xQueueReceive>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f af2e 	bne.w	8005478 <prvProcessReceivedCommands+0x8>
	}
}
 800561c:	bf00      	nop
 800561e:	3730      	adds	r7, #48	; 0x30
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000d08 	.word	0x20000d08

08005628 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800562e:	e047      	b.n	80056c0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005630:	4b2d      	ldr	r3, [pc, #180]	; (80056e8 <prvSwitchTimerLists+0xc0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563a:	4b2b      	ldr	r3, [pc, #172]	; (80056e8 <prvSwitchTimerLists+0xc0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3304      	adds	r3, #4
 8005648:	4618      	mov	r0, r3
 800564a:	f7fd fef7 	bl	800343c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d02d      	beq.n	80056c0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	429a      	cmp	r2, r3
 8005674:	d90e      	bls.n	8005694 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005682:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <prvSwitchTimerLists+0xc0>)
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3304      	adds	r3, #4
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f7fd fe9c 	bl	80033ca <vListInsert>
 8005692:	e015      	b.n	80056c0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005694:	2300      	movs	r3, #0
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	2300      	movs	r3, #0
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	2100      	movs	r1, #0
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff fd68 	bl	8005174 <xTimerGenericCommand>
 80056a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d109      	bne.n	80056c0 <prvSwitchTimerLists+0x98>
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	603b      	str	r3, [r7, #0]
 80056be:	e7fe      	b.n	80056be <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <prvSwitchTimerLists+0xc0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1b2      	bne.n	8005630 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <prvSwitchTimerLists+0xc0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056d0:	4b06      	ldr	r3, [pc, #24]	; (80056ec <prvSwitchTimerLists+0xc4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <prvSwitchTimerLists+0xc0>)
 80056d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056d8:	4a04      	ldr	r2, [pc, #16]	; (80056ec <prvSwitchTimerLists+0xc4>)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6013      	str	r3, [r2, #0]
}
 80056de:	bf00      	nop
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000d00 	.word	0x20000d00
 80056ec:	20000d04 	.word	0x20000d04

080056f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056f6:	f000 f961 	bl	80059bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056fa:	4b15      	ldr	r3, [pc, #84]	; (8005750 <prvCheckForValidListAndQueue+0x60>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d120      	bne.n	8005744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005702:	4814      	ldr	r0, [pc, #80]	; (8005754 <prvCheckForValidListAndQueue+0x64>)
 8005704:	f7fd fe10 	bl	8003328 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005708:	4813      	ldr	r0, [pc, #76]	; (8005758 <prvCheckForValidListAndQueue+0x68>)
 800570a:	f7fd fe0d 	bl	8003328 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <prvCheckForValidListAndQueue+0x6c>)
 8005710:	4a10      	ldr	r2, [pc, #64]	; (8005754 <prvCheckForValidListAndQueue+0x64>)
 8005712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005714:	4b12      	ldr	r3, [pc, #72]	; (8005760 <prvCheckForValidListAndQueue+0x70>)
 8005716:	4a10      	ldr	r2, [pc, #64]	; (8005758 <prvCheckForValidListAndQueue+0x68>)
 8005718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800571a:	2300      	movs	r3, #0
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	4b11      	ldr	r3, [pc, #68]	; (8005764 <prvCheckForValidListAndQueue+0x74>)
 8005720:	4a11      	ldr	r2, [pc, #68]	; (8005768 <prvCheckForValidListAndQueue+0x78>)
 8005722:	2110      	movs	r1, #16
 8005724:	200a      	movs	r0, #10
 8005726:	f7fd ff1b 	bl	8003560 <xQueueGenericCreateStatic>
 800572a:	4602      	mov	r2, r0
 800572c:	4b08      	ldr	r3, [pc, #32]	; (8005750 <prvCheckForValidListAndQueue+0x60>)
 800572e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <prvCheckForValidListAndQueue+0x60>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <prvCheckForValidListAndQueue+0x60>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	490b      	ldr	r1, [pc, #44]	; (800576c <prvCheckForValidListAndQueue+0x7c>)
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fbdc 	bl	8003efc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005744:	f000 f968 	bl	8005a18 <vPortExitCritical>
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000d08 	.word	0x20000d08
 8005754:	20000cd8 	.word	0x20000cd8
 8005758:	20000cec 	.word	0x20000cec
 800575c:	20000d00 	.word	0x20000d00
 8005760:	20000d04 	.word	0x20000d04
 8005764:	20000db4 	.word	0x20000db4
 8005768:	20000d14 	.word	0x20000d14
 800576c:	080072d4 	.word	0x080072d4

08005770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3b04      	subs	r3, #4
 8005780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3b04      	subs	r3, #4
 800578e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3b04      	subs	r3, #4
 800579e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057a0:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <pxPortInitialiseStack+0x64>)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3b14      	subs	r3, #20
 80057aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b04      	subs	r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f06f 0202 	mvn.w	r2, #2
 80057be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3b20      	subs	r3, #32
 80057c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	080057d9 	.word	0x080057d9

080057d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057e2:	4b11      	ldr	r3, [pc, #68]	; (8005828 <prvTaskExitError+0x50>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d009      	beq.n	8005800 <prvTaskExitError+0x28>
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e7fe      	b.n	80057fe <prvTaskExitError+0x26>
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005812:	bf00      	nop
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0fc      	beq.n	8005814 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000090 	.word	0x20000090
 800582c:	00000000 	.word	0x00000000

08005830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <pxCurrentTCBConst2>)
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	6808      	ldr	r0, [r1, #0]
 8005836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583a:	f380 8809 	msr	PSP, r0
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f380 8811 	msr	BASEPRI, r0
 800584a:	4770      	bx	lr
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst2>:
 8005850:	200007d8 	.word	0x200007d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005858:	4808      	ldr	r0, [pc, #32]	; (800587c <prvPortStartFirstTask+0x24>)
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	6800      	ldr	r0, [r0, #0]
 800585e:	f380 8808 	msr	MSP, r0
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8814 	msr	CONTROL, r0
 800586a:	b662      	cpsie	i
 800586c:	b661      	cpsie	f
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	df00      	svc	0
 8005878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800587a:	bf00      	nop
 800587c:	e000ed08 	.word	0xe000ed08

08005880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005886:	4b44      	ldr	r3, [pc, #272]	; (8005998 <xPortStartScheduler+0x118>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a44      	ldr	r2, [pc, #272]	; (800599c <xPortStartScheduler+0x11c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d109      	bne.n	80058a4 <xPortStartScheduler+0x24>
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	e7fe      	b.n	80058a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058a4:	4b3c      	ldr	r3, [pc, #240]	; (8005998 <xPortStartScheduler+0x118>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a3d      	ldr	r2, [pc, #244]	; (80059a0 <xPortStartScheduler+0x120>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d109      	bne.n	80058c2 <xPortStartScheduler+0x42>
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e7fe      	b.n	80058c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058c2:	4b38      	ldr	r3, [pc, #224]	; (80059a4 <xPortStartScheduler+0x124>)
 80058c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	22ff      	movs	r2, #255	; 0xff
 80058d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <xPortStartScheduler+0x128>)
 80058e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ea:	4b30      	ldr	r3, [pc, #192]	; (80059ac <xPortStartScheduler+0x12c>)
 80058ec:	2207      	movs	r2, #7
 80058ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058f0:	e009      	b.n	8005906 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <xPortStartScheduler+0x12c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	4a2c      	ldr	r2, [pc, #176]	; (80059ac <xPortStartScheduler+0x12c>)
 80058fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b80      	cmp	r3, #128	; 0x80
 8005910:	d0ef      	beq.n	80058f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005912:	4b26      	ldr	r3, [pc, #152]	; (80059ac <xPortStartScheduler+0x12c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1c3 0307 	rsb	r3, r3, #7
 800591a:	2b04      	cmp	r3, #4
 800591c:	d009      	beq.n	8005932 <xPortStartScheduler+0xb2>
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	e7fe      	b.n	8005930 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005932:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <xPortStartScheduler+0x12c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	4a1c      	ldr	r2, [pc, #112]	; (80059ac <xPortStartScheduler+0x12c>)
 800593a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800593c:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <xPortStartScheduler+0x12c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <xPortStartScheduler+0x12c>)
 8005946:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005950:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <xPortStartScheduler+0x130>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <xPortStartScheduler+0x130>)
 8005956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800595a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800595c:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <xPortStartScheduler+0x130>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <xPortStartScheduler+0x130>)
 8005962:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005966:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005968:	f000 f8d6 	bl	8005b18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800596c:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <xPortStartScheduler+0x134>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005972:	f000 f8f5 	bl	8005b60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <xPortStartScheduler+0x138>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <xPortStartScheduler+0x138>)
 800597c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005980:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005982:	f7ff ff69 	bl	8005858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005986:	f7fe fe89 	bl	800469c <vTaskSwitchContext>
	prvTaskExitError();
 800598a:	f7ff ff25 	bl	80057d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	e000ed00 	.word	0xe000ed00
 800599c:	410fc271 	.word	0x410fc271
 80059a0:	410fc270 	.word	0x410fc270
 80059a4:	e000e400 	.word	0xe000e400
 80059a8:	20000e04 	.word	0x20000e04
 80059ac:	20000e08 	.word	0x20000e08
 80059b0:	e000ed20 	.word	0xe000ed20
 80059b4:	20000090 	.word	0x20000090
 80059b8:	e000ef34 	.word	0xe000ef34

080059bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <vPortEnterCritical+0x54>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	4a0d      	ldr	r2, [pc, #52]	; (8005a10 <vPortEnterCritical+0x54>)
 80059dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <vPortEnterCritical+0x54>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d10e      	bne.n	8005a04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <vPortEnterCritical+0x58>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d009      	beq.n	8005a04 <vPortEnterCritical+0x48>
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	603b      	str	r3, [r7, #0]
 8005a02:	e7fe      	b.n	8005a02 <vPortEnterCritical+0x46>
	}
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20000090 	.word	0x20000090
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a1e:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <vPortExitCritical+0x4c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <vPortExitCritical+0x22>
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	e7fe      	b.n	8005a38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <vPortExitCritical+0x4c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <vPortExitCritical+0x4c>)
 8005a42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <vPortExitCritical+0x4c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <vPortExitCritical+0x3e>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000090 	.word	0x20000090
	...

08005a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a70:	f3ef 8009 	mrs	r0, PSP
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <pxCurrentTCBConst>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	f01e 0f10 	tst.w	lr, #16
 8005a80:	bf08      	it	eq
 8005a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8a:	6010      	str	r0, [r2, #0]
 8005a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a94:	f380 8811 	msr	BASEPRI, r0
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f7fe fdfc 	bl	800469c <vTaskSwitchContext>
 8005aa4:	f04f 0000 	mov.w	r0, #0
 8005aa8:	f380 8811 	msr	BASEPRI, r0
 8005aac:	bc09      	pop	{r0, r3}
 8005aae:	6819      	ldr	r1, [r3, #0]
 8005ab0:	6808      	ldr	r0, [r1, #0]
 8005ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab6:	f01e 0f10 	tst.w	lr, #16
 8005aba:	bf08      	it	eq
 8005abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ac0:	f380 8809 	msr	PSP, r0
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	f3af 8000 	nop.w

08005ad0 <pxCurrentTCBConst>:
 8005ad0:	200007d8 	.word	0x200007d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop

08005ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005af0:	f7fe fd1c 	bl	800452c <xTaskIncrementTick>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <SysTick_Handler+0x3c>)
 8005afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <vPortSetupTimerInterrupt+0x34>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <vPortSetupTimerInterrupt+0x38>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <vPortSetupTimerInterrupt+0x3c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <vPortSetupTimerInterrupt+0x40>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	099b      	lsrs	r3, r3, #6
 8005b34:	4a09      	ldr	r2, [pc, #36]	; (8005b5c <vPortSetupTimerInterrupt+0x44>)
 8005b36:	3b01      	subs	r3, #1
 8005b38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b3a:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <vPortSetupTimerInterrupt+0x34>)
 8005b3c:	2207      	movs	r2, #7
 8005b3e:	601a      	str	r2, [r3, #0]
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	e000e010 	.word	0xe000e010
 8005b50:	e000e018 	.word	0xe000e018
 8005b54:	20000084 	.word	0x20000084
 8005b58:	10624dd3 	.word	0x10624dd3
 8005b5c:	e000e014 	.word	0xe000e014

08005b60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b70 <vPortEnableVFP+0x10>
 8005b64:	6801      	ldr	r1, [r0, #0]
 8005b66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b6a:	6001      	str	r1, [r0, #0]
 8005b6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b6e:	bf00      	nop
 8005b70:	e000ed88 	.word	0xe000ed88

08005b74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b7a:	f3ef 8305 	mrs	r3, IPSR
 8005b7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b0f      	cmp	r3, #15
 8005b84:	d913      	bls.n	8005bae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <vPortValidateInterruptPriority+0x6c>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b90:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <vPortValidateInterruptPriority+0x70>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	7afa      	ldrb	r2, [r7, #11]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d209      	bcs.n	8005bae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	607b      	str	r3, [r7, #4]
 8005bac:	e7fe      	b.n	8005bac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bae:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <vPortValidateInterruptPriority+0x74>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <vPortValidateInterruptPriority+0x78>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d909      	bls.n	8005bd2 <vPortValidateInterruptPriority+0x5e>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	e7fe      	b.n	8005bd0 <vPortValidateInterruptPriority+0x5c>
	}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	e000e3f0 	.word	0xe000e3f0
 8005be4:	20000e04 	.word	0x20000e04
 8005be8:	e000ed0c 	.word	0xe000ed0c
 8005bec:	20000e08 	.word	0x20000e08

08005bf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bfc:	f7fe fbdc 	bl	80043b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c00:	4b57      	ldr	r3, [pc, #348]	; (8005d60 <pvPortMalloc+0x170>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c08:	f000 f90c 	bl	8005e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c0c:	4b55      	ldr	r3, [pc, #340]	; (8005d64 <pvPortMalloc+0x174>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 808c 	bne.w	8005d32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01c      	beq.n	8005c5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005c20:	2208      	movs	r2, #8
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d013      	beq.n	8005c5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f023 0307 	bic.w	r3, r3, #7
 8005c38:	3308      	adds	r3, #8
 8005c3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d009      	beq.n	8005c5a <pvPortMalloc+0x6a>
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e7fe      	b.n	8005c58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d068      	beq.n	8005d32 <pvPortMalloc+0x142>
 8005c60:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <pvPortMalloc+0x178>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d863      	bhi.n	8005d32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c6a:	4b40      	ldr	r3, [pc, #256]	; (8005d6c <pvPortMalloc+0x17c>)
 8005c6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <pvPortMalloc+0x17c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c74:	e004      	b.n	8005c80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d903      	bls.n	8005c92 <pvPortMalloc+0xa2>
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f1      	bne.n	8005c76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c92:	4b33      	ldr	r3, [pc, #204]	; (8005d60 <pvPortMalloc+0x170>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d04a      	beq.n	8005d32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	4413      	add	r3, r2
 8005ca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	1ad2      	subs	r2, r2, r3
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d91e      	bls.n	8005cfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <pvPortMalloc+0xf4>
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	e7fe      	b.n	8005ce2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	1ad2      	subs	r2, r2, r3
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cf6:	69b8      	ldr	r0, [r7, #24]
 8005cf8:	f000 f8f6 	bl	8005ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <pvPortMalloc+0x178>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <pvPortMalloc+0x178>)
 8005d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d0a:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <pvPortMalloc+0x178>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <pvPortMalloc+0x180>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d203      	bcs.n	8005d1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <pvPortMalloc+0x178>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <pvPortMalloc+0x180>)
 8005d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <pvPortMalloc+0x174>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d32:	f7fe fb4f 	bl	80043d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d009      	beq.n	8005d54 <pvPortMalloc+0x164>
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e7fe      	b.n	8005d52 <pvPortMalloc+0x162>
	return pvReturn;
 8005d54:	69fb      	ldr	r3, [r7, #28]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3728      	adds	r7, #40	; 0x28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20004a14 	.word	0x20004a14
 8005d64:	20004a20 	.word	0x20004a20
 8005d68:	20004a18 	.word	0x20004a18
 8005d6c:	20004a0c 	.word	0x20004a0c
 8005d70:	20004a1c 	.word	0x20004a1c

08005d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d046      	beq.n	8005e14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d86:	2308      	movs	r3, #8
 8005d88:	425b      	negs	r3, r3
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <vPortFree+0xa8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <vPortFree+0x42>
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e7fe      	b.n	8005db4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <vPortFree+0x5e>
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	60bb      	str	r3, [r7, #8]
 8005dd0:	e7fe      	b.n	8005dd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <vPortFree+0xa8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d019      	beq.n	8005e14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d115      	bne.n	8005e14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <vPortFree+0xa8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	43db      	mvns	r3, r3
 8005df2:	401a      	ands	r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005df8:	f7fe fade 	bl	80043b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <vPortFree+0xac>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4413      	add	r3, r2
 8005e06:	4a06      	ldr	r2, [pc, #24]	; (8005e20 <vPortFree+0xac>)
 8005e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e0a:	6938      	ldr	r0, [r7, #16]
 8005e0c:	f000 f86c 	bl	8005ee8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e10:	f7fe fae0 	bl	80043d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e14:	bf00      	nop
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20004a20 	.word	0x20004a20
 8005e20:	20004a18 	.word	0x20004a18

08005e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e30:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <prvHeapInit+0xac>)
 8005e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3307      	adds	r3, #7
 8005e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0307 	bic.w	r3, r3, #7
 8005e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <prvHeapInit+0xac>)
 8005e54:	4413      	add	r3, r2
 8005e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <prvHeapInit+0xb0>)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <prvHeapInit+0xb0>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e70:	2208      	movs	r2, #8
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0307 	bic.w	r3, r3, #7
 8005e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <prvHeapInit+0xb4>)
 8005e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <prvHeapInit+0xb4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e8e:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <prvHeapInit+0xb4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <prvHeapInit+0xb4>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <prvHeapInit+0xb8>)
 8005eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4a09      	ldr	r2, [pc, #36]	; (8005ee0 <prvHeapInit+0xbc>)
 8005eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ebc:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <prvHeapInit+0xc0>)
 8005ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ec2:	601a      	str	r2, [r3, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20000e0c 	.word	0x20000e0c
 8005ed4:	20004a0c 	.word	0x20004a0c
 8005ed8:	20004a14 	.word	0x20004a14
 8005edc:	20004a1c 	.word	0x20004a1c
 8005ee0:	20004a18 	.word	0x20004a18
 8005ee4:	20004a20 	.word	0x20004a20

08005ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ef0:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <prvInsertBlockIntoFreeList+0xac>)
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	e002      	b.n	8005efc <prvInsertBlockIntoFreeList+0x14>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d8f7      	bhi.n	8005ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4413      	add	r3, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d108      	bne.n	8005f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	441a      	add	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	441a      	add	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d118      	bne.n	8005f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <prvInsertBlockIntoFreeList+0xb0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d00d      	beq.n	8005f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e008      	b.n	8005f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <prvInsertBlockIntoFreeList+0xb0>)
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e003      	b.n	8005f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d002      	beq.n	8005f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20004a0c 	.word	0x20004a0c
 8005f98:	20004a14 	.word	0x20004a14

08005f9c <__errno>:
 8005f9c:	4b01      	ldr	r3, [pc, #4]	; (8005fa4 <__errno+0x8>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000094 	.word	0x20000094

08005fa8 <__libc_init_array>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	4e0d      	ldr	r6, [pc, #52]	; (8005fe0 <__libc_init_array+0x38>)
 8005fac:	4c0d      	ldr	r4, [pc, #52]	; (8005fe4 <__libc_init_array+0x3c>)
 8005fae:	1ba4      	subs	r4, r4, r6
 8005fb0:	10a4      	asrs	r4, r4, #2
 8005fb2:	2500      	movs	r5, #0
 8005fb4:	42a5      	cmp	r5, r4
 8005fb6:	d109      	bne.n	8005fcc <__libc_init_array+0x24>
 8005fb8:	4e0b      	ldr	r6, [pc, #44]	; (8005fe8 <__libc_init_array+0x40>)
 8005fba:	4c0c      	ldr	r4, [pc, #48]	; (8005fec <__libc_init_array+0x44>)
 8005fbc:	f001 f92e 	bl	800721c <_init>
 8005fc0:	1ba4      	subs	r4, r4, r6
 8005fc2:	10a4      	asrs	r4, r4, #2
 8005fc4:	2500      	movs	r5, #0
 8005fc6:	42a5      	cmp	r5, r4
 8005fc8:	d105      	bne.n	8005fd6 <__libc_init_array+0x2e>
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fd0:	4798      	blx	r3
 8005fd2:	3501      	adds	r5, #1
 8005fd4:	e7ee      	b.n	8005fb4 <__libc_init_array+0xc>
 8005fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fda:	4798      	blx	r3
 8005fdc:	3501      	adds	r5, #1
 8005fde:	e7f2      	b.n	8005fc6 <__libc_init_array+0x1e>
 8005fe0:	08007394 	.word	0x08007394
 8005fe4:	08007394 	.word	0x08007394
 8005fe8:	08007394 	.word	0x08007394
 8005fec:	08007398 	.word	0x08007398

08005ff0 <memcpy>:
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	1e43      	subs	r3, r0, #1
 8005ff4:	440a      	add	r2, r1
 8005ff6:	4291      	cmp	r1, r2
 8005ff8:	d100      	bne.n	8005ffc <memcpy+0xc>
 8005ffa:	bd10      	pop	{r4, pc}
 8005ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006004:	e7f7      	b.n	8005ff6 <memcpy+0x6>

08006006 <memset>:
 8006006:	4402      	add	r2, r0
 8006008:	4603      	mov	r3, r0
 800600a:	4293      	cmp	r3, r2
 800600c:	d100      	bne.n	8006010 <memset+0xa>
 800600e:	4770      	bx	lr
 8006010:	f803 1b01 	strb.w	r1, [r3], #1
 8006014:	e7f9      	b.n	800600a <memset+0x4>
	...

08006018 <iprintf>:
 8006018:	b40f      	push	{r0, r1, r2, r3}
 800601a:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <iprintf+0x2c>)
 800601c:	b513      	push	{r0, r1, r4, lr}
 800601e:	681c      	ldr	r4, [r3, #0]
 8006020:	b124      	cbz	r4, 800602c <iprintf+0x14>
 8006022:	69a3      	ldr	r3, [r4, #24]
 8006024:	b913      	cbnz	r3, 800602c <iprintf+0x14>
 8006026:	4620      	mov	r0, r4
 8006028:	f000 fa42 	bl	80064b0 <__sinit>
 800602c:	ab05      	add	r3, sp, #20
 800602e:	9a04      	ldr	r2, [sp, #16]
 8006030:	68a1      	ldr	r1, [r4, #8]
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	4620      	mov	r0, r4
 8006036:	f000 fd4d 	bl	8006ad4 <_vfiprintf_r>
 800603a:	b002      	add	sp, #8
 800603c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006040:	b004      	add	sp, #16
 8006042:	4770      	bx	lr
 8006044:	20000094 	.word	0x20000094

08006048 <_puts_r>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	460e      	mov	r6, r1
 800604c:	4605      	mov	r5, r0
 800604e:	b118      	cbz	r0, 8006058 <_puts_r+0x10>
 8006050:	6983      	ldr	r3, [r0, #24]
 8006052:	b90b      	cbnz	r3, 8006058 <_puts_r+0x10>
 8006054:	f000 fa2c 	bl	80064b0 <__sinit>
 8006058:	69ab      	ldr	r3, [r5, #24]
 800605a:	68ac      	ldr	r4, [r5, #8]
 800605c:	b913      	cbnz	r3, 8006064 <_puts_r+0x1c>
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fa26 	bl	80064b0 <__sinit>
 8006064:	4b23      	ldr	r3, [pc, #140]	; (80060f4 <_puts_r+0xac>)
 8006066:	429c      	cmp	r4, r3
 8006068:	d117      	bne.n	800609a <_puts_r+0x52>
 800606a:	686c      	ldr	r4, [r5, #4]
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	071b      	lsls	r3, r3, #28
 8006070:	d51d      	bpl.n	80060ae <_puts_r+0x66>
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	b1db      	cbz	r3, 80060ae <_puts_r+0x66>
 8006076:	3e01      	subs	r6, #1
 8006078:	68a3      	ldr	r3, [r4, #8]
 800607a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800607e:	3b01      	subs	r3, #1
 8006080:	60a3      	str	r3, [r4, #8]
 8006082:	b9e9      	cbnz	r1, 80060c0 <_puts_r+0x78>
 8006084:	2b00      	cmp	r3, #0
 8006086:	da2e      	bge.n	80060e6 <_puts_r+0x9e>
 8006088:	4622      	mov	r2, r4
 800608a:	210a      	movs	r1, #10
 800608c:	4628      	mov	r0, r5
 800608e:	f000 f85f 	bl	8006150 <__swbuf_r>
 8006092:	3001      	adds	r0, #1
 8006094:	d011      	beq.n	80060ba <_puts_r+0x72>
 8006096:	200a      	movs	r0, #10
 8006098:	e011      	b.n	80060be <_puts_r+0x76>
 800609a:	4b17      	ldr	r3, [pc, #92]	; (80060f8 <_puts_r+0xb0>)
 800609c:	429c      	cmp	r4, r3
 800609e:	d101      	bne.n	80060a4 <_puts_r+0x5c>
 80060a0:	68ac      	ldr	r4, [r5, #8]
 80060a2:	e7e3      	b.n	800606c <_puts_r+0x24>
 80060a4:	4b15      	ldr	r3, [pc, #84]	; (80060fc <_puts_r+0xb4>)
 80060a6:	429c      	cmp	r4, r3
 80060a8:	bf08      	it	eq
 80060aa:	68ec      	ldreq	r4, [r5, #12]
 80060ac:	e7de      	b.n	800606c <_puts_r+0x24>
 80060ae:	4621      	mov	r1, r4
 80060b0:	4628      	mov	r0, r5
 80060b2:	f000 f89f 	bl	80061f4 <__swsetup_r>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d0dd      	beq.n	8006076 <_puts_r+0x2e>
 80060ba:	f04f 30ff 	mov.w	r0, #4294967295
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da04      	bge.n	80060ce <_puts_r+0x86>
 80060c4:	69a2      	ldr	r2, [r4, #24]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	dc06      	bgt.n	80060d8 <_puts_r+0x90>
 80060ca:	290a      	cmp	r1, #10
 80060cc:	d004      	beq.n	80060d8 <_puts_r+0x90>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	7019      	strb	r1, [r3, #0]
 80060d6:	e7cf      	b.n	8006078 <_puts_r+0x30>
 80060d8:	4622      	mov	r2, r4
 80060da:	4628      	mov	r0, r5
 80060dc:	f000 f838 	bl	8006150 <__swbuf_r>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d1c9      	bne.n	8006078 <_puts_r+0x30>
 80060e4:	e7e9      	b.n	80060ba <_puts_r+0x72>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	200a      	movs	r0, #10
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	6022      	str	r2, [r4, #0]
 80060ee:	7018      	strb	r0, [r3, #0]
 80060f0:	e7e5      	b.n	80060be <_puts_r+0x76>
 80060f2:	bf00      	nop
 80060f4:	08007318 	.word	0x08007318
 80060f8:	08007338 	.word	0x08007338
 80060fc:	080072f8 	.word	0x080072f8

08006100 <puts>:
 8006100:	4b02      	ldr	r3, [pc, #8]	; (800610c <puts+0xc>)
 8006102:	4601      	mov	r1, r0
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	f7ff bf9f 	b.w	8006048 <_puts_r>
 800610a:	bf00      	nop
 800610c:	20000094 	.word	0x20000094

08006110 <siprintf>:
 8006110:	b40e      	push	{r1, r2, r3}
 8006112:	b500      	push	{lr}
 8006114:	b09c      	sub	sp, #112	; 0x70
 8006116:	ab1d      	add	r3, sp, #116	; 0x74
 8006118:	9002      	str	r0, [sp, #8]
 800611a:	9006      	str	r0, [sp, #24]
 800611c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006120:	4809      	ldr	r0, [pc, #36]	; (8006148 <siprintf+0x38>)
 8006122:	9107      	str	r1, [sp, #28]
 8006124:	9104      	str	r1, [sp, #16]
 8006126:	4909      	ldr	r1, [pc, #36]	; (800614c <siprintf+0x3c>)
 8006128:	f853 2b04 	ldr.w	r2, [r3], #4
 800612c:	9105      	str	r1, [sp, #20]
 800612e:	6800      	ldr	r0, [r0, #0]
 8006130:	9301      	str	r3, [sp, #4]
 8006132:	a902      	add	r1, sp, #8
 8006134:	f000 fbac 	bl	8006890 <_svfiprintf_r>
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	b01c      	add	sp, #112	; 0x70
 8006140:	f85d eb04 	ldr.w	lr, [sp], #4
 8006144:	b003      	add	sp, #12
 8006146:	4770      	bx	lr
 8006148:	20000094 	.word	0x20000094
 800614c:	ffff0208 	.word	0xffff0208

08006150 <__swbuf_r>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	460e      	mov	r6, r1
 8006154:	4614      	mov	r4, r2
 8006156:	4605      	mov	r5, r0
 8006158:	b118      	cbz	r0, 8006162 <__swbuf_r+0x12>
 800615a:	6983      	ldr	r3, [r0, #24]
 800615c:	b90b      	cbnz	r3, 8006162 <__swbuf_r+0x12>
 800615e:	f000 f9a7 	bl	80064b0 <__sinit>
 8006162:	4b21      	ldr	r3, [pc, #132]	; (80061e8 <__swbuf_r+0x98>)
 8006164:	429c      	cmp	r4, r3
 8006166:	d12a      	bne.n	80061be <__swbuf_r+0x6e>
 8006168:	686c      	ldr	r4, [r5, #4]
 800616a:	69a3      	ldr	r3, [r4, #24]
 800616c:	60a3      	str	r3, [r4, #8]
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	071a      	lsls	r2, r3, #28
 8006172:	d52e      	bpl.n	80061d2 <__swbuf_r+0x82>
 8006174:	6923      	ldr	r3, [r4, #16]
 8006176:	b363      	cbz	r3, 80061d2 <__swbuf_r+0x82>
 8006178:	6923      	ldr	r3, [r4, #16]
 800617a:	6820      	ldr	r0, [r4, #0]
 800617c:	1ac0      	subs	r0, r0, r3
 800617e:	6963      	ldr	r3, [r4, #20]
 8006180:	b2f6      	uxtb	r6, r6
 8006182:	4283      	cmp	r3, r0
 8006184:	4637      	mov	r7, r6
 8006186:	dc04      	bgt.n	8006192 <__swbuf_r+0x42>
 8006188:	4621      	mov	r1, r4
 800618a:	4628      	mov	r0, r5
 800618c:	f000 f926 	bl	80063dc <_fflush_r>
 8006190:	bb28      	cbnz	r0, 80061de <__swbuf_r+0x8e>
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	3b01      	subs	r3, #1
 8006196:	60a3      	str	r3, [r4, #8]
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	6022      	str	r2, [r4, #0]
 800619e:	701e      	strb	r6, [r3, #0]
 80061a0:	6963      	ldr	r3, [r4, #20]
 80061a2:	3001      	adds	r0, #1
 80061a4:	4283      	cmp	r3, r0
 80061a6:	d004      	beq.n	80061b2 <__swbuf_r+0x62>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	07db      	lsls	r3, r3, #31
 80061ac:	d519      	bpl.n	80061e2 <__swbuf_r+0x92>
 80061ae:	2e0a      	cmp	r6, #10
 80061b0:	d117      	bne.n	80061e2 <__swbuf_r+0x92>
 80061b2:	4621      	mov	r1, r4
 80061b4:	4628      	mov	r0, r5
 80061b6:	f000 f911 	bl	80063dc <_fflush_r>
 80061ba:	b190      	cbz	r0, 80061e2 <__swbuf_r+0x92>
 80061bc:	e00f      	b.n	80061de <__swbuf_r+0x8e>
 80061be:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <__swbuf_r+0x9c>)
 80061c0:	429c      	cmp	r4, r3
 80061c2:	d101      	bne.n	80061c8 <__swbuf_r+0x78>
 80061c4:	68ac      	ldr	r4, [r5, #8]
 80061c6:	e7d0      	b.n	800616a <__swbuf_r+0x1a>
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <__swbuf_r+0xa0>)
 80061ca:	429c      	cmp	r4, r3
 80061cc:	bf08      	it	eq
 80061ce:	68ec      	ldreq	r4, [r5, #12]
 80061d0:	e7cb      	b.n	800616a <__swbuf_r+0x1a>
 80061d2:	4621      	mov	r1, r4
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 f80d 	bl	80061f4 <__swsetup_r>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d0cc      	beq.n	8006178 <__swbuf_r+0x28>
 80061de:	f04f 37ff 	mov.w	r7, #4294967295
 80061e2:	4638      	mov	r0, r7
 80061e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e6:	bf00      	nop
 80061e8:	08007318 	.word	0x08007318
 80061ec:	08007338 	.word	0x08007338
 80061f0:	080072f8 	.word	0x080072f8

080061f4 <__swsetup_r>:
 80061f4:	4b32      	ldr	r3, [pc, #200]	; (80062c0 <__swsetup_r+0xcc>)
 80061f6:	b570      	push	{r4, r5, r6, lr}
 80061f8:	681d      	ldr	r5, [r3, #0]
 80061fa:	4606      	mov	r6, r0
 80061fc:	460c      	mov	r4, r1
 80061fe:	b125      	cbz	r5, 800620a <__swsetup_r+0x16>
 8006200:	69ab      	ldr	r3, [r5, #24]
 8006202:	b913      	cbnz	r3, 800620a <__swsetup_r+0x16>
 8006204:	4628      	mov	r0, r5
 8006206:	f000 f953 	bl	80064b0 <__sinit>
 800620a:	4b2e      	ldr	r3, [pc, #184]	; (80062c4 <__swsetup_r+0xd0>)
 800620c:	429c      	cmp	r4, r3
 800620e:	d10f      	bne.n	8006230 <__swsetup_r+0x3c>
 8006210:	686c      	ldr	r4, [r5, #4]
 8006212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006216:	b29a      	uxth	r2, r3
 8006218:	0715      	lsls	r5, r2, #28
 800621a:	d42c      	bmi.n	8006276 <__swsetup_r+0x82>
 800621c:	06d0      	lsls	r0, r2, #27
 800621e:	d411      	bmi.n	8006244 <__swsetup_r+0x50>
 8006220:	2209      	movs	r2, #9
 8006222:	6032      	str	r2, [r6, #0]
 8006224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	f04f 30ff 	mov.w	r0, #4294967295
 800622e:	e03e      	b.n	80062ae <__swsetup_r+0xba>
 8006230:	4b25      	ldr	r3, [pc, #148]	; (80062c8 <__swsetup_r+0xd4>)
 8006232:	429c      	cmp	r4, r3
 8006234:	d101      	bne.n	800623a <__swsetup_r+0x46>
 8006236:	68ac      	ldr	r4, [r5, #8]
 8006238:	e7eb      	b.n	8006212 <__swsetup_r+0x1e>
 800623a:	4b24      	ldr	r3, [pc, #144]	; (80062cc <__swsetup_r+0xd8>)
 800623c:	429c      	cmp	r4, r3
 800623e:	bf08      	it	eq
 8006240:	68ec      	ldreq	r4, [r5, #12]
 8006242:	e7e6      	b.n	8006212 <__swsetup_r+0x1e>
 8006244:	0751      	lsls	r1, r2, #29
 8006246:	d512      	bpl.n	800626e <__swsetup_r+0x7a>
 8006248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800624a:	b141      	cbz	r1, 800625e <__swsetup_r+0x6a>
 800624c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006250:	4299      	cmp	r1, r3
 8006252:	d002      	beq.n	800625a <__swsetup_r+0x66>
 8006254:	4630      	mov	r0, r6
 8006256:	f000 fa19 	bl	800668c <_free_r>
 800625a:	2300      	movs	r3, #0
 800625c:	6363      	str	r3, [r4, #52]	; 0x34
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006264:	81a3      	strh	r3, [r4, #12]
 8006266:	2300      	movs	r3, #0
 8006268:	6063      	str	r3, [r4, #4]
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	f043 0308 	orr.w	r3, r3, #8
 8006274:	81a3      	strh	r3, [r4, #12]
 8006276:	6923      	ldr	r3, [r4, #16]
 8006278:	b94b      	cbnz	r3, 800628e <__swsetup_r+0x9a>
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006284:	d003      	beq.n	800628e <__swsetup_r+0x9a>
 8006286:	4621      	mov	r1, r4
 8006288:	4630      	mov	r0, r6
 800628a:	f000 f9bf 	bl	800660c <__smakebuf_r>
 800628e:	89a2      	ldrh	r2, [r4, #12]
 8006290:	f012 0301 	ands.w	r3, r2, #1
 8006294:	d00c      	beq.n	80062b0 <__swsetup_r+0xbc>
 8006296:	2300      	movs	r3, #0
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	6963      	ldr	r3, [r4, #20]
 800629c:	425b      	negs	r3, r3
 800629e:	61a3      	str	r3, [r4, #24]
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	b953      	cbnz	r3, 80062ba <__swsetup_r+0xc6>
 80062a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80062ac:	d1ba      	bne.n	8006224 <__swsetup_r+0x30>
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	0792      	lsls	r2, r2, #30
 80062b2:	bf58      	it	pl
 80062b4:	6963      	ldrpl	r3, [r4, #20]
 80062b6:	60a3      	str	r3, [r4, #8]
 80062b8:	e7f2      	b.n	80062a0 <__swsetup_r+0xac>
 80062ba:	2000      	movs	r0, #0
 80062bc:	e7f7      	b.n	80062ae <__swsetup_r+0xba>
 80062be:	bf00      	nop
 80062c0:	20000094 	.word	0x20000094
 80062c4:	08007318 	.word	0x08007318
 80062c8:	08007338 	.word	0x08007338
 80062cc:	080072f8 	.word	0x080072f8

080062d0 <__sflush_r>:
 80062d0:	898a      	ldrh	r2, [r1, #12]
 80062d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d6:	4605      	mov	r5, r0
 80062d8:	0710      	lsls	r0, r2, #28
 80062da:	460c      	mov	r4, r1
 80062dc:	d458      	bmi.n	8006390 <__sflush_r+0xc0>
 80062de:	684b      	ldr	r3, [r1, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dc05      	bgt.n	80062f0 <__sflush_r+0x20>
 80062e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	dc02      	bgt.n	80062f0 <__sflush_r+0x20>
 80062ea:	2000      	movs	r0, #0
 80062ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	d0f9      	beq.n	80062ea <__sflush_r+0x1a>
 80062f6:	2300      	movs	r3, #0
 80062f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062fc:	682f      	ldr	r7, [r5, #0]
 80062fe:	6a21      	ldr	r1, [r4, #32]
 8006300:	602b      	str	r3, [r5, #0]
 8006302:	d032      	beq.n	800636a <__sflush_r+0x9a>
 8006304:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	075a      	lsls	r2, r3, #29
 800630a:	d505      	bpl.n	8006318 <__sflush_r+0x48>
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	1ac0      	subs	r0, r0, r3
 8006310:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006312:	b10b      	cbz	r3, 8006318 <__sflush_r+0x48>
 8006314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006316:	1ac0      	subs	r0, r0, r3
 8006318:	2300      	movs	r3, #0
 800631a:	4602      	mov	r2, r0
 800631c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800631e:	6a21      	ldr	r1, [r4, #32]
 8006320:	4628      	mov	r0, r5
 8006322:	47b0      	blx	r6
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	d106      	bne.n	8006338 <__sflush_r+0x68>
 800632a:	6829      	ldr	r1, [r5, #0]
 800632c:	291d      	cmp	r1, #29
 800632e:	d848      	bhi.n	80063c2 <__sflush_r+0xf2>
 8006330:	4a29      	ldr	r2, [pc, #164]	; (80063d8 <__sflush_r+0x108>)
 8006332:	40ca      	lsrs	r2, r1
 8006334:	07d6      	lsls	r6, r2, #31
 8006336:	d544      	bpl.n	80063c2 <__sflush_r+0xf2>
 8006338:	2200      	movs	r2, #0
 800633a:	6062      	str	r2, [r4, #4]
 800633c:	04d9      	lsls	r1, r3, #19
 800633e:	6922      	ldr	r2, [r4, #16]
 8006340:	6022      	str	r2, [r4, #0]
 8006342:	d504      	bpl.n	800634e <__sflush_r+0x7e>
 8006344:	1c42      	adds	r2, r0, #1
 8006346:	d101      	bne.n	800634c <__sflush_r+0x7c>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b903      	cbnz	r3, 800634e <__sflush_r+0x7e>
 800634c:	6560      	str	r0, [r4, #84]	; 0x54
 800634e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006350:	602f      	str	r7, [r5, #0]
 8006352:	2900      	cmp	r1, #0
 8006354:	d0c9      	beq.n	80062ea <__sflush_r+0x1a>
 8006356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800635a:	4299      	cmp	r1, r3
 800635c:	d002      	beq.n	8006364 <__sflush_r+0x94>
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f994 	bl	800668c <_free_r>
 8006364:	2000      	movs	r0, #0
 8006366:	6360      	str	r0, [r4, #52]	; 0x34
 8006368:	e7c0      	b.n	80062ec <__sflush_r+0x1c>
 800636a:	2301      	movs	r3, #1
 800636c:	4628      	mov	r0, r5
 800636e:	47b0      	blx	r6
 8006370:	1c41      	adds	r1, r0, #1
 8006372:	d1c8      	bne.n	8006306 <__sflush_r+0x36>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0c5      	beq.n	8006306 <__sflush_r+0x36>
 800637a:	2b1d      	cmp	r3, #29
 800637c:	d001      	beq.n	8006382 <__sflush_r+0xb2>
 800637e:	2b16      	cmp	r3, #22
 8006380:	d101      	bne.n	8006386 <__sflush_r+0xb6>
 8006382:	602f      	str	r7, [r5, #0]
 8006384:	e7b1      	b.n	80062ea <__sflush_r+0x1a>
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	e7ad      	b.n	80062ec <__sflush_r+0x1c>
 8006390:	690f      	ldr	r7, [r1, #16]
 8006392:	2f00      	cmp	r7, #0
 8006394:	d0a9      	beq.n	80062ea <__sflush_r+0x1a>
 8006396:	0793      	lsls	r3, r2, #30
 8006398:	680e      	ldr	r6, [r1, #0]
 800639a:	bf08      	it	eq
 800639c:	694b      	ldreq	r3, [r1, #20]
 800639e:	600f      	str	r7, [r1, #0]
 80063a0:	bf18      	it	ne
 80063a2:	2300      	movne	r3, #0
 80063a4:	eba6 0807 	sub.w	r8, r6, r7
 80063a8:	608b      	str	r3, [r1, #8]
 80063aa:	f1b8 0f00 	cmp.w	r8, #0
 80063ae:	dd9c      	ble.n	80062ea <__sflush_r+0x1a>
 80063b0:	4643      	mov	r3, r8
 80063b2:	463a      	mov	r2, r7
 80063b4:	6a21      	ldr	r1, [r4, #32]
 80063b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063b8:	4628      	mov	r0, r5
 80063ba:	47b0      	blx	r6
 80063bc:	2800      	cmp	r0, #0
 80063be:	dc06      	bgt.n	80063ce <__sflush_r+0xfe>
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	e78e      	b.n	80062ec <__sflush_r+0x1c>
 80063ce:	4407      	add	r7, r0
 80063d0:	eba8 0800 	sub.w	r8, r8, r0
 80063d4:	e7e9      	b.n	80063aa <__sflush_r+0xda>
 80063d6:	bf00      	nop
 80063d8:	20400001 	.word	0x20400001

080063dc <_fflush_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	690b      	ldr	r3, [r1, #16]
 80063e0:	4605      	mov	r5, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	b1db      	cbz	r3, 800641e <_fflush_r+0x42>
 80063e6:	b118      	cbz	r0, 80063f0 <_fflush_r+0x14>
 80063e8:	6983      	ldr	r3, [r0, #24]
 80063ea:	b90b      	cbnz	r3, 80063f0 <_fflush_r+0x14>
 80063ec:	f000 f860 	bl	80064b0 <__sinit>
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <_fflush_r+0x48>)
 80063f2:	429c      	cmp	r4, r3
 80063f4:	d109      	bne.n	800640a <_fflush_r+0x2e>
 80063f6:	686c      	ldr	r4, [r5, #4]
 80063f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fc:	b17b      	cbz	r3, 800641e <_fflush_r+0x42>
 80063fe:	4621      	mov	r1, r4
 8006400:	4628      	mov	r0, r5
 8006402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006406:	f7ff bf63 	b.w	80062d0 <__sflush_r>
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <_fflush_r+0x4c>)
 800640c:	429c      	cmp	r4, r3
 800640e:	d101      	bne.n	8006414 <_fflush_r+0x38>
 8006410:	68ac      	ldr	r4, [r5, #8]
 8006412:	e7f1      	b.n	80063f8 <_fflush_r+0x1c>
 8006414:	4b05      	ldr	r3, [pc, #20]	; (800642c <_fflush_r+0x50>)
 8006416:	429c      	cmp	r4, r3
 8006418:	bf08      	it	eq
 800641a:	68ec      	ldreq	r4, [r5, #12]
 800641c:	e7ec      	b.n	80063f8 <_fflush_r+0x1c>
 800641e:	2000      	movs	r0, #0
 8006420:	bd38      	pop	{r3, r4, r5, pc}
 8006422:	bf00      	nop
 8006424:	08007318 	.word	0x08007318
 8006428:	08007338 	.word	0x08007338
 800642c:	080072f8 	.word	0x080072f8

08006430 <std>:
 8006430:	2300      	movs	r3, #0
 8006432:	b510      	push	{r4, lr}
 8006434:	4604      	mov	r4, r0
 8006436:	e9c0 3300 	strd	r3, r3, [r0]
 800643a:	6083      	str	r3, [r0, #8]
 800643c:	8181      	strh	r1, [r0, #12]
 800643e:	6643      	str	r3, [r0, #100]	; 0x64
 8006440:	81c2      	strh	r2, [r0, #14]
 8006442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006446:	6183      	str	r3, [r0, #24]
 8006448:	4619      	mov	r1, r3
 800644a:	2208      	movs	r2, #8
 800644c:	305c      	adds	r0, #92	; 0x5c
 800644e:	f7ff fdda 	bl	8006006 <memset>
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <std+0x38>)
 8006454:	6263      	str	r3, [r4, #36]	; 0x24
 8006456:	4b05      	ldr	r3, [pc, #20]	; (800646c <std+0x3c>)
 8006458:	62a3      	str	r3, [r4, #40]	; 0x28
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <std+0x40>)
 800645c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <std+0x44>)
 8006460:	6224      	str	r4, [r4, #32]
 8006462:	6323      	str	r3, [r4, #48]	; 0x30
 8006464:	bd10      	pop	{r4, pc}
 8006466:	bf00      	nop
 8006468:	08007031 	.word	0x08007031
 800646c:	08007053 	.word	0x08007053
 8006470:	0800708b 	.word	0x0800708b
 8006474:	080070af 	.word	0x080070af

08006478 <_cleanup_r>:
 8006478:	4901      	ldr	r1, [pc, #4]	; (8006480 <_cleanup_r+0x8>)
 800647a:	f000 b885 	b.w	8006588 <_fwalk_reent>
 800647e:	bf00      	nop
 8006480:	080063dd 	.word	0x080063dd

08006484 <__sfmoreglue>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	1e4a      	subs	r2, r1, #1
 8006488:	2568      	movs	r5, #104	; 0x68
 800648a:	4355      	muls	r5, r2
 800648c:	460e      	mov	r6, r1
 800648e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006492:	f000 f949 	bl	8006728 <_malloc_r>
 8006496:	4604      	mov	r4, r0
 8006498:	b140      	cbz	r0, 80064ac <__sfmoreglue+0x28>
 800649a:	2100      	movs	r1, #0
 800649c:	e9c0 1600 	strd	r1, r6, [r0]
 80064a0:	300c      	adds	r0, #12
 80064a2:	60a0      	str	r0, [r4, #8]
 80064a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064a8:	f7ff fdad 	bl	8006006 <memset>
 80064ac:	4620      	mov	r0, r4
 80064ae:	bd70      	pop	{r4, r5, r6, pc}

080064b0 <__sinit>:
 80064b0:	6983      	ldr	r3, [r0, #24]
 80064b2:	b510      	push	{r4, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	bb33      	cbnz	r3, 8006506 <__sinit+0x56>
 80064b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80064bc:	6503      	str	r3, [r0, #80]	; 0x50
 80064be:	4b12      	ldr	r3, [pc, #72]	; (8006508 <__sinit+0x58>)
 80064c0:	4a12      	ldr	r2, [pc, #72]	; (800650c <__sinit+0x5c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6282      	str	r2, [r0, #40]	; 0x28
 80064c6:	4298      	cmp	r0, r3
 80064c8:	bf04      	itt	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	6183      	streq	r3, [r0, #24]
 80064ce:	f000 f81f 	bl	8006510 <__sfp>
 80064d2:	6060      	str	r0, [r4, #4]
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 f81b 	bl	8006510 <__sfp>
 80064da:	60a0      	str	r0, [r4, #8]
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 f817 	bl	8006510 <__sfp>
 80064e2:	2200      	movs	r2, #0
 80064e4:	60e0      	str	r0, [r4, #12]
 80064e6:	2104      	movs	r1, #4
 80064e8:	6860      	ldr	r0, [r4, #4]
 80064ea:	f7ff ffa1 	bl	8006430 <std>
 80064ee:	2201      	movs	r2, #1
 80064f0:	2109      	movs	r1, #9
 80064f2:	68a0      	ldr	r0, [r4, #8]
 80064f4:	f7ff ff9c 	bl	8006430 <std>
 80064f8:	2202      	movs	r2, #2
 80064fa:	2112      	movs	r1, #18
 80064fc:	68e0      	ldr	r0, [r4, #12]
 80064fe:	f7ff ff97 	bl	8006430 <std>
 8006502:	2301      	movs	r3, #1
 8006504:	61a3      	str	r3, [r4, #24]
 8006506:	bd10      	pop	{r4, pc}
 8006508:	080072f4 	.word	0x080072f4
 800650c:	08006479 	.word	0x08006479

08006510 <__sfp>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <__sfp+0x70>)
 8006514:	681e      	ldr	r6, [r3, #0]
 8006516:	69b3      	ldr	r3, [r6, #24]
 8006518:	4607      	mov	r7, r0
 800651a:	b913      	cbnz	r3, 8006522 <__sfp+0x12>
 800651c:	4630      	mov	r0, r6
 800651e:	f7ff ffc7 	bl	80064b0 <__sinit>
 8006522:	3648      	adds	r6, #72	; 0x48
 8006524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006528:	3b01      	subs	r3, #1
 800652a:	d503      	bpl.n	8006534 <__sfp+0x24>
 800652c:	6833      	ldr	r3, [r6, #0]
 800652e:	b133      	cbz	r3, 800653e <__sfp+0x2e>
 8006530:	6836      	ldr	r6, [r6, #0]
 8006532:	e7f7      	b.n	8006524 <__sfp+0x14>
 8006534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006538:	b16d      	cbz	r5, 8006556 <__sfp+0x46>
 800653a:	3468      	adds	r4, #104	; 0x68
 800653c:	e7f4      	b.n	8006528 <__sfp+0x18>
 800653e:	2104      	movs	r1, #4
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ff9f 	bl	8006484 <__sfmoreglue>
 8006546:	6030      	str	r0, [r6, #0]
 8006548:	2800      	cmp	r0, #0
 800654a:	d1f1      	bne.n	8006530 <__sfp+0x20>
 800654c:	230c      	movs	r3, #12
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	4604      	mov	r4, r0
 8006552:	4620      	mov	r0, r4
 8006554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006556:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <__sfp+0x74>)
 8006558:	6665      	str	r5, [r4, #100]	; 0x64
 800655a:	e9c4 5500 	strd	r5, r5, [r4]
 800655e:	60a5      	str	r5, [r4, #8]
 8006560:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006564:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006568:	2208      	movs	r2, #8
 800656a:	4629      	mov	r1, r5
 800656c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006570:	f7ff fd49 	bl	8006006 <memset>
 8006574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800657c:	e7e9      	b.n	8006552 <__sfp+0x42>
 800657e:	bf00      	nop
 8006580:	080072f4 	.word	0x080072f4
 8006584:	ffff0001 	.word	0xffff0001

08006588 <_fwalk_reent>:
 8006588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800658c:	4680      	mov	r8, r0
 800658e:	4689      	mov	r9, r1
 8006590:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006594:	2600      	movs	r6, #0
 8006596:	b914      	cbnz	r4, 800659e <_fwalk_reent+0x16>
 8006598:	4630      	mov	r0, r6
 800659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80065a2:	3f01      	subs	r7, #1
 80065a4:	d501      	bpl.n	80065aa <_fwalk_reent+0x22>
 80065a6:	6824      	ldr	r4, [r4, #0]
 80065a8:	e7f5      	b.n	8006596 <_fwalk_reent+0xe>
 80065aa:	89ab      	ldrh	r3, [r5, #12]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d907      	bls.n	80065c0 <_fwalk_reent+0x38>
 80065b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065b4:	3301      	adds	r3, #1
 80065b6:	d003      	beq.n	80065c0 <_fwalk_reent+0x38>
 80065b8:	4629      	mov	r1, r5
 80065ba:	4640      	mov	r0, r8
 80065bc:	47c8      	blx	r9
 80065be:	4306      	orrs	r6, r0
 80065c0:	3568      	adds	r5, #104	; 0x68
 80065c2:	e7ee      	b.n	80065a2 <_fwalk_reent+0x1a>

080065c4 <__swhatbuf_r>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	460e      	mov	r6, r1
 80065c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065cc:	2900      	cmp	r1, #0
 80065ce:	b096      	sub	sp, #88	; 0x58
 80065d0:	4614      	mov	r4, r2
 80065d2:	461d      	mov	r5, r3
 80065d4:	da07      	bge.n	80065e6 <__swhatbuf_r+0x22>
 80065d6:	2300      	movs	r3, #0
 80065d8:	602b      	str	r3, [r5, #0]
 80065da:	89b3      	ldrh	r3, [r6, #12]
 80065dc:	061a      	lsls	r2, r3, #24
 80065de:	d410      	bmi.n	8006602 <__swhatbuf_r+0x3e>
 80065e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065e4:	e00e      	b.n	8006604 <__swhatbuf_r+0x40>
 80065e6:	466a      	mov	r2, sp
 80065e8:	f000 fd88 	bl	80070fc <_fstat_r>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	dbf2      	blt.n	80065d6 <__swhatbuf_r+0x12>
 80065f0:	9a01      	ldr	r2, [sp, #4]
 80065f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065fa:	425a      	negs	r2, r3
 80065fc:	415a      	adcs	r2, r3
 80065fe:	602a      	str	r2, [r5, #0]
 8006600:	e7ee      	b.n	80065e0 <__swhatbuf_r+0x1c>
 8006602:	2340      	movs	r3, #64	; 0x40
 8006604:	2000      	movs	r0, #0
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	b016      	add	sp, #88	; 0x58
 800660a:	bd70      	pop	{r4, r5, r6, pc}

0800660c <__smakebuf_r>:
 800660c:	898b      	ldrh	r3, [r1, #12]
 800660e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006610:	079d      	lsls	r5, r3, #30
 8006612:	4606      	mov	r6, r0
 8006614:	460c      	mov	r4, r1
 8006616:	d507      	bpl.n	8006628 <__smakebuf_r+0x1c>
 8006618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	6123      	str	r3, [r4, #16]
 8006620:	2301      	movs	r3, #1
 8006622:	6163      	str	r3, [r4, #20]
 8006624:	b002      	add	sp, #8
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	ab01      	add	r3, sp, #4
 800662a:	466a      	mov	r2, sp
 800662c:	f7ff ffca 	bl	80065c4 <__swhatbuf_r>
 8006630:	9900      	ldr	r1, [sp, #0]
 8006632:	4605      	mov	r5, r0
 8006634:	4630      	mov	r0, r6
 8006636:	f000 f877 	bl	8006728 <_malloc_r>
 800663a:	b948      	cbnz	r0, 8006650 <__smakebuf_r+0x44>
 800663c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006640:	059a      	lsls	r2, r3, #22
 8006642:	d4ef      	bmi.n	8006624 <__smakebuf_r+0x18>
 8006644:	f023 0303 	bic.w	r3, r3, #3
 8006648:	f043 0302 	orr.w	r3, r3, #2
 800664c:	81a3      	strh	r3, [r4, #12]
 800664e:	e7e3      	b.n	8006618 <__smakebuf_r+0xc>
 8006650:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <__smakebuf_r+0x7c>)
 8006652:	62b3      	str	r3, [r6, #40]	; 0x28
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	6020      	str	r0, [r4, #0]
 8006658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665c:	81a3      	strh	r3, [r4, #12]
 800665e:	9b00      	ldr	r3, [sp, #0]
 8006660:	6163      	str	r3, [r4, #20]
 8006662:	9b01      	ldr	r3, [sp, #4]
 8006664:	6120      	str	r0, [r4, #16]
 8006666:	b15b      	cbz	r3, 8006680 <__smakebuf_r+0x74>
 8006668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800666c:	4630      	mov	r0, r6
 800666e:	f000 fd57 	bl	8007120 <_isatty_r>
 8006672:	b128      	cbz	r0, 8006680 <__smakebuf_r+0x74>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	431d      	orrs	r5, r3
 8006684:	81a5      	strh	r5, [r4, #12]
 8006686:	e7cd      	b.n	8006624 <__smakebuf_r+0x18>
 8006688:	08006479 	.word	0x08006479

0800668c <_free_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	4605      	mov	r5, r0
 8006690:	2900      	cmp	r1, #0
 8006692:	d045      	beq.n	8006720 <_free_r+0x94>
 8006694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006698:	1f0c      	subs	r4, r1, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	bfb8      	it	lt
 800669e:	18e4      	addlt	r4, r4, r3
 80066a0:	f000 fd79 	bl	8007196 <__malloc_lock>
 80066a4:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <_free_r+0x98>)
 80066a6:	6813      	ldr	r3, [r2, #0]
 80066a8:	4610      	mov	r0, r2
 80066aa:	b933      	cbnz	r3, 80066ba <_free_r+0x2e>
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	6014      	str	r4, [r2, #0]
 80066b0:	4628      	mov	r0, r5
 80066b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066b6:	f000 bd6f 	b.w	8007198 <__malloc_unlock>
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	d90c      	bls.n	80066d8 <_free_r+0x4c>
 80066be:	6821      	ldr	r1, [r4, #0]
 80066c0:	1862      	adds	r2, r4, r1
 80066c2:	4293      	cmp	r3, r2
 80066c4:	bf04      	itt	eq
 80066c6:	681a      	ldreq	r2, [r3, #0]
 80066c8:	685b      	ldreq	r3, [r3, #4]
 80066ca:	6063      	str	r3, [r4, #4]
 80066cc:	bf04      	itt	eq
 80066ce:	1852      	addeq	r2, r2, r1
 80066d0:	6022      	streq	r2, [r4, #0]
 80066d2:	6004      	str	r4, [r0, #0]
 80066d4:	e7ec      	b.n	80066b0 <_free_r+0x24>
 80066d6:	4613      	mov	r3, r2
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	b10a      	cbz	r2, 80066e0 <_free_r+0x54>
 80066dc:	42a2      	cmp	r2, r4
 80066de:	d9fa      	bls.n	80066d6 <_free_r+0x4a>
 80066e0:	6819      	ldr	r1, [r3, #0]
 80066e2:	1858      	adds	r0, r3, r1
 80066e4:	42a0      	cmp	r0, r4
 80066e6:	d10b      	bne.n	8006700 <_free_r+0x74>
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	4401      	add	r1, r0
 80066ec:	1858      	adds	r0, r3, r1
 80066ee:	4282      	cmp	r2, r0
 80066f0:	6019      	str	r1, [r3, #0]
 80066f2:	d1dd      	bne.n	80066b0 <_free_r+0x24>
 80066f4:	6810      	ldr	r0, [r2, #0]
 80066f6:	6852      	ldr	r2, [r2, #4]
 80066f8:	605a      	str	r2, [r3, #4]
 80066fa:	4401      	add	r1, r0
 80066fc:	6019      	str	r1, [r3, #0]
 80066fe:	e7d7      	b.n	80066b0 <_free_r+0x24>
 8006700:	d902      	bls.n	8006708 <_free_r+0x7c>
 8006702:	230c      	movs	r3, #12
 8006704:	602b      	str	r3, [r5, #0]
 8006706:	e7d3      	b.n	80066b0 <_free_r+0x24>
 8006708:	6820      	ldr	r0, [r4, #0]
 800670a:	1821      	adds	r1, r4, r0
 800670c:	428a      	cmp	r2, r1
 800670e:	bf04      	itt	eq
 8006710:	6811      	ldreq	r1, [r2, #0]
 8006712:	6852      	ldreq	r2, [r2, #4]
 8006714:	6062      	str	r2, [r4, #4]
 8006716:	bf04      	itt	eq
 8006718:	1809      	addeq	r1, r1, r0
 800671a:	6021      	streq	r1, [r4, #0]
 800671c:	605c      	str	r4, [r3, #4]
 800671e:	e7c7      	b.n	80066b0 <_free_r+0x24>
 8006720:	bd38      	pop	{r3, r4, r5, pc}
 8006722:	bf00      	nop
 8006724:	20004a24 	.word	0x20004a24

08006728 <_malloc_r>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	1ccd      	adds	r5, r1, #3
 800672c:	f025 0503 	bic.w	r5, r5, #3
 8006730:	3508      	adds	r5, #8
 8006732:	2d0c      	cmp	r5, #12
 8006734:	bf38      	it	cc
 8006736:	250c      	movcc	r5, #12
 8006738:	2d00      	cmp	r5, #0
 800673a:	4606      	mov	r6, r0
 800673c:	db01      	blt.n	8006742 <_malloc_r+0x1a>
 800673e:	42a9      	cmp	r1, r5
 8006740:	d903      	bls.n	800674a <_malloc_r+0x22>
 8006742:	230c      	movs	r3, #12
 8006744:	6033      	str	r3, [r6, #0]
 8006746:	2000      	movs	r0, #0
 8006748:	bd70      	pop	{r4, r5, r6, pc}
 800674a:	f000 fd24 	bl	8007196 <__malloc_lock>
 800674e:	4a21      	ldr	r2, [pc, #132]	; (80067d4 <_malloc_r+0xac>)
 8006750:	6814      	ldr	r4, [r2, #0]
 8006752:	4621      	mov	r1, r4
 8006754:	b991      	cbnz	r1, 800677c <_malloc_r+0x54>
 8006756:	4c20      	ldr	r4, [pc, #128]	; (80067d8 <_malloc_r+0xb0>)
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	b91b      	cbnz	r3, 8006764 <_malloc_r+0x3c>
 800675c:	4630      	mov	r0, r6
 800675e:	f000 fc57 	bl	8007010 <_sbrk_r>
 8006762:	6020      	str	r0, [r4, #0]
 8006764:	4629      	mov	r1, r5
 8006766:	4630      	mov	r0, r6
 8006768:	f000 fc52 	bl	8007010 <_sbrk_r>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d124      	bne.n	80067ba <_malloc_r+0x92>
 8006770:	230c      	movs	r3, #12
 8006772:	6033      	str	r3, [r6, #0]
 8006774:	4630      	mov	r0, r6
 8006776:	f000 fd0f 	bl	8007198 <__malloc_unlock>
 800677a:	e7e4      	b.n	8006746 <_malloc_r+0x1e>
 800677c:	680b      	ldr	r3, [r1, #0]
 800677e:	1b5b      	subs	r3, r3, r5
 8006780:	d418      	bmi.n	80067b4 <_malloc_r+0x8c>
 8006782:	2b0b      	cmp	r3, #11
 8006784:	d90f      	bls.n	80067a6 <_malloc_r+0x7e>
 8006786:	600b      	str	r3, [r1, #0]
 8006788:	50cd      	str	r5, [r1, r3]
 800678a:	18cc      	adds	r4, r1, r3
 800678c:	4630      	mov	r0, r6
 800678e:	f000 fd03 	bl	8007198 <__malloc_unlock>
 8006792:	f104 000b 	add.w	r0, r4, #11
 8006796:	1d23      	adds	r3, r4, #4
 8006798:	f020 0007 	bic.w	r0, r0, #7
 800679c:	1ac3      	subs	r3, r0, r3
 800679e:	d0d3      	beq.n	8006748 <_malloc_r+0x20>
 80067a0:	425a      	negs	r2, r3
 80067a2:	50e2      	str	r2, [r4, r3]
 80067a4:	e7d0      	b.n	8006748 <_malloc_r+0x20>
 80067a6:	428c      	cmp	r4, r1
 80067a8:	684b      	ldr	r3, [r1, #4]
 80067aa:	bf16      	itet	ne
 80067ac:	6063      	strne	r3, [r4, #4]
 80067ae:	6013      	streq	r3, [r2, #0]
 80067b0:	460c      	movne	r4, r1
 80067b2:	e7eb      	b.n	800678c <_malloc_r+0x64>
 80067b4:	460c      	mov	r4, r1
 80067b6:	6849      	ldr	r1, [r1, #4]
 80067b8:	e7cc      	b.n	8006754 <_malloc_r+0x2c>
 80067ba:	1cc4      	adds	r4, r0, #3
 80067bc:	f024 0403 	bic.w	r4, r4, #3
 80067c0:	42a0      	cmp	r0, r4
 80067c2:	d005      	beq.n	80067d0 <_malloc_r+0xa8>
 80067c4:	1a21      	subs	r1, r4, r0
 80067c6:	4630      	mov	r0, r6
 80067c8:	f000 fc22 	bl	8007010 <_sbrk_r>
 80067cc:	3001      	adds	r0, #1
 80067ce:	d0cf      	beq.n	8006770 <_malloc_r+0x48>
 80067d0:	6025      	str	r5, [r4, #0]
 80067d2:	e7db      	b.n	800678c <_malloc_r+0x64>
 80067d4:	20004a24 	.word	0x20004a24
 80067d8:	20004a28 	.word	0x20004a28

080067dc <__ssputs_r>:
 80067dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	688e      	ldr	r6, [r1, #8]
 80067e2:	429e      	cmp	r6, r3
 80067e4:	4682      	mov	sl, r0
 80067e6:	460c      	mov	r4, r1
 80067e8:	4690      	mov	r8, r2
 80067ea:	4699      	mov	r9, r3
 80067ec:	d837      	bhi.n	800685e <__ssputs_r+0x82>
 80067ee:	898a      	ldrh	r2, [r1, #12]
 80067f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067f4:	d031      	beq.n	800685a <__ssputs_r+0x7e>
 80067f6:	6825      	ldr	r5, [r4, #0]
 80067f8:	6909      	ldr	r1, [r1, #16]
 80067fa:	1a6f      	subs	r7, r5, r1
 80067fc:	6965      	ldr	r5, [r4, #20]
 80067fe:	2302      	movs	r3, #2
 8006800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006804:	fb95 f5f3 	sdiv	r5, r5, r3
 8006808:	f109 0301 	add.w	r3, r9, #1
 800680c:	443b      	add	r3, r7
 800680e:	429d      	cmp	r5, r3
 8006810:	bf38      	it	cc
 8006812:	461d      	movcc	r5, r3
 8006814:	0553      	lsls	r3, r2, #21
 8006816:	d530      	bpl.n	800687a <__ssputs_r+0x9e>
 8006818:	4629      	mov	r1, r5
 800681a:	f7ff ff85 	bl	8006728 <_malloc_r>
 800681e:	4606      	mov	r6, r0
 8006820:	b950      	cbnz	r0, 8006838 <__ssputs_r+0x5c>
 8006822:	230c      	movs	r3, #12
 8006824:	f8ca 3000 	str.w	r3, [sl]
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	f04f 30ff 	mov.w	r0, #4294967295
 8006834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006838:	463a      	mov	r2, r7
 800683a:	6921      	ldr	r1, [r4, #16]
 800683c:	f7ff fbd8 	bl	8005ff0 <memcpy>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	6126      	str	r6, [r4, #16]
 800684e:	6165      	str	r5, [r4, #20]
 8006850:	443e      	add	r6, r7
 8006852:	1bed      	subs	r5, r5, r7
 8006854:	6026      	str	r6, [r4, #0]
 8006856:	60a5      	str	r5, [r4, #8]
 8006858:	464e      	mov	r6, r9
 800685a:	454e      	cmp	r6, r9
 800685c:	d900      	bls.n	8006860 <__ssputs_r+0x84>
 800685e:	464e      	mov	r6, r9
 8006860:	4632      	mov	r2, r6
 8006862:	4641      	mov	r1, r8
 8006864:	6820      	ldr	r0, [r4, #0]
 8006866:	f000 fc7d 	bl	8007164 <memmove>
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	1b9b      	subs	r3, r3, r6
 800686e:	60a3      	str	r3, [r4, #8]
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	441e      	add	r6, r3
 8006874:	6026      	str	r6, [r4, #0]
 8006876:	2000      	movs	r0, #0
 8006878:	e7dc      	b.n	8006834 <__ssputs_r+0x58>
 800687a:	462a      	mov	r2, r5
 800687c:	f000 fc8d 	bl	800719a <_realloc_r>
 8006880:	4606      	mov	r6, r0
 8006882:	2800      	cmp	r0, #0
 8006884:	d1e2      	bne.n	800684c <__ssputs_r+0x70>
 8006886:	6921      	ldr	r1, [r4, #16]
 8006888:	4650      	mov	r0, sl
 800688a:	f7ff feff 	bl	800668c <_free_r>
 800688e:	e7c8      	b.n	8006822 <__ssputs_r+0x46>

08006890 <_svfiprintf_r>:
 8006890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	461d      	mov	r5, r3
 8006896:	898b      	ldrh	r3, [r1, #12]
 8006898:	061f      	lsls	r7, r3, #24
 800689a:	b09d      	sub	sp, #116	; 0x74
 800689c:	4680      	mov	r8, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	4616      	mov	r6, r2
 80068a2:	d50f      	bpl.n	80068c4 <_svfiprintf_r+0x34>
 80068a4:	690b      	ldr	r3, [r1, #16]
 80068a6:	b96b      	cbnz	r3, 80068c4 <_svfiprintf_r+0x34>
 80068a8:	2140      	movs	r1, #64	; 0x40
 80068aa:	f7ff ff3d 	bl	8006728 <_malloc_r>
 80068ae:	6020      	str	r0, [r4, #0]
 80068b0:	6120      	str	r0, [r4, #16]
 80068b2:	b928      	cbnz	r0, 80068c0 <_svfiprintf_r+0x30>
 80068b4:	230c      	movs	r3, #12
 80068b6:	f8c8 3000 	str.w	r3, [r8]
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	e0c8      	b.n	8006a52 <_svfiprintf_r+0x1c2>
 80068c0:	2340      	movs	r3, #64	; 0x40
 80068c2:	6163      	str	r3, [r4, #20]
 80068c4:	2300      	movs	r3, #0
 80068c6:	9309      	str	r3, [sp, #36]	; 0x24
 80068c8:	2320      	movs	r3, #32
 80068ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ce:	2330      	movs	r3, #48	; 0x30
 80068d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d4:	9503      	str	r5, [sp, #12]
 80068d6:	f04f 0b01 	mov.w	fp, #1
 80068da:	4637      	mov	r7, r6
 80068dc:	463d      	mov	r5, r7
 80068de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068e2:	b10b      	cbz	r3, 80068e8 <_svfiprintf_r+0x58>
 80068e4:	2b25      	cmp	r3, #37	; 0x25
 80068e6:	d13e      	bne.n	8006966 <_svfiprintf_r+0xd6>
 80068e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80068ec:	d00b      	beq.n	8006906 <_svfiprintf_r+0x76>
 80068ee:	4653      	mov	r3, sl
 80068f0:	4632      	mov	r2, r6
 80068f2:	4621      	mov	r1, r4
 80068f4:	4640      	mov	r0, r8
 80068f6:	f7ff ff71 	bl	80067dc <__ssputs_r>
 80068fa:	3001      	adds	r0, #1
 80068fc:	f000 80a4 	beq.w	8006a48 <_svfiprintf_r+0x1b8>
 8006900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006902:	4453      	add	r3, sl
 8006904:	9309      	str	r3, [sp, #36]	; 0x24
 8006906:	783b      	ldrb	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 809d 	beq.w	8006a48 <_svfiprintf_r+0x1b8>
 800690e:	2300      	movs	r3, #0
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	9307      	str	r3, [sp, #28]
 800691c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006920:	931a      	str	r3, [sp, #104]	; 0x68
 8006922:	462f      	mov	r7, r5
 8006924:	2205      	movs	r2, #5
 8006926:	f817 1b01 	ldrb.w	r1, [r7], #1
 800692a:	4850      	ldr	r0, [pc, #320]	; (8006a6c <_svfiprintf_r+0x1dc>)
 800692c:	f7f9 fc70 	bl	8000210 <memchr>
 8006930:	9b04      	ldr	r3, [sp, #16]
 8006932:	b9d0      	cbnz	r0, 800696a <_svfiprintf_r+0xda>
 8006934:	06d9      	lsls	r1, r3, #27
 8006936:	bf44      	itt	mi
 8006938:	2220      	movmi	r2, #32
 800693a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800693e:	071a      	lsls	r2, r3, #28
 8006940:	bf44      	itt	mi
 8006942:	222b      	movmi	r2, #43	; 0x2b
 8006944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006948:	782a      	ldrb	r2, [r5, #0]
 800694a:	2a2a      	cmp	r2, #42	; 0x2a
 800694c:	d015      	beq.n	800697a <_svfiprintf_r+0xea>
 800694e:	9a07      	ldr	r2, [sp, #28]
 8006950:	462f      	mov	r7, r5
 8006952:	2000      	movs	r0, #0
 8006954:	250a      	movs	r5, #10
 8006956:	4639      	mov	r1, r7
 8006958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800695c:	3b30      	subs	r3, #48	; 0x30
 800695e:	2b09      	cmp	r3, #9
 8006960:	d94d      	bls.n	80069fe <_svfiprintf_r+0x16e>
 8006962:	b1b8      	cbz	r0, 8006994 <_svfiprintf_r+0x104>
 8006964:	e00f      	b.n	8006986 <_svfiprintf_r+0xf6>
 8006966:	462f      	mov	r7, r5
 8006968:	e7b8      	b.n	80068dc <_svfiprintf_r+0x4c>
 800696a:	4a40      	ldr	r2, [pc, #256]	; (8006a6c <_svfiprintf_r+0x1dc>)
 800696c:	1a80      	subs	r0, r0, r2
 800696e:	fa0b f000 	lsl.w	r0, fp, r0
 8006972:	4318      	orrs	r0, r3
 8006974:	9004      	str	r0, [sp, #16]
 8006976:	463d      	mov	r5, r7
 8006978:	e7d3      	b.n	8006922 <_svfiprintf_r+0x92>
 800697a:	9a03      	ldr	r2, [sp, #12]
 800697c:	1d11      	adds	r1, r2, #4
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	9103      	str	r1, [sp, #12]
 8006982:	2a00      	cmp	r2, #0
 8006984:	db01      	blt.n	800698a <_svfiprintf_r+0xfa>
 8006986:	9207      	str	r2, [sp, #28]
 8006988:	e004      	b.n	8006994 <_svfiprintf_r+0x104>
 800698a:	4252      	negs	r2, r2
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	9207      	str	r2, [sp, #28]
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	783b      	ldrb	r3, [r7, #0]
 8006996:	2b2e      	cmp	r3, #46	; 0x2e
 8006998:	d10c      	bne.n	80069b4 <_svfiprintf_r+0x124>
 800699a:	787b      	ldrb	r3, [r7, #1]
 800699c:	2b2a      	cmp	r3, #42	; 0x2a
 800699e:	d133      	bne.n	8006a08 <_svfiprintf_r+0x178>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	1d1a      	adds	r2, r3, #4
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	9203      	str	r2, [sp, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bfb8      	it	lt
 80069ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80069b0:	3702      	adds	r7, #2
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	4d2e      	ldr	r5, [pc, #184]	; (8006a70 <_svfiprintf_r+0x1e0>)
 80069b6:	7839      	ldrb	r1, [r7, #0]
 80069b8:	2203      	movs	r2, #3
 80069ba:	4628      	mov	r0, r5
 80069bc:	f7f9 fc28 	bl	8000210 <memchr>
 80069c0:	b138      	cbz	r0, 80069d2 <_svfiprintf_r+0x142>
 80069c2:	2340      	movs	r3, #64	; 0x40
 80069c4:	1b40      	subs	r0, r0, r5
 80069c6:	fa03 f000 	lsl.w	r0, r3, r0
 80069ca:	9b04      	ldr	r3, [sp, #16]
 80069cc:	4303      	orrs	r3, r0
 80069ce:	3701      	adds	r7, #1
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	7839      	ldrb	r1, [r7, #0]
 80069d4:	4827      	ldr	r0, [pc, #156]	; (8006a74 <_svfiprintf_r+0x1e4>)
 80069d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069da:	2206      	movs	r2, #6
 80069dc:	1c7e      	adds	r6, r7, #1
 80069de:	f7f9 fc17 	bl	8000210 <memchr>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d038      	beq.n	8006a58 <_svfiprintf_r+0x1c8>
 80069e6:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <_svfiprintf_r+0x1e8>)
 80069e8:	bb13      	cbnz	r3, 8006a30 <_svfiprintf_r+0x1a0>
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	3307      	adds	r3, #7
 80069ee:	f023 0307 	bic.w	r3, r3, #7
 80069f2:	3308      	adds	r3, #8
 80069f4:	9303      	str	r3, [sp, #12]
 80069f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f8:	444b      	add	r3, r9
 80069fa:	9309      	str	r3, [sp, #36]	; 0x24
 80069fc:	e76d      	b.n	80068da <_svfiprintf_r+0x4a>
 80069fe:	fb05 3202 	mla	r2, r5, r2, r3
 8006a02:	2001      	movs	r0, #1
 8006a04:	460f      	mov	r7, r1
 8006a06:	e7a6      	b.n	8006956 <_svfiprintf_r+0xc6>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	3701      	adds	r7, #1
 8006a0c:	9305      	str	r3, [sp, #20]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	250a      	movs	r5, #10
 8006a12:	4638      	mov	r0, r7
 8006a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a18:	3a30      	subs	r2, #48	; 0x30
 8006a1a:	2a09      	cmp	r2, #9
 8006a1c:	d903      	bls.n	8006a26 <_svfiprintf_r+0x196>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0c8      	beq.n	80069b4 <_svfiprintf_r+0x124>
 8006a22:	9105      	str	r1, [sp, #20]
 8006a24:	e7c6      	b.n	80069b4 <_svfiprintf_r+0x124>
 8006a26:	fb05 2101 	mla	r1, r5, r1, r2
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	e7f0      	b.n	8006a12 <_svfiprintf_r+0x182>
 8006a30:	ab03      	add	r3, sp, #12
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	4622      	mov	r2, r4
 8006a36:	4b11      	ldr	r3, [pc, #68]	; (8006a7c <_svfiprintf_r+0x1ec>)
 8006a38:	a904      	add	r1, sp, #16
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	f3af 8000 	nop.w
 8006a40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a44:	4681      	mov	r9, r0
 8006a46:	d1d6      	bne.n	80069f6 <_svfiprintf_r+0x166>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	065b      	lsls	r3, r3, #25
 8006a4c:	f53f af35 	bmi.w	80068ba <_svfiprintf_r+0x2a>
 8006a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a52:	b01d      	add	sp, #116	; 0x74
 8006a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a58:	ab03      	add	r3, sp, #12
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <_svfiprintf_r+0x1ec>)
 8006a60:	a904      	add	r1, sp, #16
 8006a62:	4640      	mov	r0, r8
 8006a64:	f000 f9c2 	bl	8006dec <_printf_i>
 8006a68:	e7ea      	b.n	8006a40 <_svfiprintf_r+0x1b0>
 8006a6a:	bf00      	nop
 8006a6c:	08007358 	.word	0x08007358
 8006a70:	0800735e 	.word	0x0800735e
 8006a74:	08007362 	.word	0x08007362
 8006a78:	00000000 	.word	0x00000000
 8006a7c:	080067dd 	.word	0x080067dd

08006a80 <__sfputc_r>:
 8006a80:	6893      	ldr	r3, [r2, #8]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	b410      	push	{r4}
 8006a88:	6093      	str	r3, [r2, #8]
 8006a8a:	da08      	bge.n	8006a9e <__sfputc_r+0x1e>
 8006a8c:	6994      	ldr	r4, [r2, #24]
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	db01      	blt.n	8006a96 <__sfputc_r+0x16>
 8006a92:	290a      	cmp	r1, #10
 8006a94:	d103      	bne.n	8006a9e <__sfputc_r+0x1e>
 8006a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9a:	f7ff bb59 	b.w	8006150 <__swbuf_r>
 8006a9e:	6813      	ldr	r3, [r2, #0]
 8006aa0:	1c58      	adds	r0, r3, #1
 8006aa2:	6010      	str	r0, [r2, #0]
 8006aa4:	7019      	strb	r1, [r3, #0]
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <__sfputs_r>:
 8006aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	460f      	mov	r7, r1
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	18d5      	adds	r5, r2, r3
 8006ab8:	42ac      	cmp	r4, r5
 8006aba:	d101      	bne.n	8006ac0 <__sfputs_r+0x12>
 8006abc:	2000      	movs	r0, #0
 8006abe:	e007      	b.n	8006ad0 <__sfputs_r+0x22>
 8006ac0:	463a      	mov	r2, r7
 8006ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f7ff ffda 	bl	8006a80 <__sfputc_r>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d1f3      	bne.n	8006ab8 <__sfputs_r+0xa>
 8006ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ad4 <_vfiprintf_r>:
 8006ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad8:	460c      	mov	r4, r1
 8006ada:	b09d      	sub	sp, #116	; 0x74
 8006adc:	4617      	mov	r7, r2
 8006ade:	461d      	mov	r5, r3
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	b118      	cbz	r0, 8006aec <_vfiprintf_r+0x18>
 8006ae4:	6983      	ldr	r3, [r0, #24]
 8006ae6:	b90b      	cbnz	r3, 8006aec <_vfiprintf_r+0x18>
 8006ae8:	f7ff fce2 	bl	80064b0 <__sinit>
 8006aec:	4b7c      	ldr	r3, [pc, #496]	; (8006ce0 <_vfiprintf_r+0x20c>)
 8006aee:	429c      	cmp	r4, r3
 8006af0:	d158      	bne.n	8006ba4 <_vfiprintf_r+0xd0>
 8006af2:	6874      	ldr	r4, [r6, #4]
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	0718      	lsls	r0, r3, #28
 8006af8:	d55e      	bpl.n	8006bb8 <_vfiprintf_r+0xe4>
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d05b      	beq.n	8006bb8 <_vfiprintf_r+0xe4>
 8006b00:	2300      	movs	r3, #0
 8006b02:	9309      	str	r3, [sp, #36]	; 0x24
 8006b04:	2320      	movs	r3, #32
 8006b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b0a:	2330      	movs	r3, #48	; 0x30
 8006b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b10:	9503      	str	r5, [sp, #12]
 8006b12:	f04f 0b01 	mov.w	fp, #1
 8006b16:	46b8      	mov	r8, r7
 8006b18:	4645      	mov	r5, r8
 8006b1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b1e:	b10b      	cbz	r3, 8006b24 <_vfiprintf_r+0x50>
 8006b20:	2b25      	cmp	r3, #37	; 0x25
 8006b22:	d154      	bne.n	8006bce <_vfiprintf_r+0xfa>
 8006b24:	ebb8 0a07 	subs.w	sl, r8, r7
 8006b28:	d00b      	beq.n	8006b42 <_vfiprintf_r+0x6e>
 8006b2a:	4653      	mov	r3, sl
 8006b2c:	463a      	mov	r2, r7
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff ffbc 	bl	8006aae <__sfputs_r>
 8006b36:	3001      	adds	r0, #1
 8006b38:	f000 80c2 	beq.w	8006cc0 <_vfiprintf_r+0x1ec>
 8006b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b3e:	4453      	add	r3, sl
 8006b40:	9309      	str	r3, [sp, #36]	; 0x24
 8006b42:	f898 3000 	ldrb.w	r3, [r8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80ba 	beq.w	8006cc0 <_vfiprintf_r+0x1ec>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b56:	9304      	str	r3, [sp, #16]
 8006b58:	9307      	str	r3, [sp, #28]
 8006b5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b5e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b60:	46a8      	mov	r8, r5
 8006b62:	2205      	movs	r2, #5
 8006b64:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006b68:	485e      	ldr	r0, [pc, #376]	; (8006ce4 <_vfiprintf_r+0x210>)
 8006b6a:	f7f9 fb51 	bl	8000210 <memchr>
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	bb78      	cbnz	r0, 8006bd2 <_vfiprintf_r+0xfe>
 8006b72:	06d9      	lsls	r1, r3, #27
 8006b74:	bf44      	itt	mi
 8006b76:	2220      	movmi	r2, #32
 8006b78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b7c:	071a      	lsls	r2, r3, #28
 8006b7e:	bf44      	itt	mi
 8006b80:	222b      	movmi	r2, #43	; 0x2b
 8006b82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b86:	782a      	ldrb	r2, [r5, #0]
 8006b88:	2a2a      	cmp	r2, #42	; 0x2a
 8006b8a:	d02a      	beq.n	8006be2 <_vfiprintf_r+0x10e>
 8006b8c:	9a07      	ldr	r2, [sp, #28]
 8006b8e:	46a8      	mov	r8, r5
 8006b90:	2000      	movs	r0, #0
 8006b92:	250a      	movs	r5, #10
 8006b94:	4641      	mov	r1, r8
 8006b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b9a:	3b30      	subs	r3, #48	; 0x30
 8006b9c:	2b09      	cmp	r3, #9
 8006b9e:	d969      	bls.n	8006c74 <_vfiprintf_r+0x1a0>
 8006ba0:	b360      	cbz	r0, 8006bfc <_vfiprintf_r+0x128>
 8006ba2:	e024      	b.n	8006bee <_vfiprintf_r+0x11a>
 8006ba4:	4b50      	ldr	r3, [pc, #320]	; (8006ce8 <_vfiprintf_r+0x214>)
 8006ba6:	429c      	cmp	r4, r3
 8006ba8:	d101      	bne.n	8006bae <_vfiprintf_r+0xda>
 8006baa:	68b4      	ldr	r4, [r6, #8]
 8006bac:	e7a2      	b.n	8006af4 <_vfiprintf_r+0x20>
 8006bae:	4b4f      	ldr	r3, [pc, #316]	; (8006cec <_vfiprintf_r+0x218>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	bf08      	it	eq
 8006bb4:	68f4      	ldreq	r4, [r6, #12]
 8006bb6:	e79d      	b.n	8006af4 <_vfiprintf_r+0x20>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7ff fb1a 	bl	80061f4 <__swsetup_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d09d      	beq.n	8006b00 <_vfiprintf_r+0x2c>
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	b01d      	add	sp, #116	; 0x74
 8006bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bce:	46a8      	mov	r8, r5
 8006bd0:	e7a2      	b.n	8006b18 <_vfiprintf_r+0x44>
 8006bd2:	4a44      	ldr	r2, [pc, #272]	; (8006ce4 <_vfiprintf_r+0x210>)
 8006bd4:	1a80      	subs	r0, r0, r2
 8006bd6:	fa0b f000 	lsl.w	r0, fp, r0
 8006bda:	4318      	orrs	r0, r3
 8006bdc:	9004      	str	r0, [sp, #16]
 8006bde:	4645      	mov	r5, r8
 8006be0:	e7be      	b.n	8006b60 <_vfiprintf_r+0x8c>
 8006be2:	9a03      	ldr	r2, [sp, #12]
 8006be4:	1d11      	adds	r1, r2, #4
 8006be6:	6812      	ldr	r2, [r2, #0]
 8006be8:	9103      	str	r1, [sp, #12]
 8006bea:	2a00      	cmp	r2, #0
 8006bec:	db01      	blt.n	8006bf2 <_vfiprintf_r+0x11e>
 8006bee:	9207      	str	r2, [sp, #28]
 8006bf0:	e004      	b.n	8006bfc <_vfiprintf_r+0x128>
 8006bf2:	4252      	negs	r2, r2
 8006bf4:	f043 0302 	orr.w	r3, r3, #2
 8006bf8:	9207      	str	r2, [sp, #28]
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	f898 3000 	ldrb.w	r3, [r8]
 8006c00:	2b2e      	cmp	r3, #46	; 0x2e
 8006c02:	d10e      	bne.n	8006c22 <_vfiprintf_r+0x14e>
 8006c04:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006c08:	2b2a      	cmp	r3, #42	; 0x2a
 8006c0a:	d138      	bne.n	8006c7e <_vfiprintf_r+0x1aa>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	1d1a      	adds	r2, r3, #4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	9203      	str	r2, [sp, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bfb8      	it	lt
 8006c18:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c1c:	f108 0802 	add.w	r8, r8, #2
 8006c20:	9305      	str	r3, [sp, #20]
 8006c22:	4d33      	ldr	r5, [pc, #204]	; (8006cf0 <_vfiprintf_r+0x21c>)
 8006c24:	f898 1000 	ldrb.w	r1, [r8]
 8006c28:	2203      	movs	r2, #3
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f7f9 faf0 	bl	8000210 <memchr>
 8006c30:	b140      	cbz	r0, 8006c44 <_vfiprintf_r+0x170>
 8006c32:	2340      	movs	r3, #64	; 0x40
 8006c34:	1b40      	subs	r0, r0, r5
 8006c36:	fa03 f000 	lsl.w	r0, r3, r0
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	4303      	orrs	r3, r0
 8006c3e:	f108 0801 	add.w	r8, r8, #1
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	f898 1000 	ldrb.w	r1, [r8]
 8006c48:	482a      	ldr	r0, [pc, #168]	; (8006cf4 <_vfiprintf_r+0x220>)
 8006c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c4e:	2206      	movs	r2, #6
 8006c50:	f108 0701 	add.w	r7, r8, #1
 8006c54:	f7f9 fadc 	bl	8000210 <memchr>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d037      	beq.n	8006ccc <_vfiprintf_r+0x1f8>
 8006c5c:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <_vfiprintf_r+0x224>)
 8006c5e:	bb1b      	cbnz	r3, 8006ca8 <_vfiprintf_r+0x1d4>
 8006c60:	9b03      	ldr	r3, [sp, #12]
 8006c62:	3307      	adds	r3, #7
 8006c64:	f023 0307 	bic.w	r3, r3, #7
 8006c68:	3308      	adds	r3, #8
 8006c6a:	9303      	str	r3, [sp, #12]
 8006c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6e:	444b      	add	r3, r9
 8006c70:	9309      	str	r3, [sp, #36]	; 0x24
 8006c72:	e750      	b.n	8006b16 <_vfiprintf_r+0x42>
 8006c74:	fb05 3202 	mla	r2, r5, r2, r3
 8006c78:	2001      	movs	r0, #1
 8006c7a:	4688      	mov	r8, r1
 8006c7c:	e78a      	b.n	8006b94 <_vfiprintf_r+0xc0>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f108 0801 	add.w	r8, r8, #1
 8006c84:	9305      	str	r3, [sp, #20]
 8006c86:	4619      	mov	r1, r3
 8006c88:	250a      	movs	r5, #10
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c90:	3a30      	subs	r2, #48	; 0x30
 8006c92:	2a09      	cmp	r2, #9
 8006c94:	d903      	bls.n	8006c9e <_vfiprintf_r+0x1ca>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0c3      	beq.n	8006c22 <_vfiprintf_r+0x14e>
 8006c9a:	9105      	str	r1, [sp, #20]
 8006c9c:	e7c1      	b.n	8006c22 <_vfiprintf_r+0x14e>
 8006c9e:	fb05 2101 	mla	r1, r5, r1, r2
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	e7f0      	b.n	8006c8a <_vfiprintf_r+0x1b6>
 8006ca8:	ab03      	add	r3, sp, #12
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4622      	mov	r2, r4
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <_vfiprintf_r+0x228>)
 8006cb0:	a904      	add	r1, sp, #16
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f3af 8000 	nop.w
 8006cb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006cbc:	4681      	mov	r9, r0
 8006cbe:	d1d5      	bne.n	8006c6c <_vfiprintf_r+0x198>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	065b      	lsls	r3, r3, #25
 8006cc4:	f53f af7e 	bmi.w	8006bc4 <_vfiprintf_r+0xf0>
 8006cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cca:	e77d      	b.n	8006bc8 <_vfiprintf_r+0xf4>
 8006ccc:	ab03      	add	r3, sp, #12
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <_vfiprintf_r+0x228>)
 8006cd4:	a904      	add	r1, sp, #16
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f000 f888 	bl	8006dec <_printf_i>
 8006cdc:	e7ec      	b.n	8006cb8 <_vfiprintf_r+0x1e4>
 8006cde:	bf00      	nop
 8006ce0:	08007318 	.word	0x08007318
 8006ce4:	08007358 	.word	0x08007358
 8006ce8:	08007338 	.word	0x08007338
 8006cec:	080072f8 	.word	0x080072f8
 8006cf0:	0800735e 	.word	0x0800735e
 8006cf4:	08007362 	.word	0x08007362
 8006cf8:	00000000 	.word	0x00000000
 8006cfc:	08006aaf 	.word	0x08006aaf

08006d00 <_printf_common>:
 8006d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d04:	4691      	mov	r9, r2
 8006d06:	461f      	mov	r7, r3
 8006d08:	688a      	ldr	r2, [r1, #8]
 8006d0a:	690b      	ldr	r3, [r1, #16]
 8006d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bfb8      	it	lt
 8006d14:	4613      	movlt	r3, r2
 8006d16:	f8c9 3000 	str.w	r3, [r9]
 8006d1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d1e:	4606      	mov	r6, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	b112      	cbz	r2, 8006d2a <_printf_common+0x2a>
 8006d24:	3301      	adds	r3, #1
 8006d26:	f8c9 3000 	str.w	r3, [r9]
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	0699      	lsls	r1, r3, #26
 8006d2e:	bf42      	ittt	mi
 8006d30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d34:	3302      	addmi	r3, #2
 8006d36:	f8c9 3000 	strmi.w	r3, [r9]
 8006d3a:	6825      	ldr	r5, [r4, #0]
 8006d3c:	f015 0506 	ands.w	r5, r5, #6
 8006d40:	d107      	bne.n	8006d52 <_printf_common+0x52>
 8006d42:	f104 0a19 	add.w	sl, r4, #25
 8006d46:	68e3      	ldr	r3, [r4, #12]
 8006d48:	f8d9 2000 	ldr.w	r2, [r9]
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	42ab      	cmp	r3, r5
 8006d50:	dc28      	bgt.n	8006da4 <_printf_common+0xa4>
 8006d52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	3300      	adds	r3, #0
 8006d5a:	bf18      	it	ne
 8006d5c:	2301      	movne	r3, #1
 8006d5e:	0692      	lsls	r2, r2, #26
 8006d60:	d42d      	bmi.n	8006dbe <_printf_common+0xbe>
 8006d62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d66:	4639      	mov	r1, r7
 8006d68:	4630      	mov	r0, r6
 8006d6a:	47c0      	blx	r8
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d020      	beq.n	8006db2 <_printf_common+0xb2>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	68e5      	ldr	r5, [r4, #12]
 8006d74:	f8d9 2000 	ldr.w	r2, [r9]
 8006d78:	f003 0306 	and.w	r3, r3, #6
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	bf08      	it	eq
 8006d80:	1aad      	subeq	r5, r5, r2
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	6922      	ldr	r2, [r4, #16]
 8006d86:	bf0c      	ite	eq
 8006d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d8c:	2500      	movne	r5, #0
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	bfc4      	itt	gt
 8006d92:	1a9b      	subgt	r3, r3, r2
 8006d94:	18ed      	addgt	r5, r5, r3
 8006d96:	f04f 0900 	mov.w	r9, #0
 8006d9a:	341a      	adds	r4, #26
 8006d9c:	454d      	cmp	r5, r9
 8006d9e:	d11a      	bne.n	8006dd6 <_printf_common+0xd6>
 8006da0:	2000      	movs	r0, #0
 8006da2:	e008      	b.n	8006db6 <_printf_common+0xb6>
 8006da4:	2301      	movs	r3, #1
 8006da6:	4652      	mov	r2, sl
 8006da8:	4639      	mov	r1, r7
 8006daa:	4630      	mov	r0, r6
 8006dac:	47c0      	blx	r8
 8006dae:	3001      	adds	r0, #1
 8006db0:	d103      	bne.n	8006dba <_printf_common+0xba>
 8006db2:	f04f 30ff 	mov.w	r0, #4294967295
 8006db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dba:	3501      	adds	r5, #1
 8006dbc:	e7c3      	b.n	8006d46 <_printf_common+0x46>
 8006dbe:	18e1      	adds	r1, r4, r3
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	2030      	movs	r0, #48	; 0x30
 8006dc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dc8:	4422      	add	r2, r4
 8006dca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dd2:	3302      	adds	r3, #2
 8006dd4:	e7c5      	b.n	8006d62 <_printf_common+0x62>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	4622      	mov	r2, r4
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4630      	mov	r0, r6
 8006dde:	47c0      	blx	r8
 8006de0:	3001      	adds	r0, #1
 8006de2:	d0e6      	beq.n	8006db2 <_printf_common+0xb2>
 8006de4:	f109 0901 	add.w	r9, r9, #1
 8006de8:	e7d8      	b.n	8006d9c <_printf_common+0x9c>
	...

08006dec <_printf_i>:
 8006dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006df0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006df4:	460c      	mov	r4, r1
 8006df6:	7e09      	ldrb	r1, [r1, #24]
 8006df8:	b085      	sub	sp, #20
 8006dfa:	296e      	cmp	r1, #110	; 0x6e
 8006dfc:	4617      	mov	r7, r2
 8006dfe:	4606      	mov	r6, r0
 8006e00:	4698      	mov	r8, r3
 8006e02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e04:	f000 80b3 	beq.w	8006f6e <_printf_i+0x182>
 8006e08:	d822      	bhi.n	8006e50 <_printf_i+0x64>
 8006e0a:	2963      	cmp	r1, #99	; 0x63
 8006e0c:	d036      	beq.n	8006e7c <_printf_i+0x90>
 8006e0e:	d80a      	bhi.n	8006e26 <_printf_i+0x3a>
 8006e10:	2900      	cmp	r1, #0
 8006e12:	f000 80b9 	beq.w	8006f88 <_printf_i+0x19c>
 8006e16:	2958      	cmp	r1, #88	; 0x58
 8006e18:	f000 8083 	beq.w	8006f22 <_printf_i+0x136>
 8006e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e24:	e032      	b.n	8006e8c <_printf_i+0xa0>
 8006e26:	2964      	cmp	r1, #100	; 0x64
 8006e28:	d001      	beq.n	8006e2e <_printf_i+0x42>
 8006e2a:	2969      	cmp	r1, #105	; 0x69
 8006e2c:	d1f6      	bne.n	8006e1c <_printf_i+0x30>
 8006e2e:	6820      	ldr	r0, [r4, #0]
 8006e30:	6813      	ldr	r3, [r2, #0]
 8006e32:	0605      	lsls	r5, r0, #24
 8006e34:	f103 0104 	add.w	r1, r3, #4
 8006e38:	d52a      	bpl.n	8006e90 <_printf_i+0xa4>
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6011      	str	r1, [r2, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	da03      	bge.n	8006e4a <_printf_i+0x5e>
 8006e42:	222d      	movs	r2, #45	; 0x2d
 8006e44:	425b      	negs	r3, r3
 8006e46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e4a:	486f      	ldr	r0, [pc, #444]	; (8007008 <_printf_i+0x21c>)
 8006e4c:	220a      	movs	r2, #10
 8006e4e:	e039      	b.n	8006ec4 <_printf_i+0xd8>
 8006e50:	2973      	cmp	r1, #115	; 0x73
 8006e52:	f000 809d 	beq.w	8006f90 <_printf_i+0x1a4>
 8006e56:	d808      	bhi.n	8006e6a <_printf_i+0x7e>
 8006e58:	296f      	cmp	r1, #111	; 0x6f
 8006e5a:	d020      	beq.n	8006e9e <_printf_i+0xb2>
 8006e5c:	2970      	cmp	r1, #112	; 0x70
 8006e5e:	d1dd      	bne.n	8006e1c <_printf_i+0x30>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	f043 0320 	orr.w	r3, r3, #32
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	e003      	b.n	8006e72 <_printf_i+0x86>
 8006e6a:	2975      	cmp	r1, #117	; 0x75
 8006e6c:	d017      	beq.n	8006e9e <_printf_i+0xb2>
 8006e6e:	2978      	cmp	r1, #120	; 0x78
 8006e70:	d1d4      	bne.n	8006e1c <_printf_i+0x30>
 8006e72:	2378      	movs	r3, #120	; 0x78
 8006e74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e78:	4864      	ldr	r0, [pc, #400]	; (800700c <_printf_i+0x220>)
 8006e7a:	e055      	b.n	8006f28 <_printf_i+0x13c>
 8006e7c:	6813      	ldr	r3, [r2, #0]
 8006e7e:	1d19      	adds	r1, r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6011      	str	r1, [r2, #0]
 8006e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e08c      	b.n	8006faa <_printf_i+0x1be>
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6011      	str	r1, [r2, #0]
 8006e94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e98:	bf18      	it	ne
 8006e9a:	b21b      	sxthne	r3, r3
 8006e9c:	e7cf      	b.n	8006e3e <_printf_i+0x52>
 8006e9e:	6813      	ldr	r3, [r2, #0]
 8006ea0:	6825      	ldr	r5, [r4, #0]
 8006ea2:	1d18      	adds	r0, r3, #4
 8006ea4:	6010      	str	r0, [r2, #0]
 8006ea6:	0628      	lsls	r0, r5, #24
 8006ea8:	d501      	bpl.n	8006eae <_printf_i+0xc2>
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	e002      	b.n	8006eb4 <_printf_i+0xc8>
 8006eae:	0668      	lsls	r0, r5, #25
 8006eb0:	d5fb      	bpl.n	8006eaa <_printf_i+0xbe>
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	4854      	ldr	r0, [pc, #336]	; (8007008 <_printf_i+0x21c>)
 8006eb6:	296f      	cmp	r1, #111	; 0x6f
 8006eb8:	bf14      	ite	ne
 8006eba:	220a      	movne	r2, #10
 8006ebc:	2208      	moveq	r2, #8
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ec4:	6865      	ldr	r5, [r4, #4]
 8006ec6:	60a5      	str	r5, [r4, #8]
 8006ec8:	2d00      	cmp	r5, #0
 8006eca:	f2c0 8095 	blt.w	8006ff8 <_printf_i+0x20c>
 8006ece:	6821      	ldr	r1, [r4, #0]
 8006ed0:	f021 0104 	bic.w	r1, r1, #4
 8006ed4:	6021      	str	r1, [r4, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d13d      	bne.n	8006f56 <_printf_i+0x16a>
 8006eda:	2d00      	cmp	r5, #0
 8006edc:	f040 808e 	bne.w	8006ffc <_printf_i+0x210>
 8006ee0:	4665      	mov	r5, ip
 8006ee2:	2a08      	cmp	r2, #8
 8006ee4:	d10b      	bne.n	8006efe <_printf_i+0x112>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	07db      	lsls	r3, r3, #31
 8006eea:	d508      	bpl.n	8006efe <_printf_i+0x112>
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	6862      	ldr	r2, [r4, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	bfde      	ittt	le
 8006ef4:	2330      	movle	r3, #48	; 0x30
 8006ef6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006efa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006efe:	ebac 0305 	sub.w	r3, ip, r5
 8006f02:	6123      	str	r3, [r4, #16]
 8006f04:	f8cd 8000 	str.w	r8, [sp]
 8006f08:	463b      	mov	r3, r7
 8006f0a:	aa03      	add	r2, sp, #12
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff fef6 	bl	8006d00 <_printf_common>
 8006f14:	3001      	adds	r0, #1
 8006f16:	d14d      	bne.n	8006fb4 <_printf_i+0x1c8>
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1c:	b005      	add	sp, #20
 8006f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f22:	4839      	ldr	r0, [pc, #228]	; (8007008 <_printf_i+0x21c>)
 8006f24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f28:	6813      	ldr	r3, [r2, #0]
 8006f2a:	6821      	ldr	r1, [r4, #0]
 8006f2c:	1d1d      	adds	r5, r3, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6015      	str	r5, [r2, #0]
 8006f32:	060a      	lsls	r2, r1, #24
 8006f34:	d50b      	bpl.n	8006f4e <_printf_i+0x162>
 8006f36:	07ca      	lsls	r2, r1, #31
 8006f38:	bf44      	itt	mi
 8006f3a:	f041 0120 	orrmi.w	r1, r1, #32
 8006f3e:	6021      	strmi	r1, [r4, #0]
 8006f40:	b91b      	cbnz	r3, 8006f4a <_printf_i+0x15e>
 8006f42:	6822      	ldr	r2, [r4, #0]
 8006f44:	f022 0220 	bic.w	r2, r2, #32
 8006f48:	6022      	str	r2, [r4, #0]
 8006f4a:	2210      	movs	r2, #16
 8006f4c:	e7b7      	b.n	8006ebe <_printf_i+0xd2>
 8006f4e:	064d      	lsls	r5, r1, #25
 8006f50:	bf48      	it	mi
 8006f52:	b29b      	uxthmi	r3, r3
 8006f54:	e7ef      	b.n	8006f36 <_printf_i+0x14a>
 8006f56:	4665      	mov	r5, ip
 8006f58:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f5c:	fb02 3311 	mls	r3, r2, r1, r3
 8006f60:	5cc3      	ldrb	r3, [r0, r3]
 8006f62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f66:	460b      	mov	r3, r1
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	d1f5      	bne.n	8006f58 <_printf_i+0x16c>
 8006f6c:	e7b9      	b.n	8006ee2 <_printf_i+0xf6>
 8006f6e:	6813      	ldr	r3, [r2, #0]
 8006f70:	6825      	ldr	r5, [r4, #0]
 8006f72:	6961      	ldr	r1, [r4, #20]
 8006f74:	1d18      	adds	r0, r3, #4
 8006f76:	6010      	str	r0, [r2, #0]
 8006f78:	0628      	lsls	r0, r5, #24
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	d501      	bpl.n	8006f82 <_printf_i+0x196>
 8006f7e:	6019      	str	r1, [r3, #0]
 8006f80:	e002      	b.n	8006f88 <_printf_i+0x19c>
 8006f82:	066a      	lsls	r2, r5, #25
 8006f84:	d5fb      	bpl.n	8006f7e <_printf_i+0x192>
 8006f86:	8019      	strh	r1, [r3, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	4665      	mov	r5, ip
 8006f8e:	e7b9      	b.n	8006f04 <_printf_i+0x118>
 8006f90:	6813      	ldr	r3, [r2, #0]
 8006f92:	1d19      	adds	r1, r3, #4
 8006f94:	6011      	str	r1, [r2, #0]
 8006f96:	681d      	ldr	r5, [r3, #0]
 8006f98:	6862      	ldr	r2, [r4, #4]
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f7f9 f937 	bl	8000210 <memchr>
 8006fa2:	b108      	cbz	r0, 8006fa8 <_printf_i+0x1bc>
 8006fa4:	1b40      	subs	r0, r0, r5
 8006fa6:	6060      	str	r0, [r4, #4]
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	6123      	str	r3, [r4, #16]
 8006fac:	2300      	movs	r3, #0
 8006fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb2:	e7a7      	b.n	8006f04 <_printf_i+0x118>
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	462a      	mov	r2, r5
 8006fb8:	4639      	mov	r1, r7
 8006fba:	4630      	mov	r0, r6
 8006fbc:	47c0      	blx	r8
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d0aa      	beq.n	8006f18 <_printf_i+0x12c>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	079b      	lsls	r3, r3, #30
 8006fc6:	d413      	bmi.n	8006ff0 <_printf_i+0x204>
 8006fc8:	68e0      	ldr	r0, [r4, #12]
 8006fca:	9b03      	ldr	r3, [sp, #12]
 8006fcc:	4298      	cmp	r0, r3
 8006fce:	bfb8      	it	lt
 8006fd0:	4618      	movlt	r0, r3
 8006fd2:	e7a3      	b.n	8006f1c <_printf_i+0x130>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	464a      	mov	r2, r9
 8006fd8:	4639      	mov	r1, r7
 8006fda:	4630      	mov	r0, r6
 8006fdc:	47c0      	blx	r8
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d09a      	beq.n	8006f18 <_printf_i+0x12c>
 8006fe2:	3501      	adds	r5, #1
 8006fe4:	68e3      	ldr	r3, [r4, #12]
 8006fe6:	9a03      	ldr	r2, [sp, #12]
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	42ab      	cmp	r3, r5
 8006fec:	dcf2      	bgt.n	8006fd4 <_printf_i+0x1e8>
 8006fee:	e7eb      	b.n	8006fc8 <_printf_i+0x1dc>
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	f104 0919 	add.w	r9, r4, #25
 8006ff6:	e7f5      	b.n	8006fe4 <_printf_i+0x1f8>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1ac      	bne.n	8006f56 <_printf_i+0x16a>
 8006ffc:	7803      	ldrb	r3, [r0, #0]
 8006ffe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007002:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007006:	e76c      	b.n	8006ee2 <_printf_i+0xf6>
 8007008:	08007369 	.word	0x08007369
 800700c:	0800737a 	.word	0x0800737a

08007010 <_sbrk_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4c06      	ldr	r4, [pc, #24]	; (800702c <_sbrk_r+0x1c>)
 8007014:	2300      	movs	r3, #0
 8007016:	4605      	mov	r5, r0
 8007018:	4608      	mov	r0, r1
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	f7f9 fdea 	bl	8000bf4 <_sbrk>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_sbrk_r+0x1a>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	b103      	cbz	r3, 800702a <_sbrk_r+0x1a>
 8007028:	602b      	str	r3, [r5, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20004b08 	.word	0x20004b08

08007030 <__sread>:
 8007030:	b510      	push	{r4, lr}
 8007032:	460c      	mov	r4, r1
 8007034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007038:	f000 f8d6 	bl	80071e8 <_read_r>
 800703c:	2800      	cmp	r0, #0
 800703e:	bfab      	itete	ge
 8007040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007042:	89a3      	ldrhlt	r3, [r4, #12]
 8007044:	181b      	addge	r3, r3, r0
 8007046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800704a:	bfac      	ite	ge
 800704c:	6563      	strge	r3, [r4, #84]	; 0x54
 800704e:	81a3      	strhlt	r3, [r4, #12]
 8007050:	bd10      	pop	{r4, pc}

08007052 <__swrite>:
 8007052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	461f      	mov	r7, r3
 8007058:	898b      	ldrh	r3, [r1, #12]
 800705a:	05db      	lsls	r3, r3, #23
 800705c:	4605      	mov	r5, r0
 800705e:	460c      	mov	r4, r1
 8007060:	4616      	mov	r6, r2
 8007062:	d505      	bpl.n	8007070 <__swrite+0x1e>
 8007064:	2302      	movs	r3, #2
 8007066:	2200      	movs	r2, #0
 8007068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706c:	f000 f868 	bl	8007140 <_lseek_r>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	4632      	mov	r2, r6
 800707e:	463b      	mov	r3, r7
 8007080:	4628      	mov	r0, r5
 8007082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007086:	f000 b817 	b.w	80070b8 <_write_r>

0800708a <__sseek>:
 800708a:	b510      	push	{r4, lr}
 800708c:	460c      	mov	r4, r1
 800708e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007092:	f000 f855 	bl	8007140 <_lseek_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	bf15      	itete	ne
 800709c:	6560      	strne	r0, [r4, #84]	; 0x54
 800709e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070a6:	81a3      	strheq	r3, [r4, #12]
 80070a8:	bf18      	it	ne
 80070aa:	81a3      	strhne	r3, [r4, #12]
 80070ac:	bd10      	pop	{r4, pc}

080070ae <__sclose>:
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 b813 	b.w	80070dc <_close_r>
	...

080070b8 <_write_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4c07      	ldr	r4, [pc, #28]	; (80070d8 <_write_r+0x20>)
 80070bc:	4605      	mov	r5, r0
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	6022      	str	r2, [r4, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7f9 fb54 	bl	8000774 <_write>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_write_r+0x1e>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_write_r+0x1e>
 80070d4:	602b      	str	r3, [r5, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20004b08 	.word	0x20004b08

080070dc <_close_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4c06      	ldr	r4, [pc, #24]	; (80070f8 <_close_r+0x1c>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4605      	mov	r5, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	f7f9 fd4f 	bl	8000b8a <_close>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_close_r+0x1a>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_close_r+0x1a>
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20004b08 	.word	0x20004b08

080070fc <_fstat_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4c07      	ldr	r4, [pc, #28]	; (800711c <_fstat_r+0x20>)
 8007100:	2300      	movs	r3, #0
 8007102:	4605      	mov	r5, r0
 8007104:	4608      	mov	r0, r1
 8007106:	4611      	mov	r1, r2
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	f7f9 fd4a 	bl	8000ba2 <_fstat>
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	d102      	bne.n	8007118 <_fstat_r+0x1c>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	b103      	cbz	r3, 8007118 <_fstat_r+0x1c>
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	bd38      	pop	{r3, r4, r5, pc}
 800711a:	bf00      	nop
 800711c:	20004b08 	.word	0x20004b08

08007120 <_isatty_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4c06      	ldr	r4, [pc, #24]	; (800713c <_isatty_r+0x1c>)
 8007124:	2300      	movs	r3, #0
 8007126:	4605      	mov	r5, r0
 8007128:	4608      	mov	r0, r1
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	f7f9 fd49 	bl	8000bc2 <_isatty>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_isatty_r+0x1a>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	b103      	cbz	r3, 800713a <_isatty_r+0x1a>
 8007138:	602b      	str	r3, [r5, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20004b08 	.word	0x20004b08

08007140 <_lseek_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4c07      	ldr	r4, [pc, #28]	; (8007160 <_lseek_r+0x20>)
 8007144:	4605      	mov	r5, r0
 8007146:	4608      	mov	r0, r1
 8007148:	4611      	mov	r1, r2
 800714a:	2200      	movs	r2, #0
 800714c:	6022      	str	r2, [r4, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	f7f9 fd42 	bl	8000bd8 <_lseek>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_lseek_r+0x1e>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	b103      	cbz	r3, 800715e <_lseek_r+0x1e>
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	20004b08 	.word	0x20004b08

08007164 <memmove>:
 8007164:	4288      	cmp	r0, r1
 8007166:	b510      	push	{r4, lr}
 8007168:	eb01 0302 	add.w	r3, r1, r2
 800716c:	d807      	bhi.n	800717e <memmove+0x1a>
 800716e:	1e42      	subs	r2, r0, #1
 8007170:	4299      	cmp	r1, r3
 8007172:	d00a      	beq.n	800718a <memmove+0x26>
 8007174:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007178:	f802 4f01 	strb.w	r4, [r2, #1]!
 800717c:	e7f8      	b.n	8007170 <memmove+0xc>
 800717e:	4283      	cmp	r3, r0
 8007180:	d9f5      	bls.n	800716e <memmove+0xa>
 8007182:	1881      	adds	r1, r0, r2
 8007184:	1ad2      	subs	r2, r2, r3
 8007186:	42d3      	cmn	r3, r2
 8007188:	d100      	bne.n	800718c <memmove+0x28>
 800718a:	bd10      	pop	{r4, pc}
 800718c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007190:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007194:	e7f7      	b.n	8007186 <memmove+0x22>

08007196 <__malloc_lock>:
 8007196:	4770      	bx	lr

08007198 <__malloc_unlock>:
 8007198:	4770      	bx	lr

0800719a <_realloc_r>:
 800719a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719c:	4607      	mov	r7, r0
 800719e:	4614      	mov	r4, r2
 80071a0:	460e      	mov	r6, r1
 80071a2:	b921      	cbnz	r1, 80071ae <_realloc_r+0x14>
 80071a4:	4611      	mov	r1, r2
 80071a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071aa:	f7ff babd 	b.w	8006728 <_malloc_r>
 80071ae:	b922      	cbnz	r2, 80071ba <_realloc_r+0x20>
 80071b0:	f7ff fa6c 	bl	800668c <_free_r>
 80071b4:	4625      	mov	r5, r4
 80071b6:	4628      	mov	r0, r5
 80071b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ba:	f000 f827 	bl	800720c <_malloc_usable_size_r>
 80071be:	42a0      	cmp	r0, r4
 80071c0:	d20f      	bcs.n	80071e2 <_realloc_r+0x48>
 80071c2:	4621      	mov	r1, r4
 80071c4:	4638      	mov	r0, r7
 80071c6:	f7ff faaf 	bl	8006728 <_malloc_r>
 80071ca:	4605      	mov	r5, r0
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d0f2      	beq.n	80071b6 <_realloc_r+0x1c>
 80071d0:	4631      	mov	r1, r6
 80071d2:	4622      	mov	r2, r4
 80071d4:	f7fe ff0c 	bl	8005ff0 <memcpy>
 80071d8:	4631      	mov	r1, r6
 80071da:	4638      	mov	r0, r7
 80071dc:	f7ff fa56 	bl	800668c <_free_r>
 80071e0:	e7e9      	b.n	80071b6 <_realloc_r+0x1c>
 80071e2:	4635      	mov	r5, r6
 80071e4:	e7e7      	b.n	80071b6 <_realloc_r+0x1c>
	...

080071e8 <_read_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4c07      	ldr	r4, [pc, #28]	; (8007208 <_read_r+0x20>)
 80071ec:	4605      	mov	r5, r0
 80071ee:	4608      	mov	r0, r1
 80071f0:	4611      	mov	r1, r2
 80071f2:	2200      	movs	r2, #0
 80071f4:	6022      	str	r2, [r4, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	f7f9 fcaa 	bl	8000b50 <_read>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d102      	bne.n	8007206 <_read_r+0x1e>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	b103      	cbz	r3, 8007206 <_read_r+0x1e>
 8007204:	602b      	str	r3, [r5, #0]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	20004b08 	.word	0x20004b08

0800720c <_malloc_usable_size_r>:
 800720c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007210:	1f18      	subs	r0, r3, #4
 8007212:	2b00      	cmp	r3, #0
 8007214:	bfbc      	itt	lt
 8007216:	580b      	ldrlt	r3, [r1, r0]
 8007218:	18c0      	addlt	r0, r0, r3
 800721a:	4770      	bx	lr

0800721c <_init>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr

08007228 <_fini>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	bf00      	nop
 800722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722e:	bc08      	pop	{r3}
 8007230:	469e      	mov	lr, r3
 8007232:	4770      	bx	lr
